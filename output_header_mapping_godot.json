{
    "drivers/register_driver_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGISTER_DRIVER_TYPES_H"
        ]
    },
    "drivers/gles3/rasterizer_gles3.h": {
        "classes": [
            "RasterizerGLES3"
        ],
        "structs": [],
        "defines": [
            "RASTERIZER_GLES3_H"
        ]
    },
    "drivers/gles3/shader_gles3.h": {
        "classes": [
            "ShaderGLES3"
        ],
        "structs": [
            "TextureUniformData",
            "TexUnitPair",
            "UBOPair",
            "Specialization",
            "Feedback",
            "Version",
            "Specialization",
            "StageTemplate",
            "Chunk"
        ],
        "defines": [
            "SHADER_GLES3_H"
        ]
    },
    "drivers/gles3/rasterizer_scene_gles3.h": {
        "classes": [
            "RasterizerSceneGLES3",
            "GeometryInstanceGLES3"
        ],
        "structs": [
            "RenderDataGLES3",
            "InstanceSort",
            "SceneGlobals",
            "LightData",
            "DirectionalLightData",
            "ShadowData",
            "DirectionalShadowData",
            "GeometryInstanceSurface",
            "GeometryInstanceLightmapSH",
            "LightPass",
            "SceneState",
            "UBO",
            "MultiviewUBO",
            "TonemapUBO",
            "RenderListParameters",
            "RenderList",
            "SortByKey",
            "SortByDepth",
            "SortByReverseDepthAndPriority",
            "CameraAttributes",
            "SkyGlobals",
            "Sky"
        ],
        "defines": [
            "RASTERIZER_SCENE_GLES3_H"
        ]
    },
    "drivers/gles3/rasterizer_canvas_gles3.h": {
        "classes": [
            "RasterizerCanvasGLES3"
        ],
        "structs": [
            "CanvasLight",
            "OccluderPolygon",
            "LightUniform",
            "StateBuffer",
            "PolygonBuffers",
            "InstanceData",
            "Data",
            "Batch",
            "DataBuffer",
            "State"
        ],
        "defines": [
            "RASTERIZER_CANVAS_GLES3_H"
        ]
    },
    "drivers/gles3/storage/particles_storage.h": {
        "classes": [
            "ParticlesStorage"
        ],
        "structs": [
            "ParticleInstanceData3D",
            "ParticleInstanceData2D",
            "ParticlesViewSort",
            "ParticlesFrameParams",
            "Attractor",
            "Collider",
            "Particles",
            "ParticlesShader",
            "ParticlesCollision",
            "ParticlesCollisionInstance"
        ],
        "defines": [
            "PARTICLES_STORAGE_GLES3_H"
        ]
    },
    "drivers/gles3/storage/light_storage.h": {
        "classes": [
            "LightStorage"
        ],
        "structs": [
            "Light",
            "LightInstance",
            "ShadowTransform",
            "ReflectionProbe",
            "Lightmap",
            "BSP",
            "LightmapInstance",
            "ShadowAtlas",
            "Quadrant",
            "Shadow",
            "DirectionalShadow"
        ],
        "defines": [
            "LIGHT_STORAGE_GLES3_H"
        ]
    },
    "drivers/gles3/storage/material_storage.h": {
        "classes": [
            "MaterialStorage"
        ],
        "structs": [
            "ShaderData",
            "Shader",
            "MaterialData",
            "Material",
            "CanvasShaderData",
            "CanvasMaterialData",
            "SkyShaderData",
            "SkyMaterialData",
            "SceneShaderData",
            "SceneMaterialData",
            "ParticlesShaderData",
            "ParticleProcessMaterialData",
            "GlobalShaderUniforms",
            "Variable",
            "Value",
            "ValueInt",
            "ValueUInt",
            "ValueUsage",
            "Shaders"
        ],
        "defines": [
            "MATERIAL_STORAGE_GLES3_H"
        ]
    },
    "drivers/gles3/storage/config.h": {
        "classes": [
            "Config"
        ],
        "structs": [],
        "defines": [
            "CONFIG_GLES3_H"
        ]
    },
    "drivers/gles3/storage/utilities.h": {
        "classes": [
            "Utilities"
        ],
        "structs": [
            "VisibilityNotifier",
            "ResourceAllocation",
            "Frame"
        ],
        "defines": [
            "UTILITIES_GLES3_H",
            "MAX_QUERIES",
            "FRAME_COUNT"
        ]
    },
    "drivers/gles3/storage/texture_storage.h": {
        "classes": [
            "TextureStorage"
        ],
        "structs": [
            "CanvasTexture",
            "Texture",
            "RenderTarget",
            "RTOverridden",
            "FBOCacheEntry",
            "TextureAtlas",
            "Texture",
            "SortItem",
            "RenderTargetSDF"
        ],
        "defines": [
            "TEXTURE_STORAGE_GLES3_H",
            "_GL_TEXTURE_MAX_ANISOTROPY_EXT",
            "_GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT",
            "_EXT_COMPRESSED_RGBA_S3TC_DXT1_EXT",
            "_EXT_COMPRESSED_RGBA_S3TC_DXT3_EXT",
            "_EXT_COMPRESSED_RGBA_S3TC_DXT5_EXT",
            "_EXT_COMPRESSED_RED_RGTC1_EXT",
            "_EXT_COMPRESSED_RED_RGTC1",
            "_EXT_COMPRESSED_SIGNED_RED_RGTC1",
            "_EXT_COMPRESSED_RG_RGTC2",
            "_EXT_COMPRESSED_SIGNED_RG_RGTC2",
            "_EXT_COMPRESSED_SIGNED_RED_RGTC1_EXT",
            "_EXT_COMPRESSED_RED_GREEN_RGTC2_EXT",
            "_EXT_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT",
            "_EXT_ETC1_RGB8_OES",
            "_EXT_COMPRESSED_RGBA_BPTC_UNORM",
            "_EXT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM",
            "_EXT_COMPRESSED_RGB_BPTC_SIGNED_FLOAT",
            "_EXT_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT",
            "_EXT_COMPRESSED_R11_EAC",
            "_EXT_COMPRESSED_SIGNED_R11_EAC",
            "_EXT_COMPRESSED_RG11_EAC",
            "_EXT_COMPRESSED_SIGNED_RG11_EAC",
            "_EXT_COMPRESSED_RGB8_ETC2",
            "_EXT_COMPRESSED_SRGB8_ETC2",
            "_EXT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2",
            "_EXT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2",
            "_EXT_COMPRESSED_RGBA8_ETC2_EAC",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC",
            "_EXT_COMPRESSED_RGBA_ASTC_4x4_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_5x4_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_5x5_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_6x5_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_6x6_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_8x5_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_8x6_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_8x8_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_10x5_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_10x6_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_10x8_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_10x10_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_12x10_KHR",
            "_EXT_COMPRESSED_RGBA_ASTC_12x12_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR",
            "_EXT_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR",
            "_GL_TEXTURE_EXTERNAL_OES",
            "_EXT_TEXTURE_CUBE_MAP_SEAMLESS"
        ]
    },
    "drivers/gles3/storage/mesh_storage.h": {
        "classes": [
            "MeshStorage"
        ],
        "structs": [
            "Mesh",
            "Surface",
            "Attrib",
            "Version",
            "Wireframe",
            "LOD",
            "BlendShape",
            "MeshInstance",
            "Surface",
            "MultiMesh",
            "Skeleton"
        ],
        "defines": [
            "MESH_STORAGE_GLES3_H"
        ]
    },
    "drivers/gles3/storage/render_scene_buffers_gles3.h": {
        "classes": [
            "RenderSceneBuffersGLES3"
        ],
        "structs": [
            "FBDEF",
            "RTMSAA3D",
            "GLOW"
        ],
        "defines": [
            "RENDER_SCENE_BUFFERS_GLES3_H"
        ]
    },
    "drivers/gles3/shaders/skeleton.glsl.gen.h": {
        "classes": [
            "SkeletonShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "SKELETON_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "MODE_BLEND_PASS"
        ]
    },
    "drivers/gles3/shaders/cubemap_filter.glsl.gen.h": {
        "classes": [
            "CubemapFilterShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "CUBEMAP_FILTER_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "MODE_DIRECT_WRITE"
        ]
    },
    "drivers/gles3/shaders/sky.glsl.gen.h": {
        "classes": [
            "SkyShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "SKY_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "USE_HALF_RES_PASS",
            "USE_QUARTER_RES_PASS",
            "USE_CUBEMAP_PASS",
            "USE_CUBEMAP_PASS",
            "USE_HALF_RES_PASS",
            "USE_CUBEMAP_PASS",
            "USE_QUARTER_RES_PASS"
        ]
    },
    "drivers/gles3/shaders/canvas.glsl.gen.h": {
        "classes": [
            "CanvasShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "CANVAS_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "USE_NINEPATCH",
            "USE_PRIMITIVE",
            "USE_ATTRIBUTES",
            "USE_ATTRIBUTES",
            "USE_INSTANCING"
        ]
    },
    "drivers/gles3/shaders/canvas_sdf.glsl.gen.h": {
        "classes": [
            "CanvasSdfShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "CANVAS_SDF_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "MODE_LOAD",
            "MODE_LOAD_SHRINK",
            "MODE_PROCESS",
            "MODE_STORE",
            "MODE_STORE_SHRINK"
        ]
    },
    "drivers/gles3/shaders/canvas_occlusion.glsl.gen.h": {
        "classes": [
            "CanvasOcclusionShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "CANVAS_OCCLUSION_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "MODE_SHADOW",
            "MODE_SHADOW",
            "USE_RGBA_SHADOWS"
        ]
    },
    "drivers/gles3/shaders/scene.glsl.gen.h": {
        "classes": [
            "SceneShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "SCENE_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "USE_INSTANCING",
            "MODE_RENDER_DEPTH",
            "MODE_RENDER_DEPTH",
            "USE_INSTANCING"
        ]
    },
    "drivers/gles3/shaders/copy.glsl.gen.h": {
        "classes": [
            "CopyShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "COPY_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "MODE_SIMPLE_COPY",
            "USE_COPY_SECTION",
            "MODE_SIMPLE_COPY",
            "MODE_GAUSSIAN_BLUR",
            "MODE_MIPMAP",
            "MODE_SIMPLE_COLOR",
            "USE_COPY_SECTION",
            "CUBE_TO_OCTAHEDRAL",
            "USE_COPY_SECTION"
        ]
    },
    "drivers/gles3/shaders/particles.glsl.gen.h": {
        "classes": [
            "ParticlesShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "PARTICLES_GLSL_GEN_HGLES3_GLES3",
            "_FU"
        ]
    },
    "drivers/gles3/shaders/particles_copy.glsl.gen.h": {
        "classes": [
            "ParticlesCopyShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "PARTICLES_COPY_GLSL_GEN_HGLES3_GLES3",
            "_FU"
        ]
    },
    "drivers/gles3/shaders/effects/post.glsl.gen.h": {
        "classes": [
            "PostShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "POST_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "MODE_DEFAULT",
            "MODE_GLOW"
        ]
    },
    "drivers/gles3/shaders/effects/glow.glsl.gen.h": {
        "classes": [
            "GlowShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "GLOW_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "MODE_FILTER",
            "MODE_DOWNSAMPLE",
            "MODE_UPSAMPLE"
        ]
    },
    "drivers/gles3/shaders/effects/copy.glsl.gen.h": {
        "classes": [
            "CopyShaderGLES3"
        ],
        "structs": [],
        "defines": [
            "COPY_GLSL_GEN_HGLES3_GLES3",
            "_FU",
            "MODE_SIMPLE_COPY",
            "USE_COPY_SECTION",
            "MODE_SIMPLE_COPY",
            "USE_COPY_SECTION",
            "MODE_SIMPLE_COPY",
            "MODE_COPY_FROM",
            "USE_COPY_SECTION",
            "MODE_SIMPLE_COPY",
            "USE_TEXTURE_3D",
            "USE_COPY_SECTION",
            "MODE_SIMPLE_COPY",
            "USE_TEXTURE_2D_ARRAY",
            "MODE_SIMPLE_COPY",
            "MODE_MULTIPLY",
            "MODE_GAUSSIAN_BLUR",
            "MODE_MIPMAP",
            "MODE_SIMPLE_COLOR",
            "USE_COPY_SECTION",
            "CUBE_TO_OCTAHEDRAL",
            "USE_COPY_SECTION",
            "CUBE_TO_PANORAMA"
        ]
    },
    "drivers/gles3/environment/fog.h": {
        "classes": [
            "Fog"
        ],
        "structs": [],
        "defines": [
            "FOG_GLES3_H"
        ]
    },
    "drivers/gles3/environment/gi.h": {
        "classes": [
            "GI"
        ],
        "structs": [],
        "defines": [
            "GI_GLES3_H"
        ]
    },
    "drivers/gles3/effects/copy_effects.h": {
        "classes": [
            "CopyEffects"
        ],
        "structs": [
            "Copy"
        ],
        "defines": [
            "COPY_EFFECTS_GLES3_H"
        ]
    },
    "drivers/gles3/effects/post_effects.h": {
        "classes": [
            "PostEffects"
        ],
        "structs": [
            "Post"
        ],
        "defines": [
            "POST_EFFECTS_GLES3_H"
        ]
    },
    "drivers/gles3/effects/glow.h": {
        "classes": [
            "Glow"
        ],
        "structs": [
            "GLOW",
            "GLOWLEVEL"
        ],
        "defines": [
            "GLOW_GLES3_H"
        ]
    },
    "drivers/pulseaudio/audio_driver_pulseaudio.h": {
        "classes": [
            "AudioDriverPulseAudio"
        ],
        "structs": [],
        "defines": [
            "AUDIO_DRIVER_PULSEAUDIO_H"
        ]
    },
    "drivers/pulseaudio/pulse-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_PULSE",
            "pa_get_library_version",
            "pa_bytes_per_second",
            "pa_frame_size",
            "pa_sample_size",
            "pa_sample_size_of_format",
            "pa_bytes_to_usec",
            "pa_usec_to_bytes",
            "pa_sample_spec_init",
            "pa_sample_format_valid",
            "pa_sample_rate_valid",
            "pa_channels_valid",
            "pa_sample_spec_valid",
            "pa_sample_spec_equal",
            "pa_sample_format_to_string",
            "pa_parse_sample_format",
            "pa_sample_spec_snprint",
            "pa_bytes_snprint",
            "pa_sample_format_is_le",
            "pa_sample_format_is_be",
            "pa_direction_valid",
            "pa_direction_to_string",
            "pa_mainloop_api_once",
            "pa_proplist_new",
            "pa_proplist_free",
            "pa_proplist_key_valid",
            "pa_proplist_sets",
            "pa_proplist_setp",
            "pa_proplist_setf",
            "pa_proplist_set",
            "pa_proplist_gets",
            "pa_proplist_get",
            "pa_proplist_update",
            "pa_proplist_unset",
            "pa_proplist_unset_many",
            "pa_proplist_iterate",
            "pa_proplist_to_string",
            "pa_proplist_to_string_sep",
            "pa_proplist_from_string",
            "pa_proplist_contains",
            "pa_proplist_clear",
            "pa_proplist_copy",
            "pa_proplist_size",
            "pa_proplist_isempty",
            "pa_proplist_equal",
            "pa_channel_map_init",
            "pa_channel_map_init_mono",
            "pa_channel_map_init_stereo",
            "pa_channel_map_init_auto",
            "pa_channel_map_init_extend",
            "pa_channel_position_to_string",
            "pa_channel_position_from_string",
            "pa_channel_position_to_pretty_string",
            "pa_channel_map_snprint",
            "pa_channel_map_parse",
            "pa_channel_map_equal",
            "pa_channel_map_valid",
            "pa_channel_map_compatible",
            "pa_channel_map_superset",
            "pa_channel_map_can_balance",
            "pa_channel_map_can_fade",
            "pa_channel_map_can_lfe_balance",
            "pa_channel_map_to_name",
            "pa_channel_map_to_pretty_name",
            "pa_channel_map_has_position",
            "pa_channel_map_mask",
            "pa_encoding_to_string",
            "pa_encoding_from_string",
            "pa_format_info_new",
            "pa_format_info_copy",
            "pa_format_info_free",
            "pa_format_info_valid",
            "pa_format_info_is_pcm",
            "pa_format_info_is_compatible",
            "pa_format_info_snprint",
            "pa_format_info_from_string",
            "pa_format_info_from_sample_spec",
            "pa_format_info_to_sample_spec",
            "pa_format_info_get_prop_type",
            "pa_format_info_get_prop_int",
            "pa_format_info_get_prop_int_range",
            "pa_format_info_get_prop_int_array",
            "pa_format_info_get_prop_string",
            "pa_format_info_get_prop_string_array",
            "pa_format_info_free_string_array",
            "pa_format_info_set_prop_int",
            "pa_format_info_set_prop_int_array",
            "pa_format_info_set_prop_int_range",
            "pa_format_info_set_prop_string",
            "pa_format_info_set_prop_string_array",
            "pa_format_info_set_sample_format",
            "pa_format_info_set_rate",
            "pa_format_info_set_channels",
            "pa_format_info_set_channel_map",
            "pa_operation_ref",
            "pa_operation_unref",
            "pa_operation_cancel",
            "pa_operation_get_state",
            "pa_operation_set_state_callback",
            "pa_context_new",
            "pa_context_new_with_proplist",
            "pa_context_unref",
            "pa_context_ref",
            "pa_context_set_state_callback",
            "pa_context_set_event_callback",
            "pa_context_errno",
            "pa_context_is_pending",
            "pa_context_get_state",
            "pa_context_connect",
            "pa_context_disconnect",
            "pa_context_drain",
            "pa_context_exit_daemon",
            "pa_context_set_default_sink",
            "pa_context_set_default_source",
            "pa_context_is_local",
            "pa_context_set_name",
            "pa_context_get_server",
            "pa_context_get_protocol_version",
            "pa_context_get_server_protocol_version",
            "pa_context_proplist_update",
            "pa_context_proplist_remove",
            "pa_context_get_index",
            "pa_context_rttime_new",
            "pa_context_rttime_restart",
            "pa_context_get_tile_size",
            "pa_context_load_cookie_from_file",
            "pa_cvolume_equal",
            "pa_cvolume_init",
            "pa_cvolume_set",
            "pa_cvolume_snprint",
            "pa_sw_cvolume_snprint_dB",
            "pa_cvolume_snprint_verbose",
            "pa_volume_snprint",
            "pa_sw_volume_snprint_dB",
            "pa_volume_snprint_verbose",
            "pa_cvolume_avg",
            "pa_cvolume_avg_mask",
            "pa_cvolume_max",
            "pa_cvolume_max_mask",
            "pa_cvolume_min",
            "pa_cvolume_min_mask",
            "pa_cvolume_valid",
            "pa_cvolume_channels_equal_to",
            "pa_sw_volume_multiply",
            "pa_sw_cvolume_multiply",
            "pa_sw_cvolume_multiply_scalar",
            "pa_sw_volume_divide",
            "pa_sw_cvolume_divide",
            "pa_sw_cvolume_divide_scalar",
            "pa_sw_volume_from_dB",
            "pa_sw_volume_to_dB",
            "pa_sw_volume_from_linear",
            "pa_sw_volume_to_linear",
            "pa_cvolume_remap",
            "pa_cvolume_compatible",
            "pa_cvolume_compatible_with_channel_map",
            "pa_cvolume_get_balance",
            "pa_cvolume_set_balance",
            "pa_cvolume_get_fade",
            "pa_cvolume_set_fade",
            "pa_cvolume_get_lfe_balance",
            "pa_cvolume_set_lfe_balance",
            "pa_cvolume_scale",
            "pa_cvolume_scale_mask",
            "pa_cvolume_set_position",
            "pa_cvolume_get_position",
            "pa_cvolume_merge",
            "pa_cvolume_inc_clamp",
            "pa_cvolume_inc",
            "pa_cvolume_dec",
            "pa_stream_new",
            "pa_stream_new_with_proplist",
            "pa_stream_new_extended",
            "pa_stream_unref",
            "pa_stream_ref",
            "pa_stream_get_state",
            "pa_stream_get_context",
            "pa_stream_get_index",
            "pa_stream_get_device_index",
            "pa_stream_get_device_name",
            "pa_stream_is_suspended",
            "pa_stream_is_corked",
            "pa_stream_connect_playback",
            "pa_stream_connect_record",
            "pa_stream_disconnect",
            "pa_stream_begin_write",
            "pa_stream_cancel_write",
            "pa_stream_write",
            "pa_stream_write_ext_free",
            "pa_stream_peek",
            "pa_stream_drop",
            "pa_stream_writable_size",
            "pa_stream_readable_size",
            "pa_stream_drain",
            "pa_stream_update_timing_info",
            "pa_stream_set_state_callback",
            "pa_stream_set_write_callback",
            "pa_stream_set_read_callback",
            "pa_stream_set_overflow_callback",
            "pa_stream_get_underflow_index",
            "pa_stream_set_underflow_callback",
            "pa_stream_set_started_callback",
            "pa_stream_set_latency_update_callback",
            "pa_stream_set_moved_callback",
            "pa_stream_set_suspended_callback",
            "pa_stream_set_event_callback",
            "pa_stream_set_buffer_attr_callback",
            "pa_stream_cork",
            "pa_stream_flush",
            "pa_stream_prebuf",
            "pa_stream_trigger",
            "pa_stream_set_name",
            "pa_stream_get_time",
            "pa_stream_get_latency",
            "pa_stream_get_timing_info",
            "pa_stream_get_sample_spec",
            "pa_stream_get_channel_map",
            "pa_stream_get_format_info",
            "pa_stream_get_buffer_attr",
            "pa_stream_set_buffer_attr",
            "pa_stream_update_sample_rate",
            "pa_stream_proplist_update",
            "pa_stream_proplist_remove",
            "pa_stream_set_monitor_stream",
            "pa_stream_get_monitor_stream",
            "pa_context_get_sink_info_by_name",
            "pa_context_get_sink_info_by_index",
            "pa_context_get_sink_info_list",
            "pa_context_set_sink_volume_by_index",
            "pa_context_set_sink_volume_by_name",
            "pa_context_set_sink_mute_by_index",
            "pa_context_set_sink_mute_by_name",
            "pa_context_suspend_sink_by_name",
            "pa_context_suspend_sink_by_index",
            "pa_context_set_sink_port_by_index",
            "pa_context_set_sink_port_by_name",
            "pa_context_get_source_info_by_name",
            "pa_context_get_source_info_by_index",
            "pa_context_get_source_info_list",
            "pa_context_set_source_volume_by_index",
            "pa_context_set_source_volume_by_name",
            "pa_context_set_source_mute_by_index",
            "pa_context_set_source_mute_by_name",
            "pa_context_suspend_source_by_name",
            "pa_context_suspend_source_by_index",
            "pa_context_set_source_port_by_index",
            "pa_context_set_source_port_by_name",
            "pa_context_get_server_info",
            "pa_context_get_module_info",
            "pa_context_get_module_info_list",
            "pa_context_load_module",
            "pa_context_unload_module",
            "pa_context_get_client_info",
            "pa_context_get_client_info_list",
            "pa_context_kill_client",
            "pa_context_get_card_info_by_index",
            "pa_context_get_card_info_by_name",
            "pa_context_get_card_info_list",
            "pa_context_set_card_profile_by_index",
            "pa_context_set_card_profile_by_name",
            "pa_context_set_port_latency_offset",
            "pa_context_get_sink_input_info",
            "pa_context_get_sink_input_info_list",
            "pa_context_move_sink_input_by_name",
            "pa_context_move_sink_input_by_index",
            "pa_context_set_sink_input_volume",
            "pa_context_set_sink_input_mute",
            "pa_context_kill_sink_input",
            "pa_context_get_source_output_info",
            "pa_context_get_source_output_info_list",
            "pa_context_move_source_output_by_name",
            "pa_context_move_source_output_by_index",
            "pa_context_set_source_output_volume",
            "pa_context_set_source_output_mute",
            "pa_context_kill_source_output",
            "pa_context_stat",
            "pa_context_get_sample_info_by_name",
            "pa_context_get_sample_info_by_index",
            "pa_context_get_sample_info_list",
            "pa_context_get_autoload_info_by_name",
            "pa_context_get_autoload_info_by_index",
            "pa_context_get_autoload_info_list",
            "pa_context_add_autoload",
            "pa_context_remove_autoload_by_name",
            "pa_context_remove_autoload_by_index",
            "pa_context_subscribe",
            "pa_context_set_subscribe_callback",
            "pa_stream_connect_upload",
            "pa_stream_finish_upload",
            "pa_context_remove_sample",
            "pa_context_play_sample",
            "pa_context_play_sample_with_proplist",
            "pa_strerror",
            "pa_xmalloc",
            "pa_xmalloc0",
            "pa_xrealloc",
            "pa_xfree",
            "pa_xstrdup",
            "pa_xstrndup",
            "pa_xmemdup",
            "pa_utf8_valid",
            "pa_ascii_valid",
            "pa_utf8_filter",
            "pa_ascii_filter",
            "pa_utf8_to_locale",
            "pa_locale_to_utf8",
            "pa_threaded_mainloop_new",
            "pa_threaded_mainloop_free",
            "pa_threaded_mainloop_start",
            "pa_threaded_mainloop_stop",
            "pa_threaded_mainloop_lock",
            "pa_threaded_mainloop_unlock",
            "pa_threaded_mainloop_wait",
            "pa_threaded_mainloop_signal",
            "pa_threaded_mainloop_accept",
            "pa_threaded_mainloop_get_retval",
            "pa_threaded_mainloop_get_api",
            "pa_threaded_mainloop_in_thread",
            "pa_threaded_mainloop_set_name",
            "pa_mainloop_new",
            "pa_mainloop_free",
            "pa_mainloop_prepare",
            "pa_mainloop_poll",
            "pa_mainloop_dispatch",
            "pa_mainloop_get_retval",
            "pa_mainloop_iterate",
            "pa_mainloop_run",
            "pa_mainloop_get_api",
            "pa_mainloop_quit",
            "pa_mainloop_wakeup",
            "pa_mainloop_set_poll_func",
            "pa_signal_init",
            "pa_signal_done",
            "pa_signal_new",
            "pa_signal_free",
            "pa_signal_set_destroy",
            "pa_get_user_name",
            "pa_get_host_name",
            "pa_get_fqdn",
            "pa_get_home_dir",
            "pa_get_binary_name",
            "pa_path_get_filename",
            "pa_msleep",
            "pa_gettimeofday",
            "pa_timeval_diff",
            "pa_timeval_cmp",
            "pa_timeval_age",
            "pa_timeval_add",
            "pa_timeval_sub",
            "pa_timeval_store",
            "pa_timeval_load",
            "pa_rtclock_now",
            "pa_get_library_version",
            "pa_bytes_per_second",
            "pa_frame_size",
            "pa_sample_size",
            "pa_sample_size_of_format",
            "pa_bytes_to_usec",
            "pa_usec_to_bytes",
            "pa_sample_spec_init",
            "pa_sample_format_valid",
            "pa_sample_rate_valid",
            "pa_channels_valid",
            "pa_sample_spec_valid",
            "pa_sample_spec_equal",
            "pa_sample_format_to_string",
            "pa_parse_sample_format",
            "pa_sample_spec_snprint",
            "pa_bytes_snprint",
            "pa_sample_format_is_le",
            "pa_sample_format_is_be",
            "pa_direction_valid",
            "pa_direction_to_string",
            "pa_mainloop_api_once",
            "pa_proplist_new",
            "pa_proplist_free",
            "pa_proplist_key_valid",
            "pa_proplist_sets",
            "pa_proplist_setp",
            "pa_proplist_setf",
            "pa_proplist_set",
            "pa_proplist_gets",
            "pa_proplist_get",
            "pa_proplist_update",
            "pa_proplist_unset",
            "pa_proplist_unset_many",
            "pa_proplist_iterate",
            "pa_proplist_to_string",
            "pa_proplist_to_string_sep",
            "pa_proplist_from_string",
            "pa_proplist_contains",
            "pa_proplist_clear",
            "pa_proplist_copy",
            "pa_proplist_size",
            "pa_proplist_isempty",
            "pa_proplist_equal",
            "pa_channel_map_init",
            "pa_channel_map_init_mono",
            "pa_channel_map_init_stereo",
            "pa_channel_map_init_auto",
            "pa_channel_map_init_extend",
            "pa_channel_position_to_string",
            "pa_channel_position_from_string",
            "pa_channel_position_to_pretty_string",
            "pa_channel_map_snprint",
            "pa_channel_map_parse",
            "pa_channel_map_equal",
            "pa_channel_map_valid",
            "pa_channel_map_compatible",
            "pa_channel_map_superset",
            "pa_channel_map_can_balance",
            "pa_channel_map_can_fade",
            "pa_channel_map_can_lfe_balance",
            "pa_channel_map_to_name",
            "pa_channel_map_to_pretty_name",
            "pa_channel_map_has_position",
            "pa_channel_map_mask",
            "pa_encoding_to_string",
            "pa_encoding_from_string",
            "pa_format_info_new",
            "pa_format_info_copy",
            "pa_format_info_free",
            "pa_format_info_valid",
            "pa_format_info_is_pcm",
            "pa_format_info_is_compatible",
            "pa_format_info_snprint",
            "pa_format_info_from_string",
            "pa_format_info_from_sample_spec",
            "pa_format_info_to_sample_spec",
            "pa_format_info_get_prop_type",
            "pa_format_info_get_prop_int",
            "pa_format_info_get_prop_int_range",
            "pa_format_info_get_prop_int_array",
            "pa_format_info_get_prop_string",
            "pa_format_info_get_prop_string_array",
            "pa_format_info_free_string_array",
            "pa_format_info_set_prop_int",
            "pa_format_info_set_prop_int_array",
            "pa_format_info_set_prop_int_range",
            "pa_format_info_set_prop_string",
            "pa_format_info_set_prop_string_array",
            "pa_format_info_set_sample_format",
            "pa_format_info_set_rate",
            "pa_format_info_set_channels",
            "pa_format_info_set_channel_map",
            "pa_operation_ref",
            "pa_operation_unref",
            "pa_operation_cancel",
            "pa_operation_get_state",
            "pa_operation_set_state_callback",
            "pa_context_new",
            "pa_context_new_with_proplist",
            "pa_context_unref",
            "pa_context_ref",
            "pa_context_set_state_callback",
            "pa_context_set_event_callback",
            "pa_context_errno",
            "pa_context_is_pending",
            "pa_context_get_state",
            "pa_context_connect",
            "pa_context_disconnect",
            "pa_context_drain",
            "pa_context_exit_daemon",
            "pa_context_set_default_sink",
            "pa_context_set_default_source",
            "pa_context_is_local",
            "pa_context_set_name",
            "pa_context_get_server",
            "pa_context_get_protocol_version",
            "pa_context_get_server_protocol_version",
            "pa_context_proplist_update",
            "pa_context_proplist_remove",
            "pa_context_get_index",
            "pa_context_rttime_new",
            "pa_context_rttime_restart",
            "pa_context_get_tile_size",
            "pa_context_load_cookie_from_file",
            "pa_cvolume_equal",
            "pa_cvolume_init",
            "pa_cvolume_set",
            "pa_cvolume_snprint",
            "pa_sw_cvolume_snprint_dB",
            "pa_cvolume_snprint_verbose",
            "pa_volume_snprint",
            "pa_sw_volume_snprint_dB",
            "pa_volume_snprint_verbose",
            "pa_cvolume_avg",
            "pa_cvolume_avg_mask",
            "pa_cvolume_max",
            "pa_cvolume_max_mask",
            "pa_cvolume_min",
            "pa_cvolume_min_mask",
            "pa_cvolume_valid",
            "pa_cvolume_channels_equal_to",
            "pa_sw_volume_multiply",
            "pa_sw_cvolume_multiply",
            "pa_sw_cvolume_multiply_scalar",
            "pa_sw_volume_divide",
            "pa_sw_cvolume_divide",
            "pa_sw_cvolume_divide_scalar",
            "pa_sw_volume_from_dB",
            "pa_sw_volume_to_dB",
            "pa_sw_volume_from_linear",
            "pa_sw_volume_to_linear",
            "pa_cvolume_remap",
            "pa_cvolume_compatible",
            "pa_cvolume_compatible_with_channel_map",
            "pa_cvolume_get_balance",
            "pa_cvolume_set_balance",
            "pa_cvolume_get_fade",
            "pa_cvolume_set_fade",
            "pa_cvolume_get_lfe_balance",
            "pa_cvolume_set_lfe_balance",
            "pa_cvolume_scale",
            "pa_cvolume_scale_mask",
            "pa_cvolume_set_position",
            "pa_cvolume_get_position",
            "pa_cvolume_merge",
            "pa_cvolume_inc_clamp",
            "pa_cvolume_inc",
            "pa_cvolume_dec",
            "pa_stream_new",
            "pa_stream_new_with_proplist",
            "pa_stream_new_extended",
            "pa_stream_unref",
            "pa_stream_ref",
            "pa_stream_get_state",
            "pa_stream_get_context",
            "pa_stream_get_index",
            "pa_stream_get_device_index",
            "pa_stream_get_device_name",
            "pa_stream_is_suspended",
            "pa_stream_is_corked",
            "pa_stream_connect_playback",
            "pa_stream_connect_record",
            "pa_stream_disconnect",
            "pa_stream_begin_write",
            "pa_stream_cancel_write",
            "pa_stream_write",
            "pa_stream_write_ext_free",
            "pa_stream_peek",
            "pa_stream_drop",
            "pa_stream_writable_size",
            "pa_stream_readable_size",
            "pa_stream_drain",
            "pa_stream_update_timing_info",
            "pa_stream_set_state_callback",
            "pa_stream_set_write_callback",
            "pa_stream_set_read_callback",
            "pa_stream_set_overflow_callback",
            "pa_stream_get_underflow_index",
            "pa_stream_set_underflow_callback",
            "pa_stream_set_started_callback",
            "pa_stream_set_latency_update_callback",
            "pa_stream_set_moved_callback",
            "pa_stream_set_suspended_callback",
            "pa_stream_set_event_callback",
            "pa_stream_set_buffer_attr_callback",
            "pa_stream_cork",
            "pa_stream_flush",
            "pa_stream_prebuf",
            "pa_stream_trigger",
            "pa_stream_set_name",
            "pa_stream_get_time",
            "pa_stream_get_latency",
            "pa_stream_get_timing_info",
            "pa_stream_get_sample_spec",
            "pa_stream_get_channel_map",
            "pa_stream_get_format_info",
            "pa_stream_get_buffer_attr",
            "pa_stream_set_buffer_attr",
            "pa_stream_update_sample_rate",
            "pa_stream_proplist_update",
            "pa_stream_proplist_remove",
            "pa_stream_set_monitor_stream",
            "pa_stream_get_monitor_stream",
            "pa_context_get_sink_info_by_name",
            "pa_context_get_sink_info_by_index",
            "pa_context_get_sink_info_list",
            "pa_context_set_sink_volume_by_index",
            "pa_context_set_sink_volume_by_name",
            "pa_context_set_sink_mute_by_index",
            "pa_context_set_sink_mute_by_name",
            "pa_context_suspend_sink_by_name",
            "pa_context_suspend_sink_by_index",
            "pa_context_set_sink_port_by_index",
            "pa_context_set_sink_port_by_name",
            "pa_context_get_source_info_by_name",
            "pa_context_get_source_info_by_index",
            "pa_context_get_source_info_list",
            "pa_context_set_source_volume_by_index",
            "pa_context_set_source_volume_by_name",
            "pa_context_set_source_mute_by_index",
            "pa_context_set_source_mute_by_name",
            "pa_context_suspend_source_by_name",
            "pa_context_suspend_source_by_index",
            "pa_context_set_source_port_by_index",
            "pa_context_set_source_port_by_name",
            "pa_context_get_server_info",
            "pa_context_get_module_info",
            "pa_context_get_module_info_list",
            "pa_context_load_module",
            "pa_context_unload_module",
            "pa_context_get_client_info",
            "pa_context_get_client_info_list",
            "pa_context_kill_client",
            "pa_context_get_card_info_by_index",
            "pa_context_get_card_info_by_name",
            "pa_context_get_card_info_list",
            "pa_context_set_card_profile_by_index",
            "pa_context_set_card_profile_by_name",
            "pa_context_set_port_latency_offset",
            "pa_context_get_sink_input_info",
            "pa_context_get_sink_input_info_list",
            "pa_context_move_sink_input_by_name",
            "pa_context_move_sink_input_by_index",
            "pa_context_set_sink_input_volume",
            "pa_context_set_sink_input_mute",
            "pa_context_kill_sink_input",
            "pa_context_get_source_output_info",
            "pa_context_get_source_output_info_list",
            "pa_context_move_source_output_by_name",
            "pa_context_move_source_output_by_index",
            "pa_context_set_source_output_volume",
            "pa_context_set_source_output_mute",
            "pa_context_kill_source_output",
            "pa_context_stat",
            "pa_context_get_sample_info_by_name",
            "pa_context_get_sample_info_by_index",
            "pa_context_get_sample_info_list",
            "pa_context_get_autoload_info_by_name",
            "pa_context_get_autoload_info_by_index",
            "pa_context_get_autoload_info_list",
            "pa_context_add_autoload",
            "pa_context_remove_autoload_by_name",
            "pa_context_remove_autoload_by_index",
            "pa_context_subscribe",
            "pa_context_set_subscribe_callback",
            "pa_stream_connect_upload",
            "pa_stream_finish_upload",
            "pa_context_remove_sample",
            "pa_context_play_sample",
            "pa_context_play_sample_with_proplist",
            "pa_strerror",
            "pa_xmalloc",
            "pa_xmalloc0",
            "pa_xrealloc",
            "pa_xfree",
            "pa_xstrdup",
            "pa_xstrndup",
            "pa_xmemdup",
            "pa_utf8_valid",
            "pa_ascii_valid",
            "pa_utf8_filter",
            "pa_ascii_filter",
            "pa_utf8_to_locale",
            "pa_locale_to_utf8",
            "pa_threaded_mainloop_new",
            "pa_threaded_mainloop_free",
            "pa_threaded_mainloop_start",
            "pa_threaded_mainloop_stop",
            "pa_threaded_mainloop_lock",
            "pa_threaded_mainloop_unlock",
            "pa_threaded_mainloop_wait",
            "pa_threaded_mainloop_signal",
            "pa_threaded_mainloop_accept",
            "pa_threaded_mainloop_get_retval",
            "pa_threaded_mainloop_get_api",
            "pa_threaded_mainloop_in_thread",
            "pa_threaded_mainloop_set_name",
            "pa_mainloop_new",
            "pa_mainloop_free",
            "pa_mainloop_prepare",
            "pa_mainloop_poll",
            "pa_mainloop_dispatch",
            "pa_mainloop_get_retval",
            "pa_mainloop_iterate",
            "pa_mainloop_run",
            "pa_mainloop_get_api",
            "pa_mainloop_quit",
            "pa_mainloop_wakeup",
            "pa_mainloop_set_poll_func",
            "pa_signal_init",
            "pa_signal_done",
            "pa_signal_new",
            "pa_signal_free",
            "pa_signal_set_destroy",
            "pa_get_user_name",
            "pa_get_host_name",
            "pa_get_fqdn",
            "pa_get_home_dir",
            "pa_get_binary_name",
            "pa_path_get_filename",
            "pa_msleep",
            "pa_gettimeofday",
            "pa_timeval_diff",
            "pa_timeval_cmp",
            "pa_timeval_age",
            "pa_timeval_add",
            "pa_timeval_sub",
            "pa_timeval_store",
            "pa_timeval_load",
            "pa_rtclock_now"
        ]
    },
    "drivers/xaudio2/audio_driver_xaudio2.h": {
        "classes": [
            "AudioDriverXAudio2"
        ],
        "structs": [
            "XAudio2DriverVoiceCallback"
        ],
        "defines": [
            "AUDIO_DRIVER_XAUDIO2_H",
            "WIN32_LEAN_AND_MEAN"
        ]
    },
    "drivers/winmidi/midi_driver_winmidi.h": {
        "classes": [
            "MIDIDriverWinMidi"
        ],
        "structs": [],
        "defines": [
            "MIDI_DRIVER_WINMIDI_H",
            "WIN32_LEAN_AND_MEAN"
        ]
    },
    "drivers/wasapi/audio_driver_wasapi.h": {
        "classes": [
            "AudioDriverWASAPI",
            "AudioDeviceWASAPI"
        ],
        "structs": [],
        "defines": [
            "AUDIO_DRIVER_WASAPI_H",
            "WIN32_LEAN_AND_MEAN"
        ]
    },
    "drivers/png/png_driver_common.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PNG_DRIVER_COMMON_H"
        ]
    },
    "drivers/png/image_loader_png.h": {
        "classes": [
            "ImageLoaderPNG"
        ],
        "structs": [],
        "defines": [
            "IMAGE_LOADER_PNG_H"
        ]
    },
    "drivers/png/resource_saver_png.h": {
        "classes": [
            "ResourceSaverPNG"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_SAVER_PNG_H"
        ]
    },
    "drivers/egl/egl_manager.h": {
        "classes": [
            "EGLManager"
        ],
        "structs": [
            "GLDisplay",
            "GLWindow"
        ],
        "defines": [
            "EGL_MANAGER_H"
        ]
    },
    "drivers/coremidi/midi_driver_coremidi.h": {
        "classes": [
            "MIDIDriverCoreMidi"
        ],
        "structs": [],
        "defines": [
            "MIDI_DRIVER_COREMIDI_H"
        ]
    },
    "drivers/unix/thread_posix.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "THREAD_POSIX_H"
        ]
    },
    "drivers/unix/syslog_logger.h": {
        "classes": [
            "SyslogLogger"
        ],
        "structs": [],
        "defines": [
            "SYSLOG_LOGGER_H"
        ]
    },
    "drivers/unix/net_socket_posix.h": {
        "classes": [
            "NetSocketPosix"
        ],
        "structs": [],
        "defines": [
            "NET_SOCKET_POSIX_H",
            "SOCKET_TYPE",
            "SOCKET_TYPE"
        ]
    },
    "drivers/unix/dir_access_unix.h": {
        "classes": [
            "DirAccessUnix"
        ],
        "structs": [],
        "defines": [
            "DIR_ACCESS_UNIX_H"
        ]
    },
    "drivers/unix/os_unix.h": {
        "classes": [
            "OS_Unix",
            "UnixTerminalLogger"
        ],
        "structs": [],
        "defines": [
            "OS_UNIX_H"
        ]
    },
    "drivers/unix/ip_unix.h": {
        "classes": [
            "IPUnix"
        ],
        "structs": [],
        "defines": [
            "IP_UNIX_H"
        ]
    },
    "drivers/unix/file_access_unix.h": {
        "classes": [
            "FileAccessUnix"
        ],
        "structs": [],
        "defines": [
            "FILE_ACCESS_UNIX_H"
        ]
    },
    "drivers/vulkan/rendering_device_driver_vulkan.h": {
        "classes": [
            "RenderingDeviceDriverVulkan"
        ],
        "structs": [
            "Queue",
            "SubgroupCapabilities",
            "VRSCapabilities",
            "ShaderCapabilities",
            "StorageBufferCapabilities",
            "DeviceFunctions",
            "BufferInfo",
            "TextureInfo",
            "VertexFormatInfo",
            "Fence",
            "CommandQueue",
            "CommandPool",
            "SwapChain",
            "ShaderBinary",
            "DataBinding",
            "SpecializationConstant",
            "Data",
            "ShaderInfo",
            "DescriptorSetPoolKey",
            "UniformSetInfo",
            "PipelineCacheHeader",
            "PipelineCache"
        ],
        "defines": [
            "RENDERING_DEVICE_DRIVER_VULKAN_H",
            "_DEBUG"
        ]
    },
    "drivers/vulkan/vulkan_hooks.h": {
        "classes": [
            "VulkanHooks"
        ],
        "structs": [],
        "defines": [
            "VULKAN_HOOKS_H"
        ]
    },
    "drivers/vulkan/rendering_context_driver_vulkan.h": {
        "classes": [
            "RenderingContextDriverVulkan"
        ],
        "structs": [
            "Functions",
            "DeviceQueueFamilies",
            "Surface"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_VULKAN_H"
        ]
    },
    "drivers/d3d12/rendering_context_driver_d3d12.h": {
        "classes": [
            "RenderingContextDriverD3D12"
        ],
        "structs": [
            "WindowPlatformData",
            "Surface"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_D3D12_H",
            "ARRAY_SIZE"
        ]
    },
    "drivers/d3d12/d3d12_godot_nir_bridge.h": {
        "classes": [],
        "structs": [
            "GodotNirCallbacks"
        ],
        "defines": [
            "D3D12_GODOT_NIR_BRIDGE_H"
        ]
    },
    "drivers/d3d12/rendering_device_driver_d3d12.h": {
        "classes": [
            "RenderingDeviceDriverD3D12",
            "DescriptorsHeap",
            "Walker"
        ],
        "structs": [
            "D3D12Format",
            "DeviceLimits",
            "SubgroupCapabilities",
            "VRSCapabilities",
            "ShaderCapabilities",
            "StorageBufferCapabilities",
            "FormatCapabilities",
            "ResourceInfo",
            "States",
            "CrossFamillyFallback",
            "BarrierRequest",
            "Group",
            "BufferInfo",
            "TextureInfo",
            "VertexFormatInfo",
            "FenceInfo",
            "SemaphoreInfo",
            "CommandQueueInfo",
            "CommandPoolInfo",
            "RenderPassState",
            "CommandBufferInfo",
            "FamilyFallbackCopy",
            "SwapChain",
            "FramebufferInfo",
            "ShaderBinary",
            "DataBinding",
            "RootSignatureLocation",
            "SpecializationConstant",
            "Data",
            "ShaderInfo",
            "UniformBindingInfo",
            "RootSignatureLocation",
            "UniformSet",
            "SpecializationConstant",
            "RootDescriptorTable",
            "UniformSetInfo",
            "StateRequirement",
            "RecentBind",
            "ResourceDescInfo",
            "RenderPassInfo",
            "RenderPipelineExtraInfo",
            "TimestampQueryPoolInfo",
            "FrameInfo"
        ],
        "defines": [
            "RENDERING_DEVICE_DRIVER_D3D12_H",
            "D3D12MA_D3D12_HEADERS_ALREADY_INCLUDED",
            "D3D12_BITCODE_OFFSETS_NUM_STAGES",
            "USE_SMALL_ALLOCS_POOL"
        ]
    },
    "drivers/alsa/asound-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_ASOUND",
            "snd_asoundlib_version",
            "snd_dlopen",
            "snd_dlsym",
            "snd_dlclose",
            "snd_async_add_handler",
            "snd_async_del_handler",
            "snd_async_handler_get_fd",
            "snd_async_handler_get_signo",
            "snd_async_handler_get_callback_private",
            "snd_shm_area_create",
            "snd_shm_area_share",
            "snd_shm_area_destroy",
            "snd_user_file",
            "snd_input_stdio_open",
            "snd_input_stdio_attach",
            "snd_input_buffer_open",
            "snd_input_close",
            "snd_input_scanf",
            "snd_input_gets",
            "snd_input_getc",
            "snd_input_ungetc",
            "snd_output_stdio_open",
            "snd_output_stdio_attach",
            "snd_output_buffer_open",
            "snd_output_buffer_string",
            "snd_output_close",
            "snd_output_printf",
            "snd_output_vprintf",
            "snd_output_puts",
            "snd_output_putc",
            "snd_output_flush",
            "snd_strerror",
            "snd_lib_error_set_handler",
            "snd_lib_error_set_local",
            "snd_config_top",
            "snd_config_load",
            "snd_config_load_override",
            "snd_config_save",
            "snd_config_update",
            "snd_config_update_r",
            "snd_config_update_free",
            "snd_config_update_free_global",
            "snd_config_update_ref",
            "snd_config_ref",
            "snd_config_unref",
            "snd_config_search",
            "snd_config_searchv",
            "snd_config_search_definition",
            "snd_config_expand",
            "snd_config_evaluate",
            "snd_config_add",
            "snd_config_delete",
            "snd_config_delete_compound_members",
            "snd_config_copy",
            "snd_config_make",
            "snd_config_make_integer",
            "snd_config_make_integer64",
            "snd_config_make_real",
            "snd_config_make_string",
            "snd_config_make_pointer",
            "snd_config_make_compound",
            "snd_config_imake_integer",
            "snd_config_imake_integer64",
            "snd_config_imake_real",
            "snd_config_imake_string",
            "snd_config_imake_safe_string",
            "snd_config_imake_pointer",
            "snd_config_get_type",
            "snd_config_set_id",
            "snd_config_set_integer",
            "snd_config_set_integer64",
            "snd_config_set_real",
            "snd_config_set_string",
            "snd_config_set_ascii",
            "snd_config_set_pointer",
            "snd_config_get_id",
            "snd_config_get_integer",
            "snd_config_get_integer64",
            "snd_config_get_real",
            "snd_config_get_ireal",
            "snd_config_get_string",
            "snd_config_get_ascii",
            "snd_config_get_pointer",
            "snd_config_test_id",
            "snd_config_iterator_first",
            "snd_config_iterator_next",
            "snd_config_iterator_end",
            "snd_config_iterator_entry",
            "snd_config_get_bool_ascii",
            "snd_config_get_bool",
            "snd_config_get_ctl_iface_ascii",
            "snd_config_get_ctl_iface",
            "snd_names_list",
            "snd_names_list_free",
            "snd_pcm_open",
            "snd_pcm_open_lconf",
            "snd_pcm_open_fallback",
            "snd_pcm_close",
            "snd_pcm_name",
            "snd_pcm_type",
            "snd_pcm_stream",
            "snd_pcm_poll_descriptors_count",
            "snd_pcm_poll_descriptors",
            "snd_pcm_poll_descriptors_revents",
            "snd_pcm_nonblock",
            "snd_async_add_pcm_handler",
            "snd_async_handler_get_pcm",
            "snd_pcm_info",
            "snd_pcm_hw_params_current",
            "snd_pcm_hw_params",
            "snd_pcm_hw_free",
            "snd_pcm_sw_params_current",
            "snd_pcm_sw_params",
            "snd_pcm_prepare",
            "snd_pcm_reset",
            "snd_pcm_status",
            "snd_pcm_start",
            "snd_pcm_drop",
            "snd_pcm_drain",
            "snd_pcm_pause",
            "snd_pcm_state",
            "snd_pcm_hwsync",
            "snd_pcm_delay",
            "snd_pcm_resume",
            "snd_pcm_htimestamp",
            "snd_pcm_avail",
            "snd_pcm_avail_update",
            "snd_pcm_avail_delay",
            "snd_pcm_rewindable",
            "snd_pcm_rewind",
            "snd_pcm_forwardable",
            "snd_pcm_forward",
            "snd_pcm_writei",
            "snd_pcm_readi",
            "snd_pcm_writen",
            "snd_pcm_readn",
            "snd_pcm_wait",
            "snd_pcm_link",
            "snd_pcm_unlink",
            "snd_pcm_query_chmaps",
            "snd_pcm_query_chmaps_from_hw",
            "snd_pcm_free_chmaps",
            "snd_pcm_get_chmap",
            "snd_pcm_set_chmap",
            "snd_pcm_chmap_type_name",
            "snd_pcm_chmap_name",
            "snd_pcm_chmap_long_name",
            "snd_pcm_chmap_print",
            "snd_pcm_chmap_from_string",
            "snd_pcm_chmap_parse_string",
            "snd_pcm_recover",
            "snd_pcm_set_params",
            "snd_pcm_get_params",
            "snd_pcm_info_sizeof",
            "snd_pcm_info_malloc",
            "snd_pcm_info_free",
            "snd_pcm_info_copy",
            "snd_pcm_info_get_device",
            "snd_pcm_info_get_subdevice",
            "snd_pcm_info_get_stream",
            "snd_pcm_info_get_card",
            "snd_pcm_info_get_id",
            "snd_pcm_info_get_name",
            "snd_pcm_info_get_subdevice_name",
            "snd_pcm_info_get_class",
            "snd_pcm_info_get_subclass",
            "snd_pcm_info_get_subdevices_count",
            "snd_pcm_info_get_subdevices_avail",
            "snd_pcm_info_get_sync",
            "snd_pcm_info_set_device",
            "snd_pcm_info_set_subdevice",
            "snd_pcm_info_set_stream",
            "snd_pcm_hw_params_any",
            "snd_pcm_hw_params_can_mmap_sample_resolution",
            "snd_pcm_hw_params_is_double",
            "snd_pcm_hw_params_is_batch",
            "snd_pcm_hw_params_is_block_transfer",
            "snd_pcm_hw_params_is_monotonic",
            "snd_pcm_hw_params_can_overrange",
            "snd_pcm_hw_params_can_pause",
            "snd_pcm_hw_params_can_resume",
            "snd_pcm_hw_params_is_half_duplex",
            "snd_pcm_hw_params_is_joint_duplex",
            "snd_pcm_hw_params_can_sync_start",
            "snd_pcm_hw_params_can_disable_period_wakeup",
            "snd_pcm_hw_params_supports_audio_wallclock_ts",
            "snd_pcm_hw_params_supports_audio_ts_type",
            "snd_pcm_hw_params_get_rate_numden",
            "snd_pcm_hw_params_get_sbits",
            "snd_pcm_hw_params_get_fifo_size",
            "snd_pcm_hw_params_sizeof",
            "snd_pcm_hw_params_malloc",
            "snd_pcm_hw_params_free",
            "snd_pcm_hw_params_copy",
            "snd_pcm_hw_params_get_access",
            "snd_pcm_hw_params_test_access",
            "snd_pcm_hw_params_set_access",
            "snd_pcm_hw_params_set_access_first",
            "snd_pcm_hw_params_set_access_last",
            "snd_pcm_hw_params_set_access_mask",
            "snd_pcm_hw_params_get_access_mask",
            "snd_pcm_hw_params_get_format",
            "snd_pcm_hw_params_test_format",
            "snd_pcm_hw_params_set_format",
            "snd_pcm_hw_params_set_format_first",
            "snd_pcm_hw_params_set_format_last",
            "snd_pcm_hw_params_set_format_mask",
            "snd_pcm_hw_params_get_format_mask",
            "snd_pcm_hw_params_get_subformat",
            "snd_pcm_hw_params_test_subformat",
            "snd_pcm_hw_params_set_subformat",
            "snd_pcm_hw_params_set_subformat_first",
            "snd_pcm_hw_params_set_subformat_last",
            "snd_pcm_hw_params_set_subformat_mask",
            "snd_pcm_hw_params_get_subformat_mask",
            "snd_pcm_hw_params_get_channels",
            "snd_pcm_hw_params_get_channels_min",
            "snd_pcm_hw_params_get_channels_max",
            "snd_pcm_hw_params_test_channels",
            "snd_pcm_hw_params_set_channels",
            "snd_pcm_hw_params_set_channels_min",
            "snd_pcm_hw_params_set_channels_max",
            "snd_pcm_hw_params_set_channels_minmax",
            "snd_pcm_hw_params_set_channels_near",
            "snd_pcm_hw_params_set_channels_first",
            "snd_pcm_hw_params_set_channels_last",
            "snd_pcm_hw_params_get_rate",
            "snd_pcm_hw_params_get_rate_min",
            "snd_pcm_hw_params_get_rate_max",
            "snd_pcm_hw_params_test_rate",
            "snd_pcm_hw_params_set_rate",
            "snd_pcm_hw_params_set_rate_min",
            "snd_pcm_hw_params_set_rate_max",
            "snd_pcm_hw_params_set_rate_minmax",
            "snd_pcm_hw_params_set_rate_near",
            "snd_pcm_hw_params_set_rate_first",
            "snd_pcm_hw_params_set_rate_last",
            "snd_pcm_hw_params_set_rate_resample",
            "snd_pcm_hw_params_get_rate_resample",
            "snd_pcm_hw_params_set_export_buffer",
            "snd_pcm_hw_params_get_export_buffer",
            "snd_pcm_hw_params_set_period_wakeup",
            "snd_pcm_hw_params_get_period_wakeup",
            "snd_pcm_hw_params_get_period_time",
            "snd_pcm_hw_params_get_period_time_min",
            "snd_pcm_hw_params_get_period_time_max",
            "snd_pcm_hw_params_test_period_time",
            "snd_pcm_hw_params_set_period_time",
            "snd_pcm_hw_params_set_period_time_min",
            "snd_pcm_hw_params_set_period_time_max",
            "snd_pcm_hw_params_set_period_time_minmax",
            "snd_pcm_hw_params_set_period_time_near",
            "snd_pcm_hw_params_set_period_time_first",
            "snd_pcm_hw_params_set_period_time_last",
            "snd_pcm_hw_params_get_period_size",
            "snd_pcm_hw_params_get_period_size_min",
            "snd_pcm_hw_params_get_period_size_max",
            "snd_pcm_hw_params_test_period_size",
            "snd_pcm_hw_params_set_period_size",
            "snd_pcm_hw_params_set_period_size_min",
            "snd_pcm_hw_params_set_period_size_max",
            "snd_pcm_hw_params_set_period_size_minmax",
            "snd_pcm_hw_params_set_period_size_near",
            "snd_pcm_hw_params_set_period_size_first",
            "snd_pcm_hw_params_set_period_size_last",
            "snd_pcm_hw_params_set_period_size_integer",
            "snd_pcm_hw_params_get_periods",
            "snd_pcm_hw_params_get_periods_min",
            "snd_pcm_hw_params_get_periods_max",
            "snd_pcm_hw_params_test_periods",
            "snd_pcm_hw_params_set_periods",
            "snd_pcm_hw_params_set_periods_min",
            "snd_pcm_hw_params_set_periods_max",
            "snd_pcm_hw_params_set_periods_minmax",
            "snd_pcm_hw_params_set_periods_near",
            "snd_pcm_hw_params_set_periods_first",
            "snd_pcm_hw_params_set_periods_last",
            "snd_pcm_hw_params_set_periods_integer",
            "snd_pcm_hw_params_get_buffer_time",
            "snd_pcm_hw_params_get_buffer_time_min",
            "snd_pcm_hw_params_get_buffer_time_max",
            "snd_pcm_hw_params_test_buffer_time",
            "snd_pcm_hw_params_set_buffer_time",
            "snd_pcm_hw_params_set_buffer_time_min",
            "snd_pcm_hw_params_set_buffer_time_max",
            "snd_pcm_hw_params_set_buffer_time_minmax",
            "snd_pcm_hw_params_set_buffer_time_near",
            "snd_pcm_hw_params_set_buffer_time_first",
            "snd_pcm_hw_params_set_buffer_time_last",
            "snd_pcm_hw_params_get_buffer_size",
            "snd_pcm_hw_params_get_buffer_size_min",
            "snd_pcm_hw_params_get_buffer_size_max",
            "snd_pcm_hw_params_test_buffer_size",
            "snd_pcm_hw_params_set_buffer_size",
            "snd_pcm_hw_params_set_buffer_size_min",
            "snd_pcm_hw_params_set_buffer_size_max",
            "snd_pcm_hw_params_set_buffer_size_minmax",
            "snd_pcm_hw_params_set_buffer_size_near",
            "snd_pcm_hw_params_set_buffer_size_first",
            "snd_pcm_hw_params_set_buffer_size_last",
            "snd_pcm_hw_params_get_min_align",
            "snd_pcm_sw_params_sizeof",
            "snd_pcm_sw_params_malloc",
            "snd_pcm_sw_params_free",
            "snd_pcm_sw_params_copy",
            "snd_pcm_sw_params_get_boundary",
            "snd_pcm_sw_params_set_tstamp_mode",
            "snd_pcm_sw_params_get_tstamp_mode",
            "snd_pcm_sw_params_set_avail_min",
            "snd_pcm_sw_params_get_avail_min",
            "snd_pcm_sw_params_set_period_event",
            "snd_pcm_sw_params_get_period_event",
            "snd_pcm_sw_params_set_start_threshold",
            "snd_pcm_sw_params_get_start_threshold",
            "snd_pcm_sw_params_set_stop_threshold",
            "snd_pcm_sw_params_get_stop_threshold",
            "snd_pcm_sw_params_set_silence_threshold",
            "snd_pcm_sw_params_get_silence_threshold",
            "snd_pcm_sw_params_set_silence_size",
            "snd_pcm_sw_params_get_silence_size",
            "snd_pcm_access_mask_sizeof",
            "snd_pcm_access_mask_malloc",
            "snd_pcm_access_mask_free",
            "snd_pcm_access_mask_copy",
            "snd_pcm_access_mask_none",
            "snd_pcm_access_mask_any",
            "snd_pcm_access_mask_test",
            "snd_pcm_access_mask_empty",
            "snd_pcm_access_mask_set",
            "snd_pcm_access_mask_reset",
            "snd_pcm_format_mask_sizeof",
            "snd_pcm_format_mask_malloc",
            "snd_pcm_format_mask_free",
            "snd_pcm_format_mask_copy",
            "snd_pcm_format_mask_none",
            "snd_pcm_format_mask_any",
            "snd_pcm_format_mask_test",
            "snd_pcm_format_mask_empty",
            "snd_pcm_format_mask_set",
            "snd_pcm_format_mask_reset",
            "snd_pcm_subformat_mask_sizeof",
            "snd_pcm_subformat_mask_malloc",
            "snd_pcm_subformat_mask_free",
            "snd_pcm_subformat_mask_copy",
            "snd_pcm_subformat_mask_none",
            "snd_pcm_subformat_mask_any",
            "snd_pcm_subformat_mask_test",
            "snd_pcm_subformat_mask_empty",
            "snd_pcm_subformat_mask_set",
            "snd_pcm_subformat_mask_reset",
            "snd_pcm_status_sizeof",
            "snd_pcm_status_malloc",
            "snd_pcm_status_free",
            "snd_pcm_status_copy",
            "snd_pcm_status_get_state",
            "snd_pcm_status_get_trigger_tstamp",
            "snd_pcm_status_get_trigger_htstamp",
            "snd_pcm_status_get_tstamp",
            "snd_pcm_status_get_htstamp",
            "snd_pcm_status_get_audio_htstamp",
            "snd_pcm_status_get_driver_htstamp",
            "snd_pcm_status_get_delay",
            "snd_pcm_status_get_avail",
            "snd_pcm_status_get_avail_max",
            "snd_pcm_status_get_overrange",
            "snd_pcm_type_name",
            "snd_pcm_stream_name",
            "snd_pcm_access_name",
            "snd_pcm_format_name",
            "snd_pcm_format_description",
            "snd_pcm_subformat_name",
            "snd_pcm_subformat_description",
            "snd_pcm_format_value",
            "snd_pcm_tstamp_mode_name",
            "snd_pcm_state_name",
            "snd_pcm_dump",
            "snd_pcm_dump_hw_setup",
            "snd_pcm_dump_sw_setup",
            "snd_pcm_dump_setup",
            "snd_pcm_hw_params_dump",
            "snd_pcm_sw_params_dump",
            "snd_pcm_status_dump",
            "snd_pcm_mmap_begin",
            "snd_pcm_mmap_commit",
            "snd_pcm_mmap_writei",
            "snd_pcm_mmap_readi",
            "snd_pcm_mmap_writen",
            "snd_pcm_mmap_readn",
            "snd_pcm_format_signed",
            "snd_pcm_format_unsigned",
            "snd_pcm_format_linear",
            "snd_pcm_format_float",
            "snd_pcm_format_little_endian",
            "snd_pcm_format_big_endian",
            "snd_pcm_format_cpu_endian",
            "snd_pcm_format_width",
            "snd_pcm_format_physical_width",
            "snd_pcm_build_linear_format",
            "snd_pcm_format_size",
            "snd_pcm_format_silence",
            "snd_pcm_format_silence_16",
            "snd_pcm_format_silence_32",
            "snd_pcm_format_silence_64",
            "snd_pcm_format_set_silence",
            "snd_pcm_bytes_to_frames",
            "snd_pcm_frames_to_bytes",
            "snd_pcm_bytes_to_samples",
            "snd_pcm_samples_to_bytes",
            "snd_pcm_area_silence",
            "snd_pcm_areas_silence",
            "snd_pcm_area_copy",
            "snd_pcm_areas_copy",
            "snd_pcm_hook_get_pcm",
            "snd_pcm_hook_get_private",
            "snd_pcm_hook_set_private",
            "snd_pcm_hook_add",
            "snd_pcm_hook_remove",
            "snd_pcm_meter_get_bufsize",
            "snd_pcm_meter_get_channels",
            "snd_pcm_meter_get_rate",
            "snd_pcm_meter_get_now",
            "snd_pcm_meter_get_boundary",
            "snd_pcm_meter_add_scope",
            "snd_pcm_meter_search_scope",
            "snd_pcm_scope_malloc",
            "snd_pcm_scope_set_ops",
            "snd_pcm_scope_set_name",
            "snd_pcm_scope_get_name",
            "snd_pcm_scope_get_callback_private",
            "snd_pcm_scope_set_callback_private",
            "snd_pcm_scope_s16_open",
            "snd_pcm_scope_s16_get_channel_buffer",
            "snd_spcm_init",
            "snd_spcm_init_duplex",
            "snd_spcm_init_get_params",
            "snd_pcm_start_mode_name",
            "snd_pcm_xrun_mode_name",
            "snd_pcm_sw_params_set_start_mode",
            "snd_pcm_sw_params_get_start_mode",
            "snd_pcm_sw_params_set_xrun_mode",
            "snd_pcm_sw_params_get_xrun_mode",
            "snd_pcm_sw_params_set_xfer_align",
            "snd_pcm_sw_params_get_xfer_align",
            "snd_pcm_sw_params_set_sleep_min",
            "snd_pcm_sw_params_get_sleep_min",
            "snd_pcm_hw_params_get_tick_time",
            "snd_pcm_hw_params_get_tick_time_min",
            "snd_pcm_hw_params_get_tick_time_max",
            "snd_pcm_hw_params_test_tick_time",
            "snd_pcm_hw_params_set_tick_time",
            "snd_pcm_hw_params_set_tick_time_min",
            "snd_pcm_hw_params_set_tick_time_max",
            "snd_pcm_hw_params_set_tick_time_minmax",
            "snd_pcm_hw_params_set_tick_time_near",
            "snd_pcm_hw_params_set_tick_time_first",
            "snd_pcm_hw_params_set_tick_time_last",
            "snd_rawmidi_open",
            "snd_rawmidi_open_lconf",
            "snd_rawmidi_close",
            "snd_rawmidi_poll_descriptors_count",
            "snd_rawmidi_poll_descriptors",
            "snd_rawmidi_poll_descriptors_revents",
            "snd_rawmidi_nonblock",
            "snd_rawmidi_info_sizeof",
            "snd_rawmidi_info_malloc",
            "snd_rawmidi_info_free",
            "snd_rawmidi_info_copy",
            "snd_rawmidi_info_get_device",
            "snd_rawmidi_info_get_subdevice",
            "snd_rawmidi_info_get_stream",
            "snd_rawmidi_info_get_card",
            "snd_rawmidi_info_get_flags",
            "snd_rawmidi_info_get_id",
            "snd_rawmidi_info_get_name",
            "snd_rawmidi_info_get_subdevice_name",
            "snd_rawmidi_info_get_subdevices_count",
            "snd_rawmidi_info_get_subdevices_avail",
            "snd_rawmidi_info_set_device",
            "snd_rawmidi_info_set_subdevice",
            "snd_rawmidi_info_set_stream",
            "snd_rawmidi_info",
            "snd_rawmidi_params_sizeof",
            "snd_rawmidi_params_malloc",
            "snd_rawmidi_params_free",
            "snd_rawmidi_params_copy",
            "snd_rawmidi_params_set_buffer_size",
            "snd_rawmidi_params_get_buffer_size",
            "snd_rawmidi_params_set_avail_min",
            "snd_rawmidi_params_get_avail_min",
            "snd_rawmidi_params_set_no_active_sensing",
            "snd_rawmidi_params_get_no_active_sensing",
            "snd_rawmidi_params",
            "snd_rawmidi_params_current",
            "snd_rawmidi_status_sizeof",
            "snd_rawmidi_status_malloc",
            "snd_rawmidi_status_free",
            "snd_rawmidi_status_copy",
            "snd_rawmidi_status_get_tstamp",
            "snd_rawmidi_status_get_avail",
            "snd_rawmidi_status_get_xruns",
            "snd_rawmidi_status",
            "snd_rawmidi_drain",
            "snd_rawmidi_drop",
            "snd_rawmidi_write",
            "snd_rawmidi_read",
            "snd_rawmidi_name",
            "snd_rawmidi_type",
            "snd_rawmidi_stream",
            "snd_timer_query_open",
            "snd_timer_query_open_lconf",
            "snd_timer_query_close",
            "snd_timer_query_next_device",
            "snd_timer_query_info",
            "snd_timer_query_params",
            "snd_timer_query_status",
            "snd_timer_open",
            "snd_timer_open_lconf",
            "snd_timer_close",
            "snd_async_add_timer_handler",
            "snd_async_handler_get_timer",
            "snd_timer_poll_descriptors_count",
            "snd_timer_poll_descriptors",
            "snd_timer_poll_descriptors_revents",
            "snd_timer_info",
            "snd_timer_params",
            "snd_timer_status",
            "snd_timer_start",
            "snd_timer_stop",
            "snd_timer_continue",
            "snd_timer_read",
            "snd_timer_id_sizeof",
            "snd_timer_id_malloc",
            "snd_timer_id_free",
            "snd_timer_id_copy",
            "snd_timer_id_set_class",
            "snd_timer_id_get_class",
            "snd_timer_id_set_sclass",
            "snd_timer_id_get_sclass",
            "snd_timer_id_set_card",
            "snd_timer_id_get_card",
            "snd_timer_id_set_device",
            "snd_timer_id_get_device",
            "snd_timer_id_set_subdevice",
            "snd_timer_id_get_subdevice",
            "snd_timer_ginfo_sizeof",
            "snd_timer_ginfo_malloc",
            "snd_timer_ginfo_free",
            "snd_timer_ginfo_copy",
            "snd_timer_ginfo_set_tid",
            "snd_timer_ginfo_get_tid",
            "snd_timer_ginfo_get_flags",
            "snd_timer_ginfo_get_card",
            "snd_timer_ginfo_get_id",
            "snd_timer_ginfo_get_name",
            "snd_timer_ginfo_get_resolution",
            "snd_timer_ginfo_get_resolution_min",
            "snd_timer_ginfo_get_resolution_max",
            "snd_timer_ginfo_get_clients",
            "snd_timer_info_sizeof",
            "snd_timer_info_malloc",
            "snd_timer_info_free",
            "snd_timer_info_copy",
            "snd_timer_info_is_slave",
            "snd_timer_info_get_card",
            "snd_timer_info_get_id",
            "snd_timer_info_get_name",
            "snd_timer_info_get_resolution",
            "snd_timer_params_sizeof",
            "snd_timer_params_malloc",
            "snd_timer_params_free",
            "snd_timer_params_copy",
            "snd_timer_params_set_auto_start",
            "snd_timer_params_get_auto_start",
            "snd_timer_params_set_exclusive",
            "snd_timer_params_get_exclusive",
            "snd_timer_params_set_early_event",
            "snd_timer_params_get_early_event",
            "snd_timer_params_set_ticks",
            "snd_timer_params_get_ticks",
            "snd_timer_params_set_queue_size",
            "snd_timer_params_get_queue_size",
            "snd_timer_params_set_filter",
            "snd_timer_params_get_filter",
            "snd_timer_status_sizeof",
            "snd_timer_status_malloc",
            "snd_timer_status_free",
            "snd_timer_status_copy",
            "snd_timer_status_get_timestamp",
            "snd_timer_status_get_resolution",
            "snd_timer_status_get_lost",
            "snd_timer_status_get_overrun",
            "snd_timer_status_get_queue",
            "snd_timer_info_get_ticks",
            "snd_hwdep_open",
            "snd_hwdep_close",
            "snd_hwdep_poll_descriptors",
            "snd_hwdep_poll_descriptors_count",
            "snd_hwdep_poll_descriptors_revents",
            "snd_hwdep_nonblock",
            "snd_hwdep_info",
            "snd_hwdep_dsp_status",
            "snd_hwdep_dsp_load",
            "snd_hwdep_ioctl",
            "snd_hwdep_write",
            "snd_hwdep_read",
            "snd_hwdep_info_sizeof",
            "snd_hwdep_info_malloc",
            "snd_hwdep_info_free",
            "snd_hwdep_info_copy",
            "snd_hwdep_info_get_device",
            "snd_hwdep_info_get_card",
            "snd_hwdep_info_get_id",
            "snd_hwdep_info_get_name",
            "snd_hwdep_info_get_iface",
            "snd_hwdep_info_set_device",
            "snd_hwdep_dsp_status_sizeof",
            "snd_hwdep_dsp_status_malloc",
            "snd_hwdep_dsp_status_free",
            "snd_hwdep_dsp_status_copy",
            "snd_hwdep_dsp_status_get_version",
            "snd_hwdep_dsp_status_get_id",
            "snd_hwdep_dsp_status_get_num_dsps",
            "snd_hwdep_dsp_status_get_dsp_loaded",
            "snd_hwdep_dsp_status_get_chip_ready",
            "snd_hwdep_dsp_image_sizeof",
            "snd_hwdep_dsp_image_malloc",
            "snd_hwdep_dsp_image_free",
            "snd_hwdep_dsp_image_copy",
            "snd_hwdep_dsp_image_get_index",
            "snd_hwdep_dsp_image_get_name",
            "snd_hwdep_dsp_image_get_image",
            "snd_hwdep_dsp_image_get_length",
            "snd_hwdep_dsp_image_set_index",
            "snd_hwdep_dsp_image_set_name",
            "snd_hwdep_dsp_image_set_image",
            "snd_hwdep_dsp_image_set_length",
            "snd_card_load",
            "snd_card_next",
            "snd_card_get_index",
            "snd_card_get_name",
            "snd_card_get_longname",
            "snd_device_name_hint",
            "snd_device_name_free_hint",
            "snd_device_name_get_hint",
            "snd_ctl_open",
            "snd_ctl_open_lconf",
            "snd_ctl_open_fallback",
            "snd_ctl_close",
            "snd_ctl_nonblock",
            "snd_async_add_ctl_handler",
            "snd_async_handler_get_ctl",
            "snd_ctl_poll_descriptors_count",
            "snd_ctl_poll_descriptors",
            "snd_ctl_poll_descriptors_revents",
            "snd_ctl_subscribe_events",
            "snd_ctl_card_info",
            "snd_ctl_elem_list",
            "snd_ctl_elem_info",
            "snd_ctl_elem_read",
            "snd_ctl_elem_write",
            "snd_ctl_elem_lock",
            "snd_ctl_elem_unlock",
            "snd_ctl_elem_tlv_read",
            "snd_ctl_elem_tlv_write",
            "snd_ctl_elem_tlv_command",
            "snd_ctl_hwdep_next_device",
            "snd_ctl_hwdep_info",
            "snd_ctl_pcm_next_device",
            "snd_ctl_pcm_info",
            "snd_ctl_pcm_prefer_subdevice",
            "snd_ctl_rawmidi_next_device",
            "snd_ctl_rawmidi_info",
            "snd_ctl_rawmidi_prefer_subdevice",
            "snd_ctl_set_power_state",
            "snd_ctl_get_power_state",
            "snd_ctl_read",
            "snd_ctl_wait",
            "snd_ctl_name",
            "snd_ctl_type",
            "snd_ctl_elem_type_name",
            "snd_ctl_elem_iface_name",
            "snd_ctl_event_type_name",
            "snd_ctl_event_elem_get_mask",
            "snd_ctl_event_elem_get_numid",
            "snd_ctl_event_elem_get_id",
            "snd_ctl_event_elem_get_interface",
            "snd_ctl_event_elem_get_device",
            "snd_ctl_event_elem_get_subdevice",
            "snd_ctl_event_elem_get_name",
            "snd_ctl_event_elem_get_index",
            "snd_ctl_elem_list_alloc_space",
            "snd_ctl_elem_list_free_space",
            "snd_ctl_ascii_elem_id_get",
            "snd_ctl_ascii_elem_id_parse",
            "snd_ctl_ascii_value_parse",
            "snd_ctl_elem_id_sizeof",
            "snd_ctl_elem_id_malloc",
            "snd_ctl_elem_id_free",
            "snd_ctl_elem_id_clear",
            "snd_ctl_elem_id_copy",
            "snd_ctl_elem_id_get_numid",
            "snd_ctl_elem_id_get_interface",
            "snd_ctl_elem_id_get_device",
            "snd_ctl_elem_id_get_subdevice",
            "snd_ctl_elem_id_get_name",
            "snd_ctl_elem_id_get_index",
            "snd_ctl_elem_id_set_numid",
            "snd_ctl_elem_id_set_interface",
            "snd_ctl_elem_id_set_device",
            "snd_ctl_elem_id_set_subdevice",
            "snd_ctl_elem_id_set_name",
            "snd_ctl_elem_id_set_index",
            "snd_ctl_card_info_sizeof",
            "snd_ctl_card_info_malloc",
            "snd_ctl_card_info_free",
            "snd_ctl_card_info_clear",
            "snd_ctl_card_info_copy",
            "snd_ctl_card_info_get_card",
            "snd_ctl_card_info_get_id",
            "snd_ctl_card_info_get_driver",
            "snd_ctl_card_info_get_name",
            "snd_ctl_card_info_get_longname",
            "snd_ctl_card_info_get_mixername",
            "snd_ctl_card_info_get_components",
            "snd_ctl_event_sizeof",
            "snd_ctl_event_malloc",
            "snd_ctl_event_free",
            "snd_ctl_event_clear",
            "snd_ctl_event_copy",
            "snd_ctl_event_get_type",
            "snd_ctl_elem_list_sizeof",
            "snd_ctl_elem_list_malloc",
            "snd_ctl_elem_list_free",
            "snd_ctl_elem_list_clear",
            "snd_ctl_elem_list_copy",
            "snd_ctl_elem_list_set_offset",
            "snd_ctl_elem_list_get_used",
            "snd_ctl_elem_list_get_count",
            "snd_ctl_elem_list_get_id",
            "snd_ctl_elem_list_get_numid",
            "snd_ctl_elem_list_get_interface",
            "snd_ctl_elem_list_get_device",
            "snd_ctl_elem_list_get_subdevice",
            "snd_ctl_elem_list_get_name",
            "snd_ctl_elem_list_get_index",
            "snd_ctl_elem_info_sizeof",
            "snd_ctl_elem_info_malloc",
            "snd_ctl_elem_info_free",
            "snd_ctl_elem_info_clear",
            "snd_ctl_elem_info_copy",
            "snd_ctl_elem_info_get_type",
            "snd_ctl_elem_info_is_readable",
            "snd_ctl_elem_info_is_writable",
            "snd_ctl_elem_info_is_volatile",
            "snd_ctl_elem_info_is_inactive",
            "snd_ctl_elem_info_is_locked",
            "snd_ctl_elem_info_is_tlv_readable",
            "snd_ctl_elem_info_is_tlv_writable",
            "snd_ctl_elem_info_is_tlv_commandable",
            "snd_ctl_elem_info_is_owner",
            "snd_ctl_elem_info_is_user",
            "snd_ctl_elem_info_get_owner",
            "snd_ctl_elem_info_get_count",
            "snd_ctl_elem_info_get_min",
            "snd_ctl_elem_info_get_max",
            "snd_ctl_elem_info_get_step",
            "snd_ctl_elem_info_get_min64",
            "snd_ctl_elem_info_get_max64",
            "snd_ctl_elem_info_get_step64",
            "snd_ctl_elem_info_get_items",
            "snd_ctl_elem_info_set_item",
            "snd_ctl_elem_info_get_item_name",
            "snd_ctl_elem_info_get_dimensions",
            "snd_ctl_elem_info_get_dimension",
            "snd_ctl_elem_info_set_dimension",
            "snd_ctl_elem_info_get_id",
            "snd_ctl_elem_info_get_numid",
            "snd_ctl_elem_info_get_interface",
            "snd_ctl_elem_info_get_device",
            "snd_ctl_elem_info_get_subdevice",
            "snd_ctl_elem_info_get_name",
            "snd_ctl_elem_info_get_index",
            "snd_ctl_elem_info_set_id",
            "snd_ctl_elem_info_set_numid",
            "snd_ctl_elem_info_set_interface",
            "snd_ctl_elem_info_set_device",
            "snd_ctl_elem_info_set_subdevice",
            "snd_ctl_elem_info_set_name",
            "snd_ctl_elem_info_set_index",
            "snd_ctl_add_integer_elem_set",
            "snd_ctl_add_integer64_elem_set",
            "snd_ctl_add_boolean_elem_set",
            "snd_ctl_add_enumerated_elem_set",
            "snd_ctl_add_bytes_elem_set",
            "snd_ctl_elem_add_integer",
            "snd_ctl_elem_add_integer64",
            "snd_ctl_elem_add_boolean",
            "snd_ctl_elem_add_enumerated",
            "snd_ctl_elem_add_iec958",
            "snd_ctl_elem_remove",
            "snd_ctl_elem_value_sizeof",
            "snd_ctl_elem_value_malloc",
            "snd_ctl_elem_value_free",
            "snd_ctl_elem_value_clear",
            "snd_ctl_elem_value_copy",
            "snd_ctl_elem_value_compare",
            "snd_ctl_elem_value_get_id",
            "snd_ctl_elem_value_get_numid",
            "snd_ctl_elem_value_get_interface",
            "snd_ctl_elem_value_get_device",
            "snd_ctl_elem_value_get_subdevice",
            "snd_ctl_elem_value_get_name",
            "snd_ctl_elem_value_get_index",
            "snd_ctl_elem_value_set_id",
            "snd_ctl_elem_value_set_numid",
            "snd_ctl_elem_value_set_interface",
            "snd_ctl_elem_value_set_device",
            "snd_ctl_elem_value_set_subdevice",
            "snd_ctl_elem_value_set_name",
            "snd_ctl_elem_value_set_index",
            "snd_ctl_elem_value_get_boolean",
            "snd_ctl_elem_value_get_integer",
            "snd_ctl_elem_value_get_integer64",
            "snd_ctl_elem_value_get_enumerated",
            "snd_ctl_elem_value_get_byte",
            "snd_ctl_elem_value_set_boolean",
            "snd_ctl_elem_value_set_integer",
            "snd_ctl_elem_value_set_integer64",
            "snd_ctl_elem_value_set_enumerated",
            "snd_ctl_elem_value_set_byte",
            "snd_ctl_elem_set_bytes",
            "snd_ctl_elem_value_get_bytes",
            "snd_ctl_elem_value_get_iec958",
            "snd_ctl_elem_value_set_iec958",
            "snd_tlv_parse_dB_info",
            "snd_tlv_get_dB_range",
            "snd_tlv_convert_to_dB",
            "snd_tlv_convert_from_dB",
            "snd_ctl_get_dB_range",
            "snd_ctl_convert_to_dB",
            "snd_ctl_convert_from_dB",
            "snd_hctl_compare_fast",
            "snd_hctl_open",
            "snd_hctl_open_ctl",
            "snd_hctl_close",
            "snd_hctl_nonblock",
            "snd_hctl_poll_descriptors_count",
            "snd_hctl_poll_descriptors",
            "snd_hctl_poll_descriptors_revents",
            "snd_hctl_get_count",
            "snd_hctl_set_compare",
            "snd_hctl_first_elem",
            "snd_hctl_last_elem",
            "snd_hctl_find_elem",
            "snd_hctl_set_callback",
            "snd_hctl_set_callback_private",
            "snd_hctl_get_callback_private",
            "snd_hctl_load",
            "snd_hctl_free",
            "snd_hctl_handle_events",
            "snd_hctl_name",
            "snd_hctl_wait",
            "snd_hctl_ctl",
            "snd_hctl_elem_next",
            "snd_hctl_elem_prev",
            "snd_hctl_elem_info",
            "snd_hctl_elem_read",
            "snd_hctl_elem_write",
            "snd_hctl_elem_tlv_read",
            "snd_hctl_elem_tlv_write",
            "snd_hctl_elem_tlv_command",
            "snd_hctl_elem_get_hctl",
            "snd_hctl_elem_get_id",
            "snd_hctl_elem_get_numid",
            "snd_hctl_elem_get_interface",
            "snd_hctl_elem_get_device",
            "snd_hctl_elem_get_subdevice",
            "snd_hctl_elem_get_name",
            "snd_hctl_elem_get_index",
            "snd_hctl_elem_set_callback",
            "snd_hctl_elem_get_callback_private",
            "snd_hctl_elem_set_callback_private",
            "snd_sctl_build",
            "snd_sctl_free",
            "snd_sctl_install",
            "snd_sctl_remove",
            "snd_mixer_open",
            "snd_mixer_close",
            "snd_mixer_first_elem",
            "snd_mixer_last_elem",
            "snd_mixer_handle_events",
            "snd_mixer_attach",
            "snd_mixer_attach_hctl",
            "snd_mixer_detach",
            "snd_mixer_detach_hctl",
            "snd_mixer_get_hctl",
            "snd_mixer_poll_descriptors_count",
            "snd_mixer_poll_descriptors",
            "snd_mixer_poll_descriptors_revents",
            "snd_mixer_load",
            "snd_mixer_free",
            "snd_mixer_wait",
            "snd_mixer_set_compare",
            "snd_mixer_set_callback",
            "snd_mixer_get_callback_private",
            "snd_mixer_set_callback_private",
            "snd_mixer_get_count",
            "snd_mixer_class_unregister",
            "snd_mixer_elem_next",
            "snd_mixer_elem_prev",
            "snd_mixer_elem_set_callback",
            "snd_mixer_elem_get_callback_private",
            "snd_mixer_elem_set_callback_private",
            "snd_mixer_elem_get_type",
            "snd_mixer_class_register",
            "snd_mixer_elem_new",
            "snd_mixer_elem_add",
            "snd_mixer_elem_remove",
            "snd_mixer_elem_free",
            "snd_mixer_elem_info",
            "snd_mixer_elem_value",
            "snd_mixer_elem_attach",
            "snd_mixer_elem_detach",
            "snd_mixer_elem_empty",
            "snd_mixer_elem_get_private",
            "snd_mixer_class_sizeof",
            "snd_mixer_class_malloc",
            "snd_mixer_class_free",
            "snd_mixer_class_copy",
            "snd_mixer_class_get_mixer",
            "snd_mixer_class_get_event",
            "snd_mixer_class_get_private",
            "snd_mixer_class_get_compare",
            "snd_mixer_class_set_event",
            "snd_mixer_class_set_private",
            "snd_mixer_class_set_private_free",
            "snd_mixer_class_set_compare",
            "snd_mixer_selem_channel_name",
            "snd_mixer_selem_register",
            "snd_mixer_selem_get_id",
            "snd_mixer_selem_get_name",
            "snd_mixer_selem_get_index",
            "snd_mixer_find_selem",
            "snd_mixer_selem_is_active",
            "snd_mixer_selem_is_playback_mono",
            "snd_mixer_selem_has_playback_channel",
            "snd_mixer_selem_is_capture_mono",
            "snd_mixer_selem_has_capture_channel",
            "snd_mixer_selem_get_capture_group",
            "snd_mixer_selem_has_common_volume",
            "snd_mixer_selem_has_playback_volume",
            "snd_mixer_selem_has_playback_volume_joined",
            "snd_mixer_selem_has_capture_volume",
            "snd_mixer_selem_has_capture_volume_joined",
            "snd_mixer_selem_has_common_switch",
            "snd_mixer_selem_has_playback_switch",
            "snd_mixer_selem_has_playback_switch_joined",
            "snd_mixer_selem_has_capture_switch",
            "snd_mixer_selem_has_capture_switch_joined",
            "snd_mixer_selem_has_capture_switch_exclusive",
            "snd_mixer_selem_ask_playback_vol_dB",
            "snd_mixer_selem_ask_capture_vol_dB",
            "snd_mixer_selem_ask_playback_dB_vol",
            "snd_mixer_selem_ask_capture_dB_vol",
            "snd_mixer_selem_get_playback_volume",
            "snd_mixer_selem_get_capture_volume",
            "snd_mixer_selem_get_playback_dB",
            "snd_mixer_selem_get_capture_dB",
            "snd_mixer_selem_get_playback_switch",
            "snd_mixer_selem_get_capture_switch",
            "snd_mixer_selem_set_playback_volume",
            "snd_mixer_selem_set_capture_volume",
            "snd_mixer_selem_set_playback_dB",
            "snd_mixer_selem_set_capture_dB",
            "snd_mixer_selem_set_playback_volume_all",
            "snd_mixer_selem_set_capture_volume_all",
            "snd_mixer_selem_set_playback_dB_all",
            "snd_mixer_selem_set_capture_dB_all",
            "snd_mixer_selem_set_playback_switch",
            "snd_mixer_selem_set_capture_switch",
            "snd_mixer_selem_set_playback_switch_all",
            "snd_mixer_selem_set_capture_switch_all",
            "snd_mixer_selem_get_playback_volume_range",
            "snd_mixer_selem_get_playback_dB_range",
            "snd_mixer_selem_set_playback_volume_range",
            "snd_mixer_selem_get_capture_volume_range",
            "snd_mixer_selem_get_capture_dB_range",
            "snd_mixer_selem_set_capture_volume_range",
            "snd_mixer_selem_is_enumerated",
            "snd_mixer_selem_is_enum_playback",
            "snd_mixer_selem_is_enum_capture",
            "snd_mixer_selem_get_enum_items",
            "snd_mixer_selem_get_enum_item_name",
            "snd_mixer_selem_get_enum_item",
            "snd_mixer_selem_set_enum_item",
            "snd_mixer_selem_id_sizeof",
            "snd_mixer_selem_id_malloc",
            "snd_mixer_selem_id_free",
            "snd_mixer_selem_id_copy",
            "snd_mixer_selem_id_get_name",
            "snd_mixer_selem_id_get_index",
            "snd_mixer_selem_id_set_name",
            "snd_mixer_selem_id_set_index",
            "snd_seq_open",
            "snd_seq_open_lconf",
            "snd_seq_name",
            "snd_seq_type",
            "snd_seq_close",
            "snd_seq_poll_descriptors_count",
            "snd_seq_poll_descriptors",
            "snd_seq_poll_descriptors_revents",
            "snd_seq_nonblock",
            "snd_seq_client_id",
            "snd_seq_get_output_buffer_size",
            "snd_seq_get_input_buffer_size",
            "snd_seq_set_output_buffer_size",
            "snd_seq_set_input_buffer_size",
            "snd_seq_system_info_sizeof",
            "snd_seq_system_info_malloc",
            "snd_seq_system_info_free",
            "snd_seq_system_info_copy",
            "snd_seq_system_info_get_queues",
            "snd_seq_system_info_get_clients",
            "snd_seq_system_info_get_ports",
            "snd_seq_system_info_get_channels",
            "snd_seq_system_info_get_cur_clients",
            "snd_seq_system_info_get_cur_queues",
            "snd_seq_system_info",
            "snd_seq_client_info_sizeof",
            "snd_seq_client_info_malloc",
            "snd_seq_client_info_free",
            "snd_seq_client_info_copy",
            "snd_seq_client_info_get_client",
            "snd_seq_client_info_get_type",
            "snd_seq_client_info_get_name",
            "snd_seq_client_info_get_broadcast_filter",
            "snd_seq_client_info_get_error_bounce",
            "snd_seq_client_info_get_card",
            "snd_seq_client_info_get_pid",
            "snd_seq_client_info_get_event_filter",
            "snd_seq_client_info_get_num_ports",
            "snd_seq_client_info_get_event_lost",
            "snd_seq_client_info_set_client",
            "snd_seq_client_info_set_name",
            "snd_seq_client_info_set_broadcast_filter",
            "snd_seq_client_info_set_error_bounce",
            "snd_seq_client_info_set_event_filter",
            "snd_seq_client_info_event_filter_clear",
            "snd_seq_client_info_event_filter_add",
            "snd_seq_client_info_event_filter_del",
            "snd_seq_client_info_event_filter_check",
            "snd_seq_get_client_info",
            "snd_seq_get_any_client_info",
            "snd_seq_set_client_info",
            "snd_seq_query_next_client",
            "snd_seq_client_pool_sizeof",
            "snd_seq_client_pool_malloc",
            "snd_seq_client_pool_free",
            "snd_seq_client_pool_copy",
            "snd_seq_client_pool_get_client",
            "snd_seq_client_pool_get_output_pool",
            "snd_seq_client_pool_get_input_pool",
            "snd_seq_client_pool_get_output_room",
            "snd_seq_client_pool_get_output_free",
            "snd_seq_client_pool_get_input_free",
            "snd_seq_client_pool_set_output_pool",
            "snd_seq_client_pool_set_input_pool",
            "snd_seq_client_pool_set_output_room",
            "snd_seq_get_client_pool",
            "snd_seq_set_client_pool",
            "snd_seq_port_info_sizeof",
            "snd_seq_port_info_malloc",
            "snd_seq_port_info_free",
            "snd_seq_port_info_copy",
            "snd_seq_port_info_get_client",
            "snd_seq_port_info_get_port",
            "snd_seq_port_info_get_addr",
            "snd_seq_port_info_get_name",
            "snd_seq_port_info_get_capability",
            "snd_seq_port_info_get_type",
            "snd_seq_port_info_get_midi_channels",
            "snd_seq_port_info_get_midi_voices",
            "snd_seq_port_info_get_synth_voices",
            "snd_seq_port_info_get_read_use",
            "snd_seq_port_info_get_write_use",
            "snd_seq_port_info_get_port_specified",
            "snd_seq_port_info_get_timestamping",
            "snd_seq_port_info_get_timestamp_real",
            "snd_seq_port_info_get_timestamp_queue",
            "snd_seq_port_info_set_client",
            "snd_seq_port_info_set_port",
            "snd_seq_port_info_set_addr",
            "snd_seq_port_info_set_name",
            "snd_seq_port_info_set_capability",
            "snd_seq_port_info_set_type",
            "snd_seq_port_info_set_midi_channels",
            "snd_seq_port_info_set_midi_voices",
            "snd_seq_port_info_set_synth_voices",
            "snd_seq_port_info_set_port_specified",
            "snd_seq_port_info_set_timestamping",
            "snd_seq_port_info_set_timestamp_real",
            "snd_seq_port_info_set_timestamp_queue",
            "snd_seq_create_port",
            "snd_seq_delete_port",
            "snd_seq_get_port_info",
            "snd_seq_get_any_port_info",
            "snd_seq_set_port_info",
            "snd_seq_query_next_port",
            "snd_seq_port_subscribe_sizeof",
            "snd_seq_port_subscribe_malloc",
            "snd_seq_port_subscribe_free",
            "snd_seq_port_subscribe_copy",
            "snd_seq_port_subscribe_get_sender",
            "snd_seq_port_subscribe_get_dest",
            "snd_seq_port_subscribe_get_queue",
            "snd_seq_port_subscribe_get_exclusive",
            "snd_seq_port_subscribe_get_time_update",
            "snd_seq_port_subscribe_get_time_real",
            "snd_seq_port_subscribe_set_sender",
            "snd_seq_port_subscribe_set_dest",
            "snd_seq_port_subscribe_set_queue",
            "snd_seq_port_subscribe_set_exclusive",
            "snd_seq_port_subscribe_set_time_update",
            "snd_seq_port_subscribe_set_time_real",
            "snd_seq_get_port_subscription",
            "snd_seq_subscribe_port",
            "snd_seq_unsubscribe_port",
            "snd_seq_query_subscribe_sizeof",
            "snd_seq_query_subscribe_malloc",
            "snd_seq_query_subscribe_free",
            "snd_seq_query_subscribe_copy",
            "snd_seq_query_subscribe_get_client",
            "snd_seq_query_subscribe_get_port",
            "snd_seq_query_subscribe_get_root",
            "snd_seq_query_subscribe_get_type",
            "snd_seq_query_subscribe_get_index",
            "snd_seq_query_subscribe_get_num_subs",
            "snd_seq_query_subscribe_get_addr",
            "snd_seq_query_subscribe_get_queue",
            "snd_seq_query_subscribe_get_exclusive",
            "snd_seq_query_subscribe_get_time_update",
            "snd_seq_query_subscribe_get_time_real",
            "snd_seq_query_subscribe_set_client",
            "snd_seq_query_subscribe_set_port",
            "snd_seq_query_subscribe_set_root",
            "snd_seq_query_subscribe_set_type",
            "snd_seq_query_subscribe_set_index",
            "snd_seq_query_port_subscribers",
            "snd_seq_queue_info_sizeof",
            "snd_seq_queue_info_malloc",
            "snd_seq_queue_info_free",
            "snd_seq_queue_info_copy",
            "snd_seq_queue_info_get_queue",
            "snd_seq_queue_info_get_name",
            "snd_seq_queue_info_get_owner",
            "snd_seq_queue_info_get_locked",
            "snd_seq_queue_info_get_flags",
            "snd_seq_queue_info_set_name",
            "snd_seq_queue_info_set_owner",
            "snd_seq_queue_info_set_locked",
            "snd_seq_queue_info_set_flags",
            "snd_seq_create_queue",
            "snd_seq_alloc_named_queue",
            "snd_seq_alloc_queue",
            "snd_seq_free_queue",
            "snd_seq_get_queue_info",
            "snd_seq_set_queue_info",
            "snd_seq_query_named_queue",
            "snd_seq_get_queue_usage",
            "snd_seq_set_queue_usage",
            "snd_seq_queue_status_sizeof",
            "snd_seq_queue_status_malloc",
            "snd_seq_queue_status_free",
            "snd_seq_queue_status_copy",
            "snd_seq_queue_status_get_queue",
            "snd_seq_queue_status_get_events",
            "snd_seq_queue_status_get_tick_time",
            "snd_seq_queue_status_get_real_time",
            "snd_seq_queue_status_get_status",
            "snd_seq_get_queue_status",
            "snd_seq_queue_tempo_sizeof",
            "snd_seq_queue_tempo_malloc",
            "snd_seq_queue_tempo_free",
            "snd_seq_queue_tempo_copy",
            "snd_seq_queue_tempo_get_queue",
            "snd_seq_queue_tempo_get_tempo",
            "snd_seq_queue_tempo_get_ppq",
            "snd_seq_queue_tempo_get_skew",
            "snd_seq_queue_tempo_get_skew_base",
            "snd_seq_queue_tempo_set_tempo",
            "snd_seq_queue_tempo_set_ppq",
            "snd_seq_queue_tempo_set_skew",
            "snd_seq_queue_tempo_set_skew_base",
            "snd_seq_get_queue_tempo",
            "snd_seq_set_queue_tempo",
            "snd_seq_queue_timer_sizeof",
            "snd_seq_queue_timer_malloc",
            "snd_seq_queue_timer_free",
            "snd_seq_queue_timer_copy",
            "snd_seq_queue_timer_get_queue",
            "snd_seq_queue_timer_get_type",
            "snd_seq_queue_timer_get_id",
            "snd_seq_queue_timer_get_resolution",
            "snd_seq_queue_timer_set_type",
            "snd_seq_queue_timer_set_id",
            "snd_seq_queue_timer_set_resolution",
            "snd_seq_get_queue_timer",
            "snd_seq_set_queue_timer",
            "snd_seq_free_event",
            "snd_seq_event_length",
            "snd_seq_event_output",
            "snd_seq_event_output_buffer",
            "snd_seq_event_output_direct",
            "snd_seq_event_input",
            "snd_seq_event_input_pending",
            "snd_seq_drain_output",
            "snd_seq_event_output_pending",
            "snd_seq_extract_output",
            "snd_seq_drop_output",
            "snd_seq_drop_output_buffer",
            "snd_seq_drop_input",
            "snd_seq_drop_input_buffer",
            "snd_seq_remove_events_sizeof",
            "snd_seq_remove_events_malloc",
            "snd_seq_remove_events_free",
            "snd_seq_remove_events_copy",
            "snd_seq_remove_events_get_condition",
            "snd_seq_remove_events_get_queue",
            "snd_seq_remove_events_get_time",
            "snd_seq_remove_events_get_dest",
            "snd_seq_remove_events_get_channel",
            "snd_seq_remove_events_get_event_type",
            "snd_seq_remove_events_get_tag",
            "snd_seq_remove_events_set_condition",
            "snd_seq_remove_events_set_queue",
            "snd_seq_remove_events_set_time",
            "snd_seq_remove_events_set_dest",
            "snd_seq_remove_events_set_channel",
            "snd_seq_remove_events_set_event_type",
            "snd_seq_remove_events_set_tag",
            "snd_seq_remove_events",
            "snd_seq_set_bit",
            "snd_seq_unset_bit",
            "snd_seq_change_bit",
            "snd_seq_get_bit",
            "snd_seq_control_queue",
            "snd_seq_create_simple_port",
            "snd_seq_delete_simple_port",
            "snd_seq_connect_from",
            "snd_seq_connect_to",
            "snd_seq_disconnect_from",
            "snd_seq_disconnect_to",
            "snd_seq_set_client_name",
            "snd_seq_set_client_event_filter",
            "snd_seq_set_client_pool_output",
            "snd_seq_set_client_pool_output_room",
            "snd_seq_set_client_pool_input",
            "snd_seq_sync_output_queue",
            "snd_seq_parse_address",
            "snd_seq_reset_pool_output",
            "snd_seq_reset_pool_input",
            "snd_midi_event_new",
            "snd_midi_event_resize_buffer",
            "snd_midi_event_free",
            "snd_midi_event_init",
            "snd_midi_event_reset_encode",
            "snd_midi_event_reset_decode",
            "snd_midi_event_no_status",
            "snd_midi_event_encode",
            "snd_midi_event_encode_byte",
            "snd_midi_event_decode",
            "snd_asoundlib_version",
            "snd_dlopen",
            "snd_dlsym",
            "snd_dlclose",
            "snd_async_add_handler",
            "snd_async_del_handler",
            "snd_async_handler_get_fd",
            "snd_async_handler_get_signo",
            "snd_async_handler_get_callback_private",
            "snd_shm_area_create",
            "snd_shm_area_share",
            "snd_shm_area_destroy",
            "snd_user_file",
            "snd_input_stdio_open",
            "snd_input_stdio_attach",
            "snd_input_buffer_open",
            "snd_input_close",
            "snd_input_scanf",
            "snd_input_gets",
            "snd_input_getc",
            "snd_input_ungetc",
            "snd_output_stdio_open",
            "snd_output_stdio_attach",
            "snd_output_buffer_open",
            "snd_output_buffer_string",
            "snd_output_close",
            "snd_output_printf",
            "snd_output_vprintf",
            "snd_output_puts",
            "snd_output_putc",
            "snd_output_flush",
            "snd_strerror",
            "snd_lib_error_set_handler",
            "snd_lib_error_set_local",
            "snd_config_top",
            "snd_config_load",
            "snd_config_load_override",
            "snd_config_save",
            "snd_config_update",
            "snd_config_update_r",
            "snd_config_update_free",
            "snd_config_update_free_global",
            "snd_config_update_ref",
            "snd_config_ref",
            "snd_config_unref",
            "snd_config_search",
            "snd_config_searchv",
            "snd_config_search_definition",
            "snd_config_expand",
            "snd_config_evaluate",
            "snd_config_add",
            "snd_config_delete",
            "snd_config_delete_compound_members",
            "snd_config_copy",
            "snd_config_make",
            "snd_config_make_integer",
            "snd_config_make_integer64",
            "snd_config_make_real",
            "snd_config_make_string",
            "snd_config_make_pointer",
            "snd_config_make_compound",
            "snd_config_imake_integer",
            "snd_config_imake_integer64",
            "snd_config_imake_real",
            "snd_config_imake_string",
            "snd_config_imake_safe_string",
            "snd_config_imake_pointer",
            "snd_config_get_type",
            "snd_config_set_id",
            "snd_config_set_integer",
            "snd_config_set_integer64",
            "snd_config_set_real",
            "snd_config_set_string",
            "snd_config_set_ascii",
            "snd_config_set_pointer",
            "snd_config_get_id",
            "snd_config_get_integer",
            "snd_config_get_integer64",
            "snd_config_get_real",
            "snd_config_get_ireal",
            "snd_config_get_string",
            "snd_config_get_ascii",
            "snd_config_get_pointer",
            "snd_config_test_id",
            "snd_config_iterator_first",
            "snd_config_iterator_next",
            "snd_config_iterator_end",
            "snd_config_iterator_entry",
            "snd_config_get_bool_ascii",
            "snd_config_get_bool",
            "snd_config_get_ctl_iface_ascii",
            "snd_config_get_ctl_iface",
            "snd_names_list",
            "snd_names_list_free",
            "snd_pcm_open",
            "snd_pcm_open_lconf",
            "snd_pcm_open_fallback",
            "snd_pcm_close",
            "snd_pcm_name",
            "snd_pcm_type",
            "snd_pcm_stream",
            "snd_pcm_poll_descriptors_count",
            "snd_pcm_poll_descriptors",
            "snd_pcm_poll_descriptors_revents",
            "snd_pcm_nonblock",
            "snd_async_add_pcm_handler",
            "snd_async_handler_get_pcm",
            "snd_pcm_info",
            "snd_pcm_hw_params_current",
            "snd_pcm_hw_params",
            "snd_pcm_hw_free",
            "snd_pcm_sw_params_current",
            "snd_pcm_sw_params",
            "snd_pcm_prepare",
            "snd_pcm_reset",
            "snd_pcm_status",
            "snd_pcm_start",
            "snd_pcm_drop",
            "snd_pcm_drain",
            "snd_pcm_pause",
            "snd_pcm_state",
            "snd_pcm_hwsync",
            "snd_pcm_delay",
            "snd_pcm_resume",
            "snd_pcm_htimestamp",
            "snd_pcm_avail",
            "snd_pcm_avail_update",
            "snd_pcm_avail_delay",
            "snd_pcm_rewindable",
            "snd_pcm_rewind",
            "snd_pcm_forwardable",
            "snd_pcm_forward",
            "snd_pcm_writei",
            "snd_pcm_readi",
            "snd_pcm_writen",
            "snd_pcm_readn",
            "snd_pcm_wait",
            "snd_pcm_link",
            "snd_pcm_unlink",
            "snd_pcm_query_chmaps",
            "snd_pcm_query_chmaps_from_hw",
            "snd_pcm_free_chmaps",
            "snd_pcm_get_chmap",
            "snd_pcm_set_chmap",
            "snd_pcm_chmap_type_name",
            "snd_pcm_chmap_name",
            "snd_pcm_chmap_long_name",
            "snd_pcm_chmap_print",
            "snd_pcm_chmap_from_string",
            "snd_pcm_chmap_parse_string",
            "snd_pcm_recover",
            "snd_pcm_set_params",
            "snd_pcm_get_params",
            "snd_pcm_info_sizeof",
            "snd_pcm_info_malloc",
            "snd_pcm_info_free",
            "snd_pcm_info_copy",
            "snd_pcm_info_get_device",
            "snd_pcm_info_get_subdevice",
            "snd_pcm_info_get_stream",
            "snd_pcm_info_get_card",
            "snd_pcm_info_get_id",
            "snd_pcm_info_get_name",
            "snd_pcm_info_get_subdevice_name",
            "snd_pcm_info_get_class",
            "snd_pcm_info_get_subclass",
            "snd_pcm_info_get_subdevices_count",
            "snd_pcm_info_get_subdevices_avail",
            "snd_pcm_info_get_sync",
            "snd_pcm_info_set_device",
            "snd_pcm_info_set_subdevice",
            "snd_pcm_info_set_stream",
            "snd_pcm_hw_params_any",
            "snd_pcm_hw_params_can_mmap_sample_resolution",
            "snd_pcm_hw_params_is_double",
            "snd_pcm_hw_params_is_batch",
            "snd_pcm_hw_params_is_block_transfer",
            "snd_pcm_hw_params_is_monotonic",
            "snd_pcm_hw_params_can_overrange",
            "snd_pcm_hw_params_can_pause",
            "snd_pcm_hw_params_can_resume",
            "snd_pcm_hw_params_is_half_duplex",
            "snd_pcm_hw_params_is_joint_duplex",
            "snd_pcm_hw_params_can_sync_start",
            "snd_pcm_hw_params_can_disable_period_wakeup",
            "snd_pcm_hw_params_supports_audio_wallclock_ts",
            "snd_pcm_hw_params_supports_audio_ts_type",
            "snd_pcm_hw_params_get_rate_numden",
            "snd_pcm_hw_params_get_sbits",
            "snd_pcm_hw_params_get_fifo_size",
            "snd_pcm_hw_params_sizeof",
            "snd_pcm_hw_params_malloc",
            "snd_pcm_hw_params_free",
            "snd_pcm_hw_params_copy",
            "snd_pcm_hw_params_get_access",
            "snd_pcm_hw_params_test_access",
            "snd_pcm_hw_params_set_access",
            "snd_pcm_hw_params_set_access_first",
            "snd_pcm_hw_params_set_access_last",
            "snd_pcm_hw_params_set_access_mask",
            "snd_pcm_hw_params_get_access_mask",
            "snd_pcm_hw_params_get_format",
            "snd_pcm_hw_params_test_format",
            "snd_pcm_hw_params_set_format",
            "snd_pcm_hw_params_set_format_first",
            "snd_pcm_hw_params_set_format_last",
            "snd_pcm_hw_params_set_format_mask",
            "snd_pcm_hw_params_get_format_mask",
            "snd_pcm_hw_params_get_subformat",
            "snd_pcm_hw_params_test_subformat",
            "snd_pcm_hw_params_set_subformat",
            "snd_pcm_hw_params_set_subformat_first",
            "snd_pcm_hw_params_set_subformat_last",
            "snd_pcm_hw_params_set_subformat_mask",
            "snd_pcm_hw_params_get_subformat_mask",
            "snd_pcm_hw_params_get_channels",
            "snd_pcm_hw_params_get_channels_min",
            "snd_pcm_hw_params_get_channels_max",
            "snd_pcm_hw_params_test_channels",
            "snd_pcm_hw_params_set_channels",
            "snd_pcm_hw_params_set_channels_min",
            "snd_pcm_hw_params_set_channels_max",
            "snd_pcm_hw_params_set_channels_minmax",
            "snd_pcm_hw_params_set_channels_near",
            "snd_pcm_hw_params_set_channels_first",
            "snd_pcm_hw_params_set_channels_last",
            "snd_pcm_hw_params_get_rate",
            "snd_pcm_hw_params_get_rate_min",
            "snd_pcm_hw_params_get_rate_max",
            "snd_pcm_hw_params_test_rate",
            "snd_pcm_hw_params_set_rate",
            "snd_pcm_hw_params_set_rate_min",
            "snd_pcm_hw_params_set_rate_max",
            "snd_pcm_hw_params_set_rate_minmax",
            "snd_pcm_hw_params_set_rate_near",
            "snd_pcm_hw_params_set_rate_first",
            "snd_pcm_hw_params_set_rate_last",
            "snd_pcm_hw_params_set_rate_resample",
            "snd_pcm_hw_params_get_rate_resample",
            "snd_pcm_hw_params_set_export_buffer",
            "snd_pcm_hw_params_get_export_buffer",
            "snd_pcm_hw_params_set_period_wakeup",
            "snd_pcm_hw_params_get_period_wakeup",
            "snd_pcm_hw_params_get_period_time",
            "snd_pcm_hw_params_get_period_time_min",
            "snd_pcm_hw_params_get_period_time_max",
            "snd_pcm_hw_params_test_period_time",
            "snd_pcm_hw_params_set_period_time",
            "snd_pcm_hw_params_set_period_time_min",
            "snd_pcm_hw_params_set_period_time_max",
            "snd_pcm_hw_params_set_period_time_minmax",
            "snd_pcm_hw_params_set_period_time_near",
            "snd_pcm_hw_params_set_period_time_first",
            "snd_pcm_hw_params_set_period_time_last",
            "snd_pcm_hw_params_get_period_size",
            "snd_pcm_hw_params_get_period_size_min",
            "snd_pcm_hw_params_get_period_size_max",
            "snd_pcm_hw_params_test_period_size",
            "snd_pcm_hw_params_set_period_size",
            "snd_pcm_hw_params_set_period_size_min",
            "snd_pcm_hw_params_set_period_size_max",
            "snd_pcm_hw_params_set_period_size_minmax",
            "snd_pcm_hw_params_set_period_size_near",
            "snd_pcm_hw_params_set_period_size_first",
            "snd_pcm_hw_params_set_period_size_last",
            "snd_pcm_hw_params_set_period_size_integer",
            "snd_pcm_hw_params_get_periods",
            "snd_pcm_hw_params_get_periods_min",
            "snd_pcm_hw_params_get_periods_max",
            "snd_pcm_hw_params_test_periods",
            "snd_pcm_hw_params_set_periods",
            "snd_pcm_hw_params_set_periods_min",
            "snd_pcm_hw_params_set_periods_max",
            "snd_pcm_hw_params_set_periods_minmax",
            "snd_pcm_hw_params_set_periods_near",
            "snd_pcm_hw_params_set_periods_first",
            "snd_pcm_hw_params_set_periods_last",
            "snd_pcm_hw_params_set_periods_integer",
            "snd_pcm_hw_params_get_buffer_time",
            "snd_pcm_hw_params_get_buffer_time_min",
            "snd_pcm_hw_params_get_buffer_time_max",
            "snd_pcm_hw_params_test_buffer_time",
            "snd_pcm_hw_params_set_buffer_time",
            "snd_pcm_hw_params_set_buffer_time_min",
            "snd_pcm_hw_params_set_buffer_time_max",
            "snd_pcm_hw_params_set_buffer_time_minmax",
            "snd_pcm_hw_params_set_buffer_time_near",
            "snd_pcm_hw_params_set_buffer_time_first",
            "snd_pcm_hw_params_set_buffer_time_last",
            "snd_pcm_hw_params_get_buffer_size",
            "snd_pcm_hw_params_get_buffer_size_min",
            "snd_pcm_hw_params_get_buffer_size_max",
            "snd_pcm_hw_params_test_buffer_size",
            "snd_pcm_hw_params_set_buffer_size",
            "snd_pcm_hw_params_set_buffer_size_min",
            "snd_pcm_hw_params_set_buffer_size_max",
            "snd_pcm_hw_params_set_buffer_size_minmax",
            "snd_pcm_hw_params_set_buffer_size_near",
            "snd_pcm_hw_params_set_buffer_size_first",
            "snd_pcm_hw_params_set_buffer_size_last",
            "snd_pcm_hw_params_get_min_align",
            "snd_pcm_sw_params_sizeof",
            "snd_pcm_sw_params_malloc",
            "snd_pcm_sw_params_free",
            "snd_pcm_sw_params_copy",
            "snd_pcm_sw_params_get_boundary",
            "snd_pcm_sw_params_set_tstamp_mode",
            "snd_pcm_sw_params_get_tstamp_mode",
            "snd_pcm_sw_params_set_avail_min",
            "snd_pcm_sw_params_get_avail_min",
            "snd_pcm_sw_params_set_period_event",
            "snd_pcm_sw_params_get_period_event",
            "snd_pcm_sw_params_set_start_threshold",
            "snd_pcm_sw_params_get_start_threshold",
            "snd_pcm_sw_params_set_stop_threshold",
            "snd_pcm_sw_params_get_stop_threshold",
            "snd_pcm_sw_params_set_silence_threshold",
            "snd_pcm_sw_params_get_silence_threshold",
            "snd_pcm_sw_params_set_silence_size",
            "snd_pcm_sw_params_get_silence_size",
            "snd_pcm_access_mask_sizeof",
            "snd_pcm_access_mask_malloc",
            "snd_pcm_access_mask_free",
            "snd_pcm_access_mask_copy",
            "snd_pcm_access_mask_none",
            "snd_pcm_access_mask_any",
            "snd_pcm_access_mask_test",
            "snd_pcm_access_mask_empty",
            "snd_pcm_access_mask_set",
            "snd_pcm_access_mask_reset",
            "snd_pcm_format_mask_sizeof",
            "snd_pcm_format_mask_malloc",
            "snd_pcm_format_mask_free",
            "snd_pcm_format_mask_copy",
            "snd_pcm_format_mask_none",
            "snd_pcm_format_mask_any",
            "snd_pcm_format_mask_test",
            "snd_pcm_format_mask_empty",
            "snd_pcm_format_mask_set",
            "snd_pcm_format_mask_reset",
            "snd_pcm_subformat_mask_sizeof",
            "snd_pcm_subformat_mask_malloc",
            "snd_pcm_subformat_mask_free",
            "snd_pcm_subformat_mask_copy",
            "snd_pcm_subformat_mask_none",
            "snd_pcm_subformat_mask_any",
            "snd_pcm_subformat_mask_test",
            "snd_pcm_subformat_mask_empty",
            "snd_pcm_subformat_mask_set",
            "snd_pcm_subformat_mask_reset",
            "snd_pcm_status_sizeof",
            "snd_pcm_status_malloc",
            "snd_pcm_status_free",
            "snd_pcm_status_copy",
            "snd_pcm_status_get_state",
            "snd_pcm_status_get_trigger_tstamp",
            "snd_pcm_status_get_trigger_htstamp",
            "snd_pcm_status_get_tstamp",
            "snd_pcm_status_get_htstamp",
            "snd_pcm_status_get_audio_htstamp",
            "snd_pcm_status_get_driver_htstamp",
            "snd_pcm_status_get_delay",
            "snd_pcm_status_get_avail",
            "snd_pcm_status_get_avail_max",
            "snd_pcm_status_get_overrange",
            "snd_pcm_type_name",
            "snd_pcm_stream_name",
            "snd_pcm_access_name",
            "snd_pcm_format_name",
            "snd_pcm_format_description",
            "snd_pcm_subformat_name",
            "snd_pcm_subformat_description",
            "snd_pcm_format_value",
            "snd_pcm_tstamp_mode_name",
            "snd_pcm_state_name",
            "snd_pcm_dump",
            "snd_pcm_dump_hw_setup",
            "snd_pcm_dump_sw_setup",
            "snd_pcm_dump_setup",
            "snd_pcm_hw_params_dump",
            "snd_pcm_sw_params_dump",
            "snd_pcm_status_dump",
            "snd_pcm_mmap_begin",
            "snd_pcm_mmap_commit",
            "snd_pcm_mmap_writei",
            "snd_pcm_mmap_readi",
            "snd_pcm_mmap_writen",
            "snd_pcm_mmap_readn",
            "snd_pcm_format_signed",
            "snd_pcm_format_unsigned",
            "snd_pcm_format_linear",
            "snd_pcm_format_float",
            "snd_pcm_format_little_endian",
            "snd_pcm_format_big_endian",
            "snd_pcm_format_cpu_endian",
            "snd_pcm_format_width",
            "snd_pcm_format_physical_width",
            "snd_pcm_build_linear_format",
            "snd_pcm_format_size",
            "snd_pcm_format_silence",
            "snd_pcm_format_silence_16",
            "snd_pcm_format_silence_32",
            "snd_pcm_format_silence_64",
            "snd_pcm_format_set_silence",
            "snd_pcm_bytes_to_frames",
            "snd_pcm_frames_to_bytes",
            "snd_pcm_bytes_to_samples",
            "snd_pcm_samples_to_bytes",
            "snd_pcm_area_silence",
            "snd_pcm_areas_silence",
            "snd_pcm_area_copy",
            "snd_pcm_areas_copy",
            "snd_pcm_hook_get_pcm",
            "snd_pcm_hook_get_private",
            "snd_pcm_hook_set_private",
            "snd_pcm_hook_add",
            "snd_pcm_hook_remove",
            "snd_pcm_meter_get_bufsize",
            "snd_pcm_meter_get_channels",
            "snd_pcm_meter_get_rate",
            "snd_pcm_meter_get_now",
            "snd_pcm_meter_get_boundary",
            "snd_pcm_meter_add_scope",
            "snd_pcm_meter_search_scope",
            "snd_pcm_scope_malloc",
            "snd_pcm_scope_set_ops",
            "snd_pcm_scope_set_name",
            "snd_pcm_scope_get_name",
            "snd_pcm_scope_get_callback_private",
            "snd_pcm_scope_set_callback_private",
            "snd_pcm_scope_s16_open",
            "snd_pcm_scope_s16_get_channel_buffer",
            "snd_spcm_init",
            "snd_spcm_init_duplex",
            "snd_spcm_init_get_params",
            "snd_pcm_start_mode_name",
            "snd_pcm_xrun_mode_name",
            "snd_pcm_sw_params_set_start_mode",
            "snd_pcm_sw_params_get_start_mode",
            "snd_pcm_sw_params_set_xrun_mode",
            "snd_pcm_sw_params_get_xrun_mode",
            "snd_pcm_sw_params_set_xfer_align",
            "snd_pcm_sw_params_get_xfer_align",
            "snd_pcm_sw_params_set_sleep_min",
            "snd_pcm_sw_params_get_sleep_min",
            "snd_pcm_hw_params_get_tick_time",
            "snd_pcm_hw_params_get_tick_time_min",
            "snd_pcm_hw_params_get_tick_time_max",
            "snd_pcm_hw_params_test_tick_time",
            "snd_pcm_hw_params_set_tick_time",
            "snd_pcm_hw_params_set_tick_time_min",
            "snd_pcm_hw_params_set_tick_time_max",
            "snd_pcm_hw_params_set_tick_time_minmax",
            "snd_pcm_hw_params_set_tick_time_near",
            "snd_pcm_hw_params_set_tick_time_first",
            "snd_pcm_hw_params_set_tick_time_last",
            "snd_rawmidi_open",
            "snd_rawmidi_open_lconf",
            "snd_rawmidi_close",
            "snd_rawmidi_poll_descriptors_count",
            "snd_rawmidi_poll_descriptors",
            "snd_rawmidi_poll_descriptors_revents",
            "snd_rawmidi_nonblock",
            "snd_rawmidi_info_sizeof",
            "snd_rawmidi_info_malloc",
            "snd_rawmidi_info_free",
            "snd_rawmidi_info_copy",
            "snd_rawmidi_info_get_device",
            "snd_rawmidi_info_get_subdevice",
            "snd_rawmidi_info_get_stream",
            "snd_rawmidi_info_get_card",
            "snd_rawmidi_info_get_flags",
            "snd_rawmidi_info_get_id",
            "snd_rawmidi_info_get_name",
            "snd_rawmidi_info_get_subdevice_name",
            "snd_rawmidi_info_get_subdevices_count",
            "snd_rawmidi_info_get_subdevices_avail",
            "snd_rawmidi_info_set_device",
            "snd_rawmidi_info_set_subdevice",
            "snd_rawmidi_info_set_stream",
            "snd_rawmidi_info",
            "snd_rawmidi_params_sizeof",
            "snd_rawmidi_params_malloc",
            "snd_rawmidi_params_free",
            "snd_rawmidi_params_copy",
            "snd_rawmidi_params_set_buffer_size",
            "snd_rawmidi_params_get_buffer_size",
            "snd_rawmidi_params_set_avail_min",
            "snd_rawmidi_params_get_avail_min",
            "snd_rawmidi_params_set_no_active_sensing",
            "snd_rawmidi_params_get_no_active_sensing",
            "snd_rawmidi_params",
            "snd_rawmidi_params_current",
            "snd_rawmidi_status_sizeof",
            "snd_rawmidi_status_malloc",
            "snd_rawmidi_status_free",
            "snd_rawmidi_status_copy",
            "snd_rawmidi_status_get_tstamp",
            "snd_rawmidi_status_get_avail",
            "snd_rawmidi_status_get_xruns",
            "snd_rawmidi_status",
            "snd_rawmidi_drain",
            "snd_rawmidi_drop",
            "snd_rawmidi_write",
            "snd_rawmidi_read",
            "snd_rawmidi_name",
            "snd_rawmidi_type",
            "snd_rawmidi_stream",
            "snd_timer_query_open",
            "snd_timer_query_open_lconf",
            "snd_timer_query_close",
            "snd_timer_query_next_device",
            "snd_timer_query_info",
            "snd_timer_query_params",
            "snd_timer_query_status",
            "snd_timer_open",
            "snd_timer_open_lconf",
            "snd_timer_close",
            "snd_async_add_timer_handler",
            "snd_async_handler_get_timer",
            "snd_timer_poll_descriptors_count",
            "snd_timer_poll_descriptors",
            "snd_timer_poll_descriptors_revents",
            "snd_timer_info",
            "snd_timer_params",
            "snd_timer_status",
            "snd_timer_start",
            "snd_timer_stop",
            "snd_timer_continue",
            "snd_timer_read",
            "snd_timer_id_sizeof",
            "snd_timer_id_malloc",
            "snd_timer_id_free",
            "snd_timer_id_copy",
            "snd_timer_id_set_class",
            "snd_timer_id_get_class",
            "snd_timer_id_set_sclass",
            "snd_timer_id_get_sclass",
            "snd_timer_id_set_card",
            "snd_timer_id_get_card",
            "snd_timer_id_set_device",
            "snd_timer_id_get_device",
            "snd_timer_id_set_subdevice",
            "snd_timer_id_get_subdevice",
            "snd_timer_ginfo_sizeof",
            "snd_timer_ginfo_malloc",
            "snd_timer_ginfo_free",
            "snd_timer_ginfo_copy",
            "snd_timer_ginfo_set_tid",
            "snd_timer_ginfo_get_tid",
            "snd_timer_ginfo_get_flags",
            "snd_timer_ginfo_get_card",
            "snd_timer_ginfo_get_id",
            "snd_timer_ginfo_get_name",
            "snd_timer_ginfo_get_resolution",
            "snd_timer_ginfo_get_resolution_min",
            "snd_timer_ginfo_get_resolution_max",
            "snd_timer_ginfo_get_clients",
            "snd_timer_info_sizeof",
            "snd_timer_info_malloc",
            "snd_timer_info_free",
            "snd_timer_info_copy",
            "snd_timer_info_is_slave",
            "snd_timer_info_get_card",
            "snd_timer_info_get_id",
            "snd_timer_info_get_name",
            "snd_timer_info_get_resolution",
            "snd_timer_params_sizeof",
            "snd_timer_params_malloc",
            "snd_timer_params_free",
            "snd_timer_params_copy",
            "snd_timer_params_set_auto_start",
            "snd_timer_params_get_auto_start",
            "snd_timer_params_set_exclusive",
            "snd_timer_params_get_exclusive",
            "snd_timer_params_set_early_event",
            "snd_timer_params_get_early_event",
            "snd_timer_params_set_ticks",
            "snd_timer_params_get_ticks",
            "snd_timer_params_set_queue_size",
            "snd_timer_params_get_queue_size",
            "snd_timer_params_set_filter",
            "snd_timer_params_get_filter",
            "snd_timer_status_sizeof",
            "snd_timer_status_malloc",
            "snd_timer_status_free",
            "snd_timer_status_copy",
            "snd_timer_status_get_timestamp",
            "snd_timer_status_get_resolution",
            "snd_timer_status_get_lost",
            "snd_timer_status_get_overrun",
            "snd_timer_status_get_queue",
            "snd_timer_info_get_ticks",
            "snd_hwdep_open",
            "snd_hwdep_close",
            "snd_hwdep_poll_descriptors",
            "snd_hwdep_poll_descriptors_count",
            "snd_hwdep_poll_descriptors_revents",
            "snd_hwdep_nonblock",
            "snd_hwdep_info",
            "snd_hwdep_dsp_status",
            "snd_hwdep_dsp_load",
            "snd_hwdep_ioctl",
            "snd_hwdep_write",
            "snd_hwdep_read",
            "snd_hwdep_info_sizeof",
            "snd_hwdep_info_malloc",
            "snd_hwdep_info_free",
            "snd_hwdep_info_copy",
            "snd_hwdep_info_get_device",
            "snd_hwdep_info_get_card",
            "snd_hwdep_info_get_id",
            "snd_hwdep_info_get_name",
            "snd_hwdep_info_get_iface",
            "snd_hwdep_info_set_device",
            "snd_hwdep_dsp_status_sizeof",
            "snd_hwdep_dsp_status_malloc",
            "snd_hwdep_dsp_status_free",
            "snd_hwdep_dsp_status_copy",
            "snd_hwdep_dsp_status_get_version",
            "snd_hwdep_dsp_status_get_id",
            "snd_hwdep_dsp_status_get_num_dsps",
            "snd_hwdep_dsp_status_get_dsp_loaded",
            "snd_hwdep_dsp_status_get_chip_ready",
            "snd_hwdep_dsp_image_sizeof",
            "snd_hwdep_dsp_image_malloc",
            "snd_hwdep_dsp_image_free",
            "snd_hwdep_dsp_image_copy",
            "snd_hwdep_dsp_image_get_index",
            "snd_hwdep_dsp_image_get_name",
            "snd_hwdep_dsp_image_get_image",
            "snd_hwdep_dsp_image_get_length",
            "snd_hwdep_dsp_image_set_index",
            "snd_hwdep_dsp_image_set_name",
            "snd_hwdep_dsp_image_set_image",
            "snd_hwdep_dsp_image_set_length",
            "snd_card_load",
            "snd_card_next",
            "snd_card_get_index",
            "snd_card_get_name",
            "snd_card_get_longname",
            "snd_device_name_hint",
            "snd_device_name_free_hint",
            "snd_device_name_get_hint",
            "snd_ctl_open",
            "snd_ctl_open_lconf",
            "snd_ctl_open_fallback",
            "snd_ctl_close",
            "snd_ctl_nonblock",
            "snd_async_add_ctl_handler",
            "snd_async_handler_get_ctl",
            "snd_ctl_poll_descriptors_count",
            "snd_ctl_poll_descriptors",
            "snd_ctl_poll_descriptors_revents",
            "snd_ctl_subscribe_events",
            "snd_ctl_card_info",
            "snd_ctl_elem_list",
            "snd_ctl_elem_info",
            "snd_ctl_elem_read",
            "snd_ctl_elem_write",
            "snd_ctl_elem_lock",
            "snd_ctl_elem_unlock",
            "snd_ctl_elem_tlv_read",
            "snd_ctl_elem_tlv_write",
            "snd_ctl_elem_tlv_command",
            "snd_ctl_hwdep_next_device",
            "snd_ctl_hwdep_info",
            "snd_ctl_pcm_next_device",
            "snd_ctl_pcm_info",
            "snd_ctl_pcm_prefer_subdevice",
            "snd_ctl_rawmidi_next_device",
            "snd_ctl_rawmidi_info",
            "snd_ctl_rawmidi_prefer_subdevice",
            "snd_ctl_set_power_state",
            "snd_ctl_get_power_state",
            "snd_ctl_read",
            "snd_ctl_wait",
            "snd_ctl_name",
            "snd_ctl_type",
            "snd_ctl_elem_type_name",
            "snd_ctl_elem_iface_name",
            "snd_ctl_event_type_name",
            "snd_ctl_event_elem_get_mask",
            "snd_ctl_event_elem_get_numid",
            "snd_ctl_event_elem_get_id",
            "snd_ctl_event_elem_get_interface",
            "snd_ctl_event_elem_get_device",
            "snd_ctl_event_elem_get_subdevice",
            "snd_ctl_event_elem_get_name",
            "snd_ctl_event_elem_get_index",
            "snd_ctl_elem_list_alloc_space",
            "snd_ctl_elem_list_free_space",
            "snd_ctl_ascii_elem_id_get",
            "snd_ctl_ascii_elem_id_parse",
            "snd_ctl_ascii_value_parse",
            "snd_ctl_elem_id_sizeof",
            "snd_ctl_elem_id_malloc",
            "snd_ctl_elem_id_free",
            "snd_ctl_elem_id_clear",
            "snd_ctl_elem_id_copy",
            "snd_ctl_elem_id_get_numid",
            "snd_ctl_elem_id_get_interface",
            "snd_ctl_elem_id_get_device",
            "snd_ctl_elem_id_get_subdevice",
            "snd_ctl_elem_id_get_name",
            "snd_ctl_elem_id_get_index",
            "snd_ctl_elem_id_set_numid",
            "snd_ctl_elem_id_set_interface",
            "snd_ctl_elem_id_set_device",
            "snd_ctl_elem_id_set_subdevice",
            "snd_ctl_elem_id_set_name",
            "snd_ctl_elem_id_set_index",
            "snd_ctl_card_info_sizeof",
            "snd_ctl_card_info_malloc",
            "snd_ctl_card_info_free",
            "snd_ctl_card_info_clear",
            "snd_ctl_card_info_copy",
            "snd_ctl_card_info_get_card",
            "snd_ctl_card_info_get_id",
            "snd_ctl_card_info_get_driver",
            "snd_ctl_card_info_get_name",
            "snd_ctl_card_info_get_longname",
            "snd_ctl_card_info_get_mixername",
            "snd_ctl_card_info_get_components",
            "snd_ctl_event_sizeof",
            "snd_ctl_event_malloc",
            "snd_ctl_event_free",
            "snd_ctl_event_clear",
            "snd_ctl_event_copy",
            "snd_ctl_event_get_type",
            "snd_ctl_elem_list_sizeof",
            "snd_ctl_elem_list_malloc",
            "snd_ctl_elem_list_free",
            "snd_ctl_elem_list_clear",
            "snd_ctl_elem_list_copy",
            "snd_ctl_elem_list_set_offset",
            "snd_ctl_elem_list_get_used",
            "snd_ctl_elem_list_get_count",
            "snd_ctl_elem_list_get_id",
            "snd_ctl_elem_list_get_numid",
            "snd_ctl_elem_list_get_interface",
            "snd_ctl_elem_list_get_device",
            "snd_ctl_elem_list_get_subdevice",
            "snd_ctl_elem_list_get_name",
            "snd_ctl_elem_list_get_index",
            "snd_ctl_elem_info_sizeof",
            "snd_ctl_elem_info_malloc",
            "snd_ctl_elem_info_free",
            "snd_ctl_elem_info_clear",
            "snd_ctl_elem_info_copy",
            "snd_ctl_elem_info_get_type",
            "snd_ctl_elem_info_is_readable",
            "snd_ctl_elem_info_is_writable",
            "snd_ctl_elem_info_is_volatile",
            "snd_ctl_elem_info_is_inactive",
            "snd_ctl_elem_info_is_locked",
            "snd_ctl_elem_info_is_tlv_readable",
            "snd_ctl_elem_info_is_tlv_writable",
            "snd_ctl_elem_info_is_tlv_commandable",
            "snd_ctl_elem_info_is_owner",
            "snd_ctl_elem_info_is_user",
            "snd_ctl_elem_info_get_owner",
            "snd_ctl_elem_info_get_count",
            "snd_ctl_elem_info_get_min",
            "snd_ctl_elem_info_get_max",
            "snd_ctl_elem_info_get_step",
            "snd_ctl_elem_info_get_min64",
            "snd_ctl_elem_info_get_max64",
            "snd_ctl_elem_info_get_step64",
            "snd_ctl_elem_info_get_items",
            "snd_ctl_elem_info_set_item",
            "snd_ctl_elem_info_get_item_name",
            "snd_ctl_elem_info_get_dimensions",
            "snd_ctl_elem_info_get_dimension",
            "snd_ctl_elem_info_set_dimension",
            "snd_ctl_elem_info_get_id",
            "snd_ctl_elem_info_get_numid",
            "snd_ctl_elem_info_get_interface",
            "snd_ctl_elem_info_get_device",
            "snd_ctl_elem_info_get_subdevice",
            "snd_ctl_elem_info_get_name",
            "snd_ctl_elem_info_get_index",
            "snd_ctl_elem_info_set_id",
            "snd_ctl_elem_info_set_numid",
            "snd_ctl_elem_info_set_interface",
            "snd_ctl_elem_info_set_device",
            "snd_ctl_elem_info_set_subdevice",
            "snd_ctl_elem_info_set_name",
            "snd_ctl_elem_info_set_index",
            "snd_ctl_add_integer_elem_set",
            "snd_ctl_add_integer64_elem_set",
            "snd_ctl_add_boolean_elem_set",
            "snd_ctl_add_enumerated_elem_set",
            "snd_ctl_add_bytes_elem_set",
            "snd_ctl_elem_add_integer",
            "snd_ctl_elem_add_integer64",
            "snd_ctl_elem_add_boolean",
            "snd_ctl_elem_add_enumerated",
            "snd_ctl_elem_add_iec958",
            "snd_ctl_elem_remove",
            "snd_ctl_elem_value_sizeof",
            "snd_ctl_elem_value_malloc",
            "snd_ctl_elem_value_free",
            "snd_ctl_elem_value_clear",
            "snd_ctl_elem_value_copy",
            "snd_ctl_elem_value_compare",
            "snd_ctl_elem_value_get_id",
            "snd_ctl_elem_value_get_numid",
            "snd_ctl_elem_value_get_interface",
            "snd_ctl_elem_value_get_device",
            "snd_ctl_elem_value_get_subdevice",
            "snd_ctl_elem_value_get_name",
            "snd_ctl_elem_value_get_index",
            "snd_ctl_elem_value_set_id",
            "snd_ctl_elem_value_set_numid",
            "snd_ctl_elem_value_set_interface",
            "snd_ctl_elem_value_set_device",
            "snd_ctl_elem_value_set_subdevice",
            "snd_ctl_elem_value_set_name",
            "snd_ctl_elem_value_set_index",
            "snd_ctl_elem_value_get_boolean",
            "snd_ctl_elem_value_get_integer",
            "snd_ctl_elem_value_get_integer64",
            "snd_ctl_elem_value_get_enumerated",
            "snd_ctl_elem_value_get_byte",
            "snd_ctl_elem_value_set_boolean",
            "snd_ctl_elem_value_set_integer",
            "snd_ctl_elem_value_set_integer64",
            "snd_ctl_elem_value_set_enumerated",
            "snd_ctl_elem_value_set_byte",
            "snd_ctl_elem_set_bytes",
            "snd_ctl_elem_value_get_bytes",
            "snd_ctl_elem_value_get_iec958",
            "snd_ctl_elem_value_set_iec958",
            "snd_tlv_parse_dB_info",
            "snd_tlv_get_dB_range",
            "snd_tlv_convert_to_dB",
            "snd_tlv_convert_from_dB",
            "snd_ctl_get_dB_range",
            "snd_ctl_convert_to_dB",
            "snd_ctl_convert_from_dB",
            "snd_hctl_compare_fast",
            "snd_hctl_open",
            "snd_hctl_open_ctl",
            "snd_hctl_close",
            "snd_hctl_nonblock",
            "snd_hctl_poll_descriptors_count",
            "snd_hctl_poll_descriptors",
            "snd_hctl_poll_descriptors_revents",
            "snd_hctl_get_count",
            "snd_hctl_set_compare",
            "snd_hctl_first_elem",
            "snd_hctl_last_elem",
            "snd_hctl_find_elem",
            "snd_hctl_set_callback",
            "snd_hctl_set_callback_private",
            "snd_hctl_get_callback_private",
            "snd_hctl_load",
            "snd_hctl_free",
            "snd_hctl_handle_events",
            "snd_hctl_name",
            "snd_hctl_wait",
            "snd_hctl_ctl",
            "snd_hctl_elem_next",
            "snd_hctl_elem_prev",
            "snd_hctl_elem_info",
            "snd_hctl_elem_read",
            "snd_hctl_elem_write",
            "snd_hctl_elem_tlv_read",
            "snd_hctl_elem_tlv_write",
            "snd_hctl_elem_tlv_command",
            "snd_hctl_elem_get_hctl",
            "snd_hctl_elem_get_id",
            "snd_hctl_elem_get_numid",
            "snd_hctl_elem_get_interface",
            "snd_hctl_elem_get_device",
            "snd_hctl_elem_get_subdevice",
            "snd_hctl_elem_get_name",
            "snd_hctl_elem_get_index",
            "snd_hctl_elem_set_callback",
            "snd_hctl_elem_get_callback_private",
            "snd_hctl_elem_set_callback_private",
            "snd_sctl_build",
            "snd_sctl_free",
            "snd_sctl_install",
            "snd_sctl_remove",
            "snd_mixer_open",
            "snd_mixer_close",
            "snd_mixer_first_elem",
            "snd_mixer_last_elem",
            "snd_mixer_handle_events",
            "snd_mixer_attach",
            "snd_mixer_attach_hctl",
            "snd_mixer_detach",
            "snd_mixer_detach_hctl",
            "snd_mixer_get_hctl",
            "snd_mixer_poll_descriptors_count",
            "snd_mixer_poll_descriptors",
            "snd_mixer_poll_descriptors_revents",
            "snd_mixer_load",
            "snd_mixer_free",
            "snd_mixer_wait",
            "snd_mixer_set_compare",
            "snd_mixer_set_callback",
            "snd_mixer_get_callback_private",
            "snd_mixer_set_callback_private",
            "snd_mixer_get_count",
            "snd_mixer_class_unregister",
            "snd_mixer_elem_next",
            "snd_mixer_elem_prev",
            "snd_mixer_elem_set_callback",
            "snd_mixer_elem_get_callback_private",
            "snd_mixer_elem_set_callback_private",
            "snd_mixer_elem_get_type",
            "snd_mixer_class_register",
            "snd_mixer_elem_new",
            "snd_mixer_elem_add",
            "snd_mixer_elem_remove",
            "snd_mixer_elem_free",
            "snd_mixer_elem_info",
            "snd_mixer_elem_value",
            "snd_mixer_elem_attach",
            "snd_mixer_elem_detach",
            "snd_mixer_elem_empty",
            "snd_mixer_elem_get_private",
            "snd_mixer_class_sizeof",
            "snd_mixer_class_malloc",
            "snd_mixer_class_free",
            "snd_mixer_class_copy",
            "snd_mixer_class_get_mixer",
            "snd_mixer_class_get_event",
            "snd_mixer_class_get_private",
            "snd_mixer_class_get_compare",
            "snd_mixer_class_set_event",
            "snd_mixer_class_set_private",
            "snd_mixer_class_set_private_free",
            "snd_mixer_class_set_compare",
            "snd_mixer_selem_channel_name",
            "snd_mixer_selem_register",
            "snd_mixer_selem_get_id",
            "snd_mixer_selem_get_name",
            "snd_mixer_selem_get_index",
            "snd_mixer_find_selem",
            "snd_mixer_selem_is_active",
            "snd_mixer_selem_is_playback_mono",
            "snd_mixer_selem_has_playback_channel",
            "snd_mixer_selem_is_capture_mono",
            "snd_mixer_selem_has_capture_channel",
            "snd_mixer_selem_get_capture_group",
            "snd_mixer_selem_has_common_volume",
            "snd_mixer_selem_has_playback_volume",
            "snd_mixer_selem_has_playback_volume_joined",
            "snd_mixer_selem_has_capture_volume",
            "snd_mixer_selem_has_capture_volume_joined",
            "snd_mixer_selem_has_common_switch",
            "snd_mixer_selem_has_playback_switch",
            "snd_mixer_selem_has_playback_switch_joined",
            "snd_mixer_selem_has_capture_switch",
            "snd_mixer_selem_has_capture_switch_joined",
            "snd_mixer_selem_has_capture_switch_exclusive",
            "snd_mixer_selem_ask_playback_vol_dB",
            "snd_mixer_selem_ask_capture_vol_dB",
            "snd_mixer_selem_ask_playback_dB_vol",
            "snd_mixer_selem_ask_capture_dB_vol",
            "snd_mixer_selem_get_playback_volume",
            "snd_mixer_selem_get_capture_volume",
            "snd_mixer_selem_get_playback_dB",
            "snd_mixer_selem_get_capture_dB",
            "snd_mixer_selem_get_playback_switch",
            "snd_mixer_selem_get_capture_switch",
            "snd_mixer_selem_set_playback_volume",
            "snd_mixer_selem_set_capture_volume",
            "snd_mixer_selem_set_playback_dB",
            "snd_mixer_selem_set_capture_dB",
            "snd_mixer_selem_set_playback_volume_all",
            "snd_mixer_selem_set_capture_volume_all",
            "snd_mixer_selem_set_playback_dB_all",
            "snd_mixer_selem_set_capture_dB_all",
            "snd_mixer_selem_set_playback_switch",
            "snd_mixer_selem_set_capture_switch",
            "snd_mixer_selem_set_playback_switch_all",
            "snd_mixer_selem_set_capture_switch_all",
            "snd_mixer_selem_get_playback_volume_range",
            "snd_mixer_selem_get_playback_dB_range",
            "snd_mixer_selem_set_playback_volume_range",
            "snd_mixer_selem_get_capture_volume_range",
            "snd_mixer_selem_get_capture_dB_range",
            "snd_mixer_selem_set_capture_volume_range",
            "snd_mixer_selem_is_enumerated",
            "snd_mixer_selem_is_enum_playback",
            "snd_mixer_selem_is_enum_capture",
            "snd_mixer_selem_get_enum_items",
            "snd_mixer_selem_get_enum_item_name",
            "snd_mixer_selem_get_enum_item",
            "snd_mixer_selem_set_enum_item",
            "snd_mixer_selem_id_sizeof",
            "snd_mixer_selem_id_malloc",
            "snd_mixer_selem_id_free",
            "snd_mixer_selem_id_copy",
            "snd_mixer_selem_id_get_name",
            "snd_mixer_selem_id_get_index",
            "snd_mixer_selem_id_set_name",
            "snd_mixer_selem_id_set_index",
            "snd_seq_open",
            "snd_seq_open_lconf",
            "snd_seq_name",
            "snd_seq_type",
            "snd_seq_close",
            "snd_seq_poll_descriptors_count",
            "snd_seq_poll_descriptors",
            "snd_seq_poll_descriptors_revents",
            "snd_seq_nonblock",
            "snd_seq_client_id",
            "snd_seq_get_output_buffer_size",
            "snd_seq_get_input_buffer_size",
            "snd_seq_set_output_buffer_size",
            "snd_seq_set_input_buffer_size",
            "snd_seq_system_info_sizeof",
            "snd_seq_system_info_malloc",
            "snd_seq_system_info_free",
            "snd_seq_system_info_copy",
            "snd_seq_system_info_get_queues",
            "snd_seq_system_info_get_clients",
            "snd_seq_system_info_get_ports",
            "snd_seq_system_info_get_channels",
            "snd_seq_system_info_get_cur_clients",
            "snd_seq_system_info_get_cur_queues",
            "snd_seq_system_info",
            "snd_seq_client_info_sizeof",
            "snd_seq_client_info_malloc",
            "snd_seq_client_info_free",
            "snd_seq_client_info_copy",
            "snd_seq_client_info_get_client",
            "snd_seq_client_info_get_type",
            "snd_seq_client_info_get_name",
            "snd_seq_client_info_get_broadcast_filter",
            "snd_seq_client_info_get_error_bounce",
            "snd_seq_client_info_get_card",
            "snd_seq_client_info_get_pid",
            "snd_seq_client_info_get_event_filter",
            "snd_seq_client_info_get_num_ports",
            "snd_seq_client_info_get_event_lost",
            "snd_seq_client_info_set_client",
            "snd_seq_client_info_set_name",
            "snd_seq_client_info_set_broadcast_filter",
            "snd_seq_client_info_set_error_bounce",
            "snd_seq_client_info_set_event_filter",
            "snd_seq_client_info_event_filter_clear",
            "snd_seq_client_info_event_filter_add",
            "snd_seq_client_info_event_filter_del",
            "snd_seq_client_info_event_filter_check",
            "snd_seq_get_client_info",
            "snd_seq_get_any_client_info",
            "snd_seq_set_client_info",
            "snd_seq_query_next_client",
            "snd_seq_client_pool_sizeof",
            "snd_seq_client_pool_malloc",
            "snd_seq_client_pool_free",
            "snd_seq_client_pool_copy",
            "snd_seq_client_pool_get_client",
            "snd_seq_client_pool_get_output_pool",
            "snd_seq_client_pool_get_input_pool",
            "snd_seq_client_pool_get_output_room",
            "snd_seq_client_pool_get_output_free",
            "snd_seq_client_pool_get_input_free",
            "snd_seq_client_pool_set_output_pool",
            "snd_seq_client_pool_set_input_pool",
            "snd_seq_client_pool_set_output_room",
            "snd_seq_get_client_pool",
            "snd_seq_set_client_pool",
            "snd_seq_port_info_sizeof",
            "snd_seq_port_info_malloc",
            "snd_seq_port_info_free",
            "snd_seq_port_info_copy",
            "snd_seq_port_info_get_client",
            "snd_seq_port_info_get_port",
            "snd_seq_port_info_get_addr",
            "snd_seq_port_info_get_name",
            "snd_seq_port_info_get_capability",
            "snd_seq_port_info_get_type",
            "snd_seq_port_info_get_midi_channels",
            "snd_seq_port_info_get_midi_voices",
            "snd_seq_port_info_get_synth_voices",
            "snd_seq_port_info_get_read_use",
            "snd_seq_port_info_get_write_use",
            "snd_seq_port_info_get_port_specified",
            "snd_seq_port_info_get_timestamping",
            "snd_seq_port_info_get_timestamp_real",
            "snd_seq_port_info_get_timestamp_queue",
            "snd_seq_port_info_set_client",
            "snd_seq_port_info_set_port",
            "snd_seq_port_info_set_addr",
            "snd_seq_port_info_set_name",
            "snd_seq_port_info_set_capability",
            "snd_seq_port_info_set_type",
            "snd_seq_port_info_set_midi_channels",
            "snd_seq_port_info_set_midi_voices",
            "snd_seq_port_info_set_synth_voices",
            "snd_seq_port_info_set_port_specified",
            "snd_seq_port_info_set_timestamping",
            "snd_seq_port_info_set_timestamp_real",
            "snd_seq_port_info_set_timestamp_queue",
            "snd_seq_create_port",
            "snd_seq_delete_port",
            "snd_seq_get_port_info",
            "snd_seq_get_any_port_info",
            "snd_seq_set_port_info",
            "snd_seq_query_next_port",
            "snd_seq_port_subscribe_sizeof",
            "snd_seq_port_subscribe_malloc",
            "snd_seq_port_subscribe_free",
            "snd_seq_port_subscribe_copy",
            "snd_seq_port_subscribe_get_sender",
            "snd_seq_port_subscribe_get_dest",
            "snd_seq_port_subscribe_get_queue",
            "snd_seq_port_subscribe_get_exclusive",
            "snd_seq_port_subscribe_get_time_update",
            "snd_seq_port_subscribe_get_time_real",
            "snd_seq_port_subscribe_set_sender",
            "snd_seq_port_subscribe_set_dest",
            "snd_seq_port_subscribe_set_queue",
            "snd_seq_port_subscribe_set_exclusive",
            "snd_seq_port_subscribe_set_time_update",
            "snd_seq_port_subscribe_set_time_real",
            "snd_seq_get_port_subscription",
            "snd_seq_subscribe_port",
            "snd_seq_unsubscribe_port",
            "snd_seq_query_subscribe_sizeof",
            "snd_seq_query_subscribe_malloc",
            "snd_seq_query_subscribe_free",
            "snd_seq_query_subscribe_copy",
            "snd_seq_query_subscribe_get_client",
            "snd_seq_query_subscribe_get_port",
            "snd_seq_query_subscribe_get_root",
            "snd_seq_query_subscribe_get_type",
            "snd_seq_query_subscribe_get_index",
            "snd_seq_query_subscribe_get_num_subs",
            "snd_seq_query_subscribe_get_addr",
            "snd_seq_query_subscribe_get_queue",
            "snd_seq_query_subscribe_get_exclusive",
            "snd_seq_query_subscribe_get_time_update",
            "snd_seq_query_subscribe_get_time_real",
            "snd_seq_query_subscribe_set_client",
            "snd_seq_query_subscribe_set_port",
            "snd_seq_query_subscribe_set_root",
            "snd_seq_query_subscribe_set_type",
            "snd_seq_query_subscribe_set_index",
            "snd_seq_query_port_subscribers",
            "snd_seq_queue_info_sizeof",
            "snd_seq_queue_info_malloc",
            "snd_seq_queue_info_free",
            "snd_seq_queue_info_copy",
            "snd_seq_queue_info_get_queue",
            "snd_seq_queue_info_get_name",
            "snd_seq_queue_info_get_owner",
            "snd_seq_queue_info_get_locked",
            "snd_seq_queue_info_get_flags",
            "snd_seq_queue_info_set_name",
            "snd_seq_queue_info_set_owner",
            "snd_seq_queue_info_set_locked",
            "snd_seq_queue_info_set_flags",
            "snd_seq_create_queue",
            "snd_seq_alloc_named_queue",
            "snd_seq_alloc_queue",
            "snd_seq_free_queue",
            "snd_seq_get_queue_info",
            "snd_seq_set_queue_info",
            "snd_seq_query_named_queue",
            "snd_seq_get_queue_usage",
            "snd_seq_set_queue_usage",
            "snd_seq_queue_status_sizeof",
            "snd_seq_queue_status_malloc",
            "snd_seq_queue_status_free",
            "snd_seq_queue_status_copy",
            "snd_seq_queue_status_get_queue",
            "snd_seq_queue_status_get_events",
            "snd_seq_queue_status_get_tick_time",
            "snd_seq_queue_status_get_real_time",
            "snd_seq_queue_status_get_status",
            "snd_seq_get_queue_status",
            "snd_seq_queue_tempo_sizeof",
            "snd_seq_queue_tempo_malloc",
            "snd_seq_queue_tempo_free",
            "snd_seq_queue_tempo_copy",
            "snd_seq_queue_tempo_get_queue",
            "snd_seq_queue_tempo_get_tempo",
            "snd_seq_queue_tempo_get_ppq",
            "snd_seq_queue_tempo_get_skew",
            "snd_seq_queue_tempo_get_skew_base",
            "snd_seq_queue_tempo_set_tempo",
            "snd_seq_queue_tempo_set_ppq",
            "snd_seq_queue_tempo_set_skew",
            "snd_seq_queue_tempo_set_skew_base",
            "snd_seq_get_queue_tempo",
            "snd_seq_set_queue_tempo",
            "snd_seq_queue_timer_sizeof",
            "snd_seq_queue_timer_malloc",
            "snd_seq_queue_timer_free",
            "snd_seq_queue_timer_copy",
            "snd_seq_queue_timer_get_queue",
            "snd_seq_queue_timer_get_type",
            "snd_seq_queue_timer_get_id",
            "snd_seq_queue_timer_get_resolution",
            "snd_seq_queue_timer_set_type",
            "snd_seq_queue_timer_set_id",
            "snd_seq_queue_timer_set_resolution",
            "snd_seq_get_queue_timer",
            "snd_seq_set_queue_timer",
            "snd_seq_free_event",
            "snd_seq_event_length",
            "snd_seq_event_output",
            "snd_seq_event_output_buffer",
            "snd_seq_event_output_direct",
            "snd_seq_event_input",
            "snd_seq_event_input_pending",
            "snd_seq_drain_output",
            "snd_seq_event_output_pending",
            "snd_seq_extract_output",
            "snd_seq_drop_output",
            "snd_seq_drop_output_buffer",
            "snd_seq_drop_input",
            "snd_seq_drop_input_buffer",
            "snd_seq_remove_events_sizeof",
            "snd_seq_remove_events_malloc",
            "snd_seq_remove_events_free",
            "snd_seq_remove_events_copy",
            "snd_seq_remove_events_get_condition",
            "snd_seq_remove_events_get_queue",
            "snd_seq_remove_events_get_time",
            "snd_seq_remove_events_get_dest",
            "snd_seq_remove_events_get_channel",
            "snd_seq_remove_events_get_event_type",
            "snd_seq_remove_events_get_tag",
            "snd_seq_remove_events_set_condition",
            "snd_seq_remove_events_set_queue",
            "snd_seq_remove_events_set_time",
            "snd_seq_remove_events_set_dest",
            "snd_seq_remove_events_set_channel",
            "snd_seq_remove_events_set_event_type",
            "snd_seq_remove_events_set_tag",
            "snd_seq_remove_events",
            "snd_seq_set_bit",
            "snd_seq_unset_bit",
            "snd_seq_change_bit",
            "snd_seq_get_bit",
            "snd_seq_control_queue",
            "snd_seq_create_simple_port",
            "snd_seq_delete_simple_port",
            "snd_seq_connect_from",
            "snd_seq_connect_to",
            "snd_seq_disconnect_from",
            "snd_seq_disconnect_to",
            "snd_seq_set_client_name",
            "snd_seq_set_client_event_filter",
            "snd_seq_set_client_pool_output",
            "snd_seq_set_client_pool_output_room",
            "snd_seq_set_client_pool_input",
            "snd_seq_sync_output_queue",
            "snd_seq_parse_address",
            "snd_seq_reset_pool_output",
            "snd_seq_reset_pool_input",
            "snd_midi_event_new",
            "snd_midi_event_resize_buffer",
            "snd_midi_event_free",
            "snd_midi_event_init",
            "snd_midi_event_reset_encode",
            "snd_midi_event_reset_decode",
            "snd_midi_event_no_status",
            "snd_midi_event_encode",
            "snd_midi_event_encode_byte",
            "snd_midi_event_decode"
        ]
    },
    "drivers/alsa/audio_driver_alsa.h": {
        "classes": [
            "AudioDriverALSA"
        ],
        "structs": [],
        "defines": [
            "AUDIO_DRIVER_ALSA_H"
        ]
    },
    "drivers/windows/file_access_windows.h": {
        "classes": [
            "FileAccessWindows"
        ],
        "structs": [],
        "defines": [
            "FILE_ACCESS_WINDOWS_H"
        ]
    },
    "drivers/windows/dir_access_windows.h": {
        "classes": [
            "DirAccessWindows"
        ],
        "structs": [],
        "defines": [
            "DIR_ACCESS_WINDOWS_H"
        ]
    },
    "drivers/coreaudio/audio_driver_coreaudio.h": {
        "classes": [
            "AudioDriverCoreAudio"
        ],
        "structs": [],
        "defines": [
            "AUDIO_DRIVER_COREAUDIO_H"
        ]
    },
    "drivers/alsamidi/midi_driver_alsamidi.h": {
        "classes": [
            "MIDIDriverALSAMidi",
            "InputConnection",
            "MessageCategory"
        ],
        "structs": [],
        "defines": [
            "MIDI_DRIVER_ALSAMIDI_H"
        ]
    },
    "core/core_globals.h": {
        "classes": [
            "CoreGlobals"
        ],
        "structs": [],
        "defines": [
            "CORE_GLOBALS_H"
        ]
    },
    "core/version.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VERSION_H",
            "_STR",
            "_MKSTR",
            "VERSION_BRANCH",
            "VERSION_NUMBER",
            "VERSION_NUMBER",
            "VERSION_HEX",
            "VERSION_FULL_CONFIG",
            "VERSION_FULL_BUILD",
            "VERSION_FULL_NAME"
        ]
    },
    "core/typedefs.h": {
        "classes": [],
        "structs": [
            "Comparator",
            "_GlobalLock",
            "IndexSequence",
            "BuildIndexSequence"
        ],
        "defines": [
            "TYPEDEFS_H",
            "_STR",
            "_MKSTR",
            "_ALWAYS_INLINE_",
            "_ALWAYS_INLINE_",
            "_ALWAYS_INLINE_",
            "_FORCE_INLINE_",
            "_FORCE_INLINE_",
            "_NO_DISCARD_",
            "_ALLOW_DISCARD_",
            "SWAP",
            "BSWAP16",
            "BSWAP32",
            "BSWAP64",
            "BSWAP16",
            "BSWAP32",
            "BSWAP64",
            "GLOBAL_LOCK_FUNCTION",
            "likely",
            "unlikely",
            "likely",
            "unlikely",
            "_PRINTF_FORMAT_ATTRIBUTE_2_0",
            "_PRINTF_FORMAT_ATTRIBUTE_2_3",
            "_PRINTF_FORMAT_ATTRIBUTE_2_0",
            "_PRINTF_FORMAT_ATTRIBUTE_2_3",
            "CAST_INT_TO_UCHAR_PTR",
            "MAX_RECURSION",
            "DEBUG_METHODS_ENABLED",
            "__GDARG_PLACEHOLDER_1",
            "__gd_take_second_arg",
            "____gd_is_defined",
            "___gd_is_defined",
            "GD_IS_DEFINED"
        ]
    },
    "core/doc_data.h": {
        "classes": [
            "DocData"
        ],
        "structs": [
            "ScriptMemberInfo",
            "ArgumentDoc",
            "MethodDoc",
            "ConstantDoc",
            "PropertyDoc",
            "ThemeItemDoc",
            "TutorialDoc",
            "EnumDoc",
            "ClassDoc"
        ],
        "defines": [
            "DOC_DATA_H"
        ]
    },
    "core/authors.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "AUTHORS_GEN_H"
        ]
    },
    "core/version_generated.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VERSION_GENERATED_GEN_H",
            "VERSION_SHORT_NAME",
            "VERSION_NAME",
            "VERSION_MAJOR",
            "VERSION_MINOR",
            "VERSION_PATCH",
            "VERSION_STATUS",
            "VERSION_BUILD",
            "VERSION_MODULE_CONFIG",
            "VERSION_WEBSITE",
            "VERSION_DOCS_BRANCH",
            "VERSION_DOCS_URL"
        ]
    },
    "core/license.gen.h": {
        "classes": [],
        "structs": [
            "ComponentCopyrightPart",
            "ComponentCopyright"
        ],
        "defines": [
            "LICENSE_GEN_H"
        ]
    },
    "core/disabled_classes.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DISABLED_CLASSES_GEN_H"
        ]
    },
    "core/core_string_names.h": {
        "classes": [
            "CoreStringNames"
        ],
        "structs": [],
        "defines": [
            "CORE_STRING_NAMES_H"
        ]
    },
    "core/core_constants.h": {
        "classes": [
            "CoreConstants"
        ],
        "structs": [],
        "defines": [
            "CORE_CONSTANTS_H"
        ]
    },
    "core/core_bind.h": {
        "classes": [
            "ResourceLoader",
            "ResourceSaver",
            "OS",
            "Geometry2D",
            "Geometry3D",
            "Marshalls",
            "Mutex",
            "Semaphore",
            "Thread",
            "ClassDB",
            "Engine",
            "EngineDebugger"
        ],
        "structs": [],
        "defines": [
            "CORE_BIND_H"
        ]
    },
    "core/donors.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DONORS_GEN_H"
        ]
    },
    "core/register_core_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGISTER_CORE_TYPES_H"
        ]
    },
    "core/crypto/crypto.h": {
        "classes": [
            "CryptoKey",
            "X509Certificate",
            "TLSOptions",
            "HMACContext",
            "Crypto",
            "ResourceFormatLoaderCrypto",
            "ResourceFormatSaverCrypto"
        ],
        "structs": [],
        "defines": [
            "CRYPTO_H"
        ]
    },
    "core/crypto/hashing_context.h": {
        "classes": [
            "HashingContext"
        ],
        "structs": [],
        "defines": [
            "HASHING_CONTEXT_H"
        ]
    },
    "core/crypto/aes_context.h": {
        "classes": [
            "AESContext"
        ],
        "structs": [],
        "defines": [
            "AES_CONTEXT_H"
        ]
    },
    "core/crypto/crypto_core.h": {
        "classes": [
            "CryptoCore",
            "RandomGenerator",
            "MD5Context",
            "SHA1Context",
            "SHA256Context",
            "AESContext"
        ],
        "structs": [],
        "defines": [
            "CRYPTO_CORE_H"
        ]
    },
    "core/extension/extension_api_dump.h": {
        "classes": [
            "GDExtensionAPIDump"
        ],
        "structs": [],
        "defines": [
            "EXTENSION_API_DUMP_H"
        ]
    },
    "core/extension/gdnative_interface_dump.gen.h": {
        "classes": [
            "GDNativeInterfaceDump"
        ],
        "structs": [],
        "defines": [
            "GDNATIVE_INTERFACE_DUMP_H",
            "GDNATIVE_INTERFACE_H"
        ]
    },
    "core/extension/gdextension_interface.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GDEXTENSION_INTERFACE_H"
        ]
    },
    "core/extension/gdextension_interface_dump.gen.h": {
        "classes": [
            "GDExtensionInterfaceDump"
        ],
        "structs": [],
        "defines": [
            "GDEXTENSION_INTERFACE_DUMP_H"
        ]
    },
    "core/extension/gdextension_compat_hashes.h": {
        "classes": [
            "GDExtensionCompatHashes"
        ],
        "structs": [
            "Mapping"
        ],
        "defines": [
            "GDEXTENSION_COMPAT_HASHES_H"
        ]
    },
    "core/extension/gdextension_manager.h": {
        "classes": [
            "GDExtensionManager"
        ],
        "structs": [],
        "defines": [
            "GDEXTENSION_MANAGER_H"
        ]
    },
    "core/extension/gdextension.h": {
        "classes": [
            "GDExtension",
            "GDExtensionResourceLoader",
            "GDExtensionEditorPlugins",
            "GDExtensionEditorHelp"
        ],
        "structs": [
            "Extension",
            "InstanceState",
            "ClassCreationDeprecatedInfo"
        ],
        "defines": [
            "GDEXTENSION_H"
        ]
    },
    "core/config/project_settings.h": {
        "classes": [
            "ProjectSettings"
        ],
        "structs": [
            "AutoloadInfo",
            "VariantContainer"
        ],
        "defines": [
            "PROJECT_SETTINGS_H",
            "GLOBAL_DEF",
            "GLOBAL_DEF_RST",
            "GLOBAL_DEF_NOVAL",
            "GLOBAL_DEF_RST_NOVAL",
            "GLOBAL_GET",
            "GLOBAL_DEF_BASIC",
            "GLOBAL_DEF_RST_BASIC",
            "GLOBAL_DEF_NOVAL_BASIC",
            "GLOBAL_DEF_RST_NOVAL_BASIC",
            "GLOBAL_DEF_INTERNAL"
        ]
    },
    "core/config/engine.h": {
        "classes": [
            "Engine"
        ],
        "structs": [
            "Singleton"
        ],
        "defines": [
            "ENGINE_H"
        ]
    },
    "core/input/shortcut.h": {
        "classes": [
            "Shortcut"
        ],
        "structs": [],
        "defines": [
            "SHORTCUT_H"
        ]
    },
    "core/input/input_event.h": {
        "classes": [
            "InputEvent",
            "InputEventFromWindow",
            "InputEventWithModifiers",
            "InputEventKey",
            "InputEventMouse",
            "InputEventMouseButton",
            "InputEventMouseMotion",
            "InputEventJoypadMotion",
            "InputEventJoypadButton",
            "InputEventScreenTouch",
            "InputEventScreenDrag",
            "InputEventAction",
            "InputEventGesture",
            "InputEventMagnifyGesture",
            "InputEventPanGesture",
            "InputEventMIDI",
            "InputEventShortcut"
        ],
        "structs": [],
        "defines": [
            "INPUT_EVENT_H"
        ]
    },
    "core/input/input.h": {
        "classes": [
            "Input"
        ],
        "structs": [
            "ActionState",
            "DeviceState",
            "ActionStateCache",
            "VibrationInfo",
            "VelocityTrack",
            "Joypad",
            "JoyEvent",
            "JoyBinding",
            "JoyDeviceMapping"
        ],
        "defines": [
            "INPUT_H"
        ]
    },
    "core/input/input_map.h": {
        "classes": [
            "InputMap"
        ],
        "structs": [
            "Action"
        ],
        "defines": [
            "INPUT_MAP_H"
        ]
    },
    "core/input/default_controller_mappings.h": {
        "classes": [
            "DefaultControllerMappings"
        ],
        "structs": [],
        "defines": [
            "DEFAULT_CONTROLLER_MAPPINGS_H"
        ]
    },
    "core/input/input_enums.h": {
        "classes": [
            "HatDir",
            "HatMask",
            "JoyAxis",
            "JoyButton",
            "MIDIMessage",
            "MouseButton",
            "MouseButtonMask"
        ],
        "structs": [],
        "defines": [
            "INPUT_ENUMS_H"
        ]
    },
    "core/io/http_client_tcp.h": {
        "classes": [
            "HTTPClientTCP"
        ],
        "structs": [],
        "defines": [
            "HTTP_CLIENT_TCP_H"
        ]
    },
    "core/io/file_access_compressed.h": {
        "classes": [
            "FileAccessCompressed"
        ],
        "structs": [
            "ReadBlock"
        ],
        "defines": [
            "FILE_ACCESS_COMPRESSED_H"
        ]
    },
    "core/io/http_client.h": {
        "classes": [
            "HTTPClient"
        ],
        "structs": [],
        "defines": [
            "HTTP_CLIENT_H"
        ]
    },
    "core/io/stream_peer.h": {
        "classes": [
            "StreamPeer",
            "StreamPeerExtension",
            "StreamPeerBuffer"
        ],
        "structs": [],
        "defines": [
            "STREAM_PEER_H"
        ]
    },
    "core/io/image_loader.h": {
        "classes": [
            "ImageFormatLoader",
            "ImageFormatLoaderExtension",
            "ImageLoader",
            "ResourceFormatLoaderImage"
        ],
        "structs": [],
        "defines": [
            "IMAGE_LOADER_H"
        ]
    },
    "core/io/file_access_pack.h": {
        "classes": [
            "PackedData",
            "PackSource",
            "PackedSourcePCK",
            "FileAccessPack",
            "DirAccessPack"
        ],
        "structs": [
            "PackedFile",
            "PackedDir",
            "PathMD5"
        ],
        "defines": [
            "FILE_ACCESS_PACK_H",
            "PACK_HEADER_MAGIC",
            "PACK_FORMAT_VERSION"
        ]
    },
    "core/io/tcp_server.h": {
        "classes": [
            "TCPServer"
        ],
        "structs": [],
        "defines": [
            "TCP_SERVER_H"
        ]
    },
    "core/io/resource_importer.h": {
        "classes": [
            "ResourceFormatImporter",
            "ResourceImporter",
            "ResourceFormatImporterSaver"
        ],
        "structs": [
            "PathAndType",
            "SortImporterByName",
            "ImportOption"
        ],
        "defines": [
            "RESOURCE_IMPORTER_H"
        ]
    },
    "core/io/stream_peer_tls.h": {
        "classes": [
            "StreamPeerTLS"
        ],
        "structs": [],
        "defines": [
            "STREAM_PEER_TLS_H"
        ]
    },
    "core/io/net_socket.h": {
        "classes": [
            "NetSocket"
        ],
        "structs": [],
        "defines": [
            "NET_SOCKET_H"
        ]
    },
    "core/io/config_file.h": {
        "classes": [
            "ConfigFile"
        ],
        "structs": [],
        "defines": [
            "CONFIG_FILE_H"
        ]
    },
    "core/io/resource_loader.h": {
        "classes": [
            "ResourceFormatLoader",
            "ResourceLoader"
        ],
        "structs": [
            "LoadToken",
            "ThreadLoadTask"
        ],
        "defines": [
            "RESOURCE_LOADER_H"
        ]
    },
    "core/io/dir_access.h": {
        "classes": [
            "DirAccess"
        ],
        "structs": [],
        "defines": [
            "DIR_ACCESS_H"
        ]
    },
    "core/io/stream_peer_tcp.h": {
        "classes": [
            "StreamPeerTCP"
        ],
        "structs": [],
        "defines": [
            "STREAM_PEER_TCP_H"
        ]
    },
    "core/io/xml_parser.h": {
        "classes": [
            "XMLParser"
        ],
        "structs": [
            "Attribute"
        ],
        "defines": [
            "XML_PARSER_H"
        ]
    },
    "core/io/packet_peer_dtls.h": {
        "classes": [
            "PacketPeerDTLS"
        ],
        "structs": [],
        "defines": [
            "PACKET_PEER_DTLS_H"
        ]
    },
    "core/io/file_access_zip.h": {
        "classes": [
            "ZipArchive",
            "FileAccessZip"
        ],
        "structs": [
            "File",
            "Package"
        ],
        "defines": [
            "FILE_ACCESS_ZIP_H"
        ]
    },
    "core/io/file_access_memory.h": {
        "classes": [
            "FileAccessMemory"
        ],
        "structs": [],
        "defines": [
            "FILE_ACCESS_MEMORY_H"
        ]
    },
    "core/io/compression.h": {
        "classes": [
            "Compression"
        ],
        "structs": [],
        "defines": [
            "COMPRESSION_H"
        ]
    },
    "core/io/resource_saver.h": {
        "classes": [
            "ResourceFormatSaver",
            "ResourceSaver"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_SAVER_H"
        ]
    },
    "core/io/certs_compressed.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "CERTS_COMPRESSED_GEN_H",
            "_SYSTEM_CERTS_PATH",
            "BUILTIN_CERTS_ENABLED"
        ]
    },
    "core/io/dtls_server.h": {
        "classes": [
            "DTLSServer"
        ],
        "structs": [],
        "defines": [
            "DTLS_SERVER_H"
        ]
    },
    "core/io/file_access.h": {
        "classes": [
            "FileAccess"
        ],
        "structs": [],
        "defines": [
            "FILE_ACCESS_H"
        ]
    },
    "core/io/remote_filesystem_client.h": {
        "classes": [
            "RemoteFilesystemClient"
        ],
        "structs": [
            "FileCache"
        ],
        "defines": [
            "REMOTE_FILESYSTEM_CLIENT_H"
        ]
    },
    "core/io/resource_uid.h": {
        "classes": [
            "ResourceUID"
        ],
        "structs": [
            "Cache"
        ],
        "defines": [
            "RESOURCE_UID_H"
        ]
    },
    "core/io/pck_packer.h": {
        "classes": [
            "PCKPacker"
        ],
        "structs": [
            "File"
        ],
        "defines": [
            "PCK_PACKER_H"
        ]
    },
    "core/io/packet_peer.h": {
        "classes": [
            "PacketPeer",
            "PacketPeerExtension",
            "PacketPeerStream"
        ],
        "structs": [],
        "defines": [
            "PACKET_PEER_H"
        ]
    },
    "core/io/json.h": {
        "classes": [
            "JSON",
            "ResourceFormatLoaderJSON",
            "ResourceFormatSaverJSON"
        ],
        "structs": [
            "Token"
        ],
        "defines": [
            "JSON_H"
        ]
    },
    "core/io/stream_peer_gzip.h": {
        "classes": [
            "StreamPeerGZIP"
        ],
        "structs": [],
        "defines": [
            "STREAM_PEER_GZIP_H"
        ]
    },
    "core/io/packet_peer_udp.h": {
        "classes": [
            "PacketPeerUDP"
        ],
        "structs": [],
        "defines": [
            "PACKET_PEER_UDP_H"
        ]
    },
    "core/io/translation_loader_po.h": {
        "classes": [
            "TranslationLoaderPO"
        ],
        "structs": [],
        "defines": [
            "TRANSLATION_LOADER_PO_H"
        ]
    },
    "core/io/resource_format_binary.h": {
        "classes": [
            "ResourceLoaderBinary",
            "ResourceFormatLoaderBinary",
            "ResourceFormatSaverBinaryInstance",
            "ResourceFormatSaverBinary"
        ],
        "structs": [
            "ExtResource",
            "IntResource",
            "NonPersistentKey",
            "Property",
            "ResourceData"
        ],
        "defines": [
            "RESOURCE_FORMAT_BINARY_H"
        ]
    },
    "core/io/resource.h": {
        "classes": [
            "Resource",
            "ResourceCache"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_H",
            "RES_BASE_EXTENSION"
        ]
    },
    "core/io/ip_address.h": {
        "classes": [],
        "structs": [
            "IPAddress"
        ],
        "defines": [
            "IP_ADDRESS_H"
        ]
    },
    "core/io/zip_io.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "ZIP_IO_H"
        ]
    },
    "core/io/logger.h": {
        "classes": [
            "Logger",
            "StdLogger",
            "RotatedFileLogger",
            "CompositeLogger"
        ],
        "structs": [],
        "defines": [
            "LOGGER_H"
        ]
    },
    "core/io/ip.h": {
        "classes": [
            "IP"
        ],
        "structs": [
            "Interface_Info"
        ],
        "defines": [
            "IP_H"
        ]
    },
    "core/io/marshalls.h": {
        "classes": [
            "EncodedObjectAsID"
        ],
        "structs": [],
        "defines": [
            "MARSHALLS_H"
        ]
    },
    "core/io/plist.h": {
        "classes": [
            "PList",
            "PListNode"
        ],
        "structs": [
            "PListTrailer"
        ],
        "defines": [
            "PLIST_H"
        ]
    },
    "core/io/udp_server.h": {
        "classes": [
            "UDPServer"
        ],
        "structs": [
            "Peer"
        ],
        "defines": [
            "UDP_SERVER_H"
        ]
    },
    "core/io/packed_data_container.h": {
        "classes": [
            "PackedDataContainer",
            "PackedDataContainerRef"
        ],
        "structs": [
            "DictKey"
        ],
        "defines": [
            "PACKED_DATA_CONTAINER_H"
        ]
    },
    "core/io/image.h": {
        "classes": [
            "Image"
        ],
        "structs": [],
        "defines": [
            "IMAGE_H"
        ]
    },
    "core/io/missing_resource.h": {
        "classes": [
            "MissingResource"
        ],
        "structs": [],
        "defines": [
            "MISSING_RESOURCE_H",
            "META_PROPERTY_MISSING_RESOURCES",
            "META_MISSING_RESOURCES"
        ]
    },
    "core/io/file_access_encrypted.h": {
        "classes": [
            "FileAccessEncrypted"
        ],
        "structs": [],
        "defines": [
            "FILE_ACCESS_ENCRYPTED_H",
            "ENCRYPTED_HEADER_MAGIC"
        ]
    },
    "core/math/geometry_2d.h": {
        "classes": [
            "Geometry2D"
        ],
        "structs": [],
        "defines": [
            "GEOMETRY_2D_H"
        ]
    },
    "core/math/a_star_grid_2d.h": {
        "classes": [
            "AStarGrid2D"
        ],
        "structs": [
            "Point",
            "SortPoints"
        ],
        "defines": [
            "A_STAR_GRID_2D_H"
        ]
    },
    "core/math/basis.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "BASIS_H"
        ]
    },
    "core/math/math_funcs.h": {
        "classes": [
            "Math"
        ],
        "structs": [],
        "defines": [
            "MATH_FUNCS_H"
        ]
    },
    "core/math/math_defs.h": {
        "classes": [
            "EulerOrder"
        ],
        "structs": [],
        "defines": [
            "MATH_DEFS_H",
            "CMP_EPSILON",
            "CMP_EPSILON2",
            "CMP_NORMALIZE_TOLERANCE",
            "CMP_POINT_IN_PLANE_EPSILON",
            "Math_SQRT12",
            "Math_SQRT2",
            "Math_LN2",
            "Math_TAU",
            "Math_PI",
            "Math_E",
            "MATH_CHECKS",
            "UNIT_EPSILON",
            "UNIT_EPSILON",
            "USEC_TO_SEC"
        ]
    },
    "core/math/bvh_tree.h": {
        "classes": [
            "BVH_IterativeInfo",
            "BVH_DummyPairTestFunction",
            "BVH_DummyCullTestFunction",
            "BVH_Tree"
        ],
        "structs": [
            "BVHCommon",
            "BVHHandle"
        ],
        "defines": [
            "BVH_TREE_H",
            "BVHABB_CLASS",
            "BVH_EXPAND_LEAF_AABBS",
            "BVH_VERBOSE",
            "BVH_VERBOSE_TREE",
            "BVH_VERBOSE_PAIRING",
            "BVH_VERBOSE_MOVES",
            "BVH_VERBOSE_FRAME",
            "BVH_CHECKS",
            "BVH_INTEGRITY_CHECKS",
            "BVH_ASSERT",
            "BVH_ASSERT",
            "VERBOSE_PRINT",
            "VERBOSE_PRINT"
        ]
    },
    "core/math/projection.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PROJECTION_H"
        ]
    },
    "core/math/face3.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "FACE3_H",
            "TEST_AXIS"
        ]
    },
    "core/math/geometry_3d.h": {
        "classes": [
            "Geometry3D"
        ],
        "structs": [
            "MeshData",
            "Face",
            "Edge"
        ],
        "defines": [
            "GEOMETRY_3D_H",
            "FINDMINMAX",
            "AXISTEST_X01",
            "AXISTEST_X2",
            "AXISTEST_Y02",
            "AXISTEST_Y1",
            "AXISTEST_Z12",
            "AXISTEST_Z0",
            "STP"
        ]
    },
    "core/math/vector2.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VECTOR2_H"
        ]
    },
    "core/math/static_raycaster.h": {
        "classes": [
            "StaticRaycaster"
        ],
        "structs": [],
        "defines": [
            "STATIC_RAYCASTER_H",
            "__aligned",
            "__aligned"
        ]
    },
    "core/math/random_number_generator.h": {
        "classes": [
            "RandomNumberGenerator"
        ],
        "structs": [],
        "defines": [
            "RANDOM_NUMBER_GENERATOR_H"
        ]
    },
    "core/math/quaternion.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "QUATERNION_H"
        ]
    },
    "core/math/color.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "COLOR_H"
        ]
    },
    "core/math/plane.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PLANE_H"
        ]
    },
    "core/math/rect2.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "RECT2_H"
        ]
    },
    "core/math/vector4i.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VECTOR4I_H"
        ]
    },
    "core/math/math_fieldwise.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MATH_FIELDWISE_H"
        ]
    },
    "core/math/vector3i.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VECTOR3I_H"
        ]
    },
    "core/math/bvh.h": {
        "classes": [
            "BVH_Manager",
            "BVHLockedFunction"
        ],
        "structs": [],
        "defines": [
            "BVH_H",
            "BVHTREE_CLASS",
            "BVH_LOCKED_FUNCTION"
        ]
    },
    "core/math/expression.h": {
        "classes": [
            "Expression"
        ],
        "structs": [
            "Input",
            "Token",
            "ENode",
            "ExpressionNode",
            "InputNode",
            "ConstantNode",
            "OperatorNode",
            "SelfNode",
            "IndexNode",
            "NamedIndexNode",
            "ConstructorNode",
            "CallNode",
            "ArrayNode",
            "DictionaryNode",
            "BuiltinFuncNode"
        ],
        "defines": [
            "EXPRESSION_H"
        ]
    },
    "core/math/rect2i.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "RECT2I_H"
        ]
    },
    "core/math/bvh_abb.h": {
        "classes": [],
        "structs": [
            "BVH_ABB",
            "ConvexHull",
            "Segment"
        ],
        "defines": [
            "BVH_ABB_H"
        ]
    },
    "core/math/audio_frame.h": {
        "classes": [],
        "structs": [
            "AudioFrame"
        ],
        "defines": [
            "AUDIO_FRAME_H"
        ]
    },
    "core/math/vector4.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VECTOR4_H"
        ]
    },
    "core/math/vector2i.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VECTOR2I_H"
        ]
    },
    "core/math/convex_hull.h": {
        "classes": [
            "ConvexHullComputer",
            "Edge"
        ],
        "structs": [],
        "defines": [
            "CONVEX_HULL_H"
        ]
    },
    "core/math/quick_hull.h": {
        "classes": [
            "QuickHull"
        ],
        "structs": [
            "Edge",
            "Face",
            "FaceConnect",
            "RetFaceConnect"
        ],
        "defines": [
            "QUICK_HULL_H"
        ]
    },
    "core/math/random_pcg.h": {
        "classes": [
            "RandomPCG"
        ],
        "structs": [],
        "defines": [
            "RANDOM_PCG_H",
            "CLZ32",
            "CLZ32",
            "LDEXP",
            "LDEXPF",
            "LDEXP",
            "LDEXPF"
        ]
    },
    "core/math/triangulate.h": {
        "classes": [
            "Triangulate"
        ],
        "structs": [],
        "defines": [
            "TRIANGULATE_H"
        ]
    },
    "core/math/delaunay_2d.h": {
        "classes": [
            "Delaunay2D"
        ],
        "structs": [
            "Triangle",
            "Edge"
        ],
        "defines": [
            "DELAUNAY_2D_H"
        ]
    },
    "core/math/disjoint_set.h": {
        "classes": [
            "DisjointSet"
        ],
        "structs": [
            "Element"
        ],
        "defines": [
            "DISJOINT_SET_H"
        ]
    },
    "core/math/a_star.h": {
        "classes": [
            "AStar3D",
            "AStar2D"
        ],
        "structs": [
            "Point",
            "SortPoints",
            "Segment"
        ],
        "defines": [
            "A_STAR_H"
        ]
    },
    "core/math/dynamic_bvh.h": {
        "classes": [
            "DynamicBVH"
        ],
        "structs": [
            "ID",
            "Volume",
            "Node",
            "DefaultQueryResult"
        ],
        "defines": [
            "DYNAMIC_BVH_H"
        ]
    },
    "core/math/transform_2d.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TRANSFORM_2D_H"
        ]
    },
    "core/math/transform_3d.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TRANSFORM_3D_H"
        ]
    },
    "core/math/triangle_mesh.h": {
        "classes": [
            "TriangleMesh"
        ],
        "structs": [
            "Triangle",
            "BVH",
            "BVHCmpX",
            "BVHCmpY",
            "BVHCmpZ"
        ],
        "defines": [
            "TRIANGLE_MESH_H"
        ]
    },
    "core/math/aabb.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "AABB_H"
        ]
    },
    "core/math/vector3.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VECTOR3_H"
        ]
    },
    "core/math/delaunay_3d.h": {
        "classes": [
            "Delaunay3D"
        ],
        "structs": [
            "GridPos",
            "Simplex",
            "Triangle",
            "TriangleHasher",
            "OutputSimplex"
        ],
        "defines": [
            "DELAUNAY_3D_H"
        ]
    },
    "core/object/method_bind.h": {
        "classes": [
            "MethodBind",
            "MethodBindVarArgBase",
            "MethodBindVarArgT",
            "MethodBindVarArgTR",
            "MethodBindT",
            "MethodBindTC",
            "MethodBindTR",
            "MethodBindTRC",
            "MethodBindTS",
            "MethodBindTRS"
        ],
        "structs": [],
        "defines": [
            "METHOD_BIND_H",
            "MB_T",
            "MB_T"
        ]
    },
    "core/object/object_id.h": {
        "classes": [
            "ObjectID"
        ],
        "structs": [],
        "defines": [
            "OBJECT_ID_H"
        ]
    },
    "core/object/callable_method_pointer.h": {
        "classes": [
            "CallableCustomMethodPointerBase",
            "CallableCustomMethodPointer",
            "CallableCustomMethodPointerRet",
            "CallableCustomMethodPointerRetC",
            "CallableCustomStaticMethodPointer",
            "CallableCustomStaticMethodPointerRet"
        ],
        "structs": [
            "Data",
            "Data",
            "Data",
            "Data",
            "Data"
        ],
        "defines": [
            "CALLABLE_METHOD_POINTER_H",
            "callable_mp",
            "callable_mp",
            "callable_mp_static",
            "callable_mp_static"
        ]
    },
    "core/object/script_language_extension.h": {
        "classes": [
            "ScriptExtension",
            "ScriptLanguageExtension",
            "ScriptInstanceExtension"
        ],
        "structs": [
            "DeprecatedNativeInfo"
        ],
        "defines": [
            "SCRIPT_LANGUAGE_EXTENSION_H"
        ]
    },
    "core/object/class_db.h": {
        "classes": [
            "ClassDB"
        ],
        "structs": [
            "MethodDefinition",
            "PropertySetGet",
            "ClassInfo",
            "EnumInfo",
            "NativeStruct"
        ],
        "defines": [
            "CLASS_DB_H",
            "DEFVAL",
            "D_METHOD",
            "BIND_ENUM_CONSTANT",
            "BIND_BITFIELD_FLAG",
            "BIND_CONSTANT",
            "BIND_METHOD_ERR_RETURN_DOC",
            "BIND_METHOD_ERR_RETURN_DOC",
            "GDREGISTER_CLASS",
            "GDREGISTER_VIRTUAL_CLASS",
            "GDREGISTER_ABSTRACT_CLASS",
            "GDREGISTER_INTERNAL_CLASS",
            "GDREGISTER_RUNTIME_CLASS",
            "GDREGISTER_NATIVE_STRUCT"
        ]
    },
    "core/object/script_instance.h": {
        "classes": [
            "ScriptInstance"
        ],
        "structs": [],
        "defines": [
            "SCRIPT_INSTANCE_H"
        ]
    },
    "core/object/script_language.h": {
        "classes": [
            "ScriptServer",
            "Script",
            "ScriptCodeCompletionCache",
            "ScriptLanguage",
            "PlaceHolderScriptInstance"
        ],
        "structs": [
            "GlobalScriptClass",
            "Warning",
            "ScriptError",
            "ScriptTemplate",
            "CodeCompletionOption",
            "LookupResult",
            "StackInfo",
            "ProfilingInfo"
        ],
        "defines": [
            "SCRIPT_LANGUAGE_H"
        ]
    },
    "core/object/object.h": {
        "classes": [
            "Object",
            "ObjectDB"
        ],
        "structs": [
            "PropertyInfo",
            "MethodInfo",
            "ObjectGDExtension",
            "Connection",
            "SignalData",
            "Slot",
            "InstanceBinding",
            "VirtualMethodTracker",
            "ObjectSlot"
        ],
        "defines": [
            "OBJECT_H",
            "ADD_SIGNAL",
            "ADD_PROPERTY",
            "ADD_PROPERTYI",
            "ADD_PROPERTY_DEFAULT",
            "ADD_GROUP",
            "ADD_GROUP_INDENT",
            "ADD_SUBGROUP",
            "ADD_SUBGROUP_INDENT",
            "ADD_LINKED_PROPERTY",
            "ADD_ARRAY_COUNT",
            "ADD_ARRAY_COUNT_WITH_USAGE_FLAGS",
            "ADD_ARRAY",
            "MAKE_RESOURCE_TYPE_HINT",
            "GDVIRTUAL_CALL",
            "GDVIRTUAL_CALL_PTR",
            "GDVIRTUAL_REQUIRED_CALL",
            "GDVIRTUAL_REQUIRED_CALL_PTR",
            "GDVIRTUAL_BIND",
            "GDVIRTUAL_BIND",
            "GDVIRTUAL_IS_OVERRIDDEN",
            "GDVIRTUAL_IS_OVERRIDDEN_PTR",
            "REVERSE_GET_PROPERTY_LIST",
            "UNREVERSE_GET_PROPERTY_LIST",
            "GDCLASS",
            "OBJ_SAVE_TYPE",
            "MTVIRTUAL",
            "MTVIRTUAL",
            "OBJECTDB_VALIDATOR_BITS",
            "OBJECTDB_VALIDATOR_MASK",
            "OBJECTDB_SLOT_MAX_COUNT_BITS",
            "OBJECTDB_SLOT_MAX_COUNT_MASK",
            "OBJECTDB_REFERENCE_BIT"
        ]
    },
    "core/object/message_queue.h": {
        "classes": [
            "CallQueue",
            "MessageQueue"
        ],
        "structs": [
            "Page",
            "Message"
        ],
        "defines": [
            "MESSAGE_QUEUE_H"
        ]
    },
    "core/object/undo_redo.h": {
        "classes": [
            "UndoRedo"
        ],
        "structs": [
            "Operation",
            "Action"
        ],
        "defines": [
            "UNDO_REDO_H"
        ]
    },
    "core/object/worker_thread_pool.h": {
        "classes": [
            "WorkerThreadPool"
        ],
        "structs": [
            "BaseTemplateUserdata",
            "Group",
            "Task",
            "ThreadData",
            "TaskUserData",
            "GroupUserData"
        ],
        "defines": [
            "WORKER_THREAD_POOL_H"
        ]
    },
    "core/object/ref_counted.h": {
        "classes": [
            "RefCounted",
            "Ref",
            "WeakRef"
        ],
        "structs": [],
        "defines": [
            "REF_COUNTED_H"
        ]
    },
    "core/debugger/engine_debugger.h": {
        "classes": [
            "EngineDebugger",
            "Profiler",
            "Capture"
        ],
        "structs": [],
        "defines": [
            "ENGINE_DEBUGGER_H"
        ]
    },
    "core/debugger/engine_profiler.h": {
        "classes": [
            "EngineProfiler"
        ],
        "structs": [],
        "defines": [
            "ENGINE_PROFILER_H"
        ]
    },
    "core/debugger/script_debugger.h": {
        "classes": [
            "ScriptDebugger"
        ],
        "structs": [],
        "defines": [
            "SCRIPT_DEBUGGER_H"
        ]
    },
    "core/debugger/remote_debugger_peer.h": {
        "classes": [
            "RemoteDebuggerPeer",
            "RemoteDebuggerPeerTCP"
        ],
        "structs": [],
        "defines": [
            "REMOTE_DEBUGGER_PEER_H"
        ]
    },
    "core/debugger/debugger_marshalls.h": {
        "classes": [],
        "structs": [
            "DebuggerMarshalls",
            "ScriptStackVariable",
            "ScriptStackDump",
            "OutputError"
        ],
        "defines": [
            "DEBUGGER_MARSHALLS_H"
        ]
    },
    "core/debugger/local_debugger.h": {
        "classes": [
            "LocalDebugger"
        ],
        "structs": [],
        "defines": [
            "LOCAL_DEBUGGER_H"
        ]
    },
    "core/debugger/remote_debugger.h": {
        "classes": [
            "RemoteDebugger"
        ],
        "structs": [
            "OutputString",
            "Message"
        ],
        "defines": [
            "REMOTE_DEBUGGER_H"
        ]
    },
    "core/variant/variant_callable.h": {
        "classes": [
            "VariantCallable"
        ],
        "structs": [],
        "defines": [
            "VARIANT_CALLABLE_H"
        ]
    },
    "core/variant/binder_common.h": {
        "classes": [],
        "structs": [
            "VariantCaster",
            "VariantObjectClassChecker",
            "VariantCasterAndValidate"
        ],
        "defines": [
            "BINDER_COMMON_H",
            "VARIANT_ENUM_CAST",
            "VARIANT_BITFIELD_CAST"
        ]
    },
    "core/variant/variant_op.h": {
        "classes": [
            "OperatorEvaluatorAdd",
            "OperatorEvaluatorSub",
            "OperatorEvaluatorMul",
            "OperatorEvaluatorPow",
            "OperatorEvaluatorXForm",
            "OperatorEvaluatorXFormInv",
            "OperatorEvaluatorDiv",
            "OperatorEvaluatorDivNZ",
            "OperatorEvaluatorMod",
            "OperatorEvaluatorModNZ",
            "OperatorEvaluatorNeg",
            "OperatorEvaluatorPos",
            "OperatorEvaluatorShiftLeft",
            "OperatorEvaluatorShiftRight",
            "OperatorEvaluatorBitOr",
            "OperatorEvaluatorBitAnd",
            "OperatorEvaluatorBitXor",
            "OperatorEvaluatorBitNeg",
            "OperatorEvaluatorEqual",
            "OperatorEvaluatorEqualObject",
            "OperatorEvaluatorEqualObjectNil",
            "OperatorEvaluatorEqualNilObject",
            "OperatorEvaluatorNotEqual",
            "OperatorEvaluatorNotEqualObject",
            "OperatorEvaluatorNotEqualObjectNil",
            "OperatorEvaluatorNotEqualNilObject",
            "OperatorEvaluatorLess",
            "OperatorEvaluatorLessEqual",
            "OperatorEvaluatorGreater",
            "OperatorEvaluatorGreaterEqual",
            "OperatorEvaluatorAnd",
            "OperatorEvaluatorOr",
            "OperatorEvaluatorXor",
            "OperatorEvaluatorNot",
            "OperatorEvaluatorAddArray",
            "OperatorEvaluatorAppendArray",
            "OperatorEvaluatorStringConcat",
            "OperatorEvaluatorStringFormat",
            "OperatorEvaluatorAlwaysTrue",
            "OperatorEvaluatorAlwaysFalse",
            "m_class_name",
            "OperatorEvaluatorNotBool",
            "OperatorEvaluatorNotInt",
            "OperatorEvaluatorNotFloat",
            "OperatorEvaluatorNotObject",
            "OperatorEvaluatorInArrayFind",
            "OperatorEvaluatorInArrayFindNil",
            "OperatorEvaluatorInArrayFindObject",
            "OperatorEvaluatorInDictionaryHas",
            "OperatorEvaluatorInDictionaryHasNil",
            "OperatorEvaluatorInDictionaryHasObject",
            "OperatorEvaluatorObjectHasPropertyString",
            "OperatorEvaluatorObjectHasPropertyStringName"
        ],
        "structs": [],
        "defines": [
            "VARIANT_OP_H",
            "XOR_OP",
            "OP_EVALUATOR"
        ]
    },
    "core/variant/variant_setget.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VARIANT_SETGET_H",
            "SETGET_STRUCT",
            "SETGET_NUMBER_STRUCT",
            "SETGET_STRUCT_CUSTOM",
            "SETGET_NUMBER_STRUCT_CUSTOM",
            "SETGET_STRUCT_FUNC",
            "SETGET_NUMBER_STRUCT_FUNC",
            "SETGET_STRUCT_FUNC_INDEX"
        ]
    },
    "core/variant/variant_destruct.h": {
        "classes": [],
        "structs": [
            "VariantDestruct"
        ],
        "defines": [
            "VARIANT_DESTRUCT_H",
            "MAKE_PTRDESTRUCT"
        ]
    },
    "core/variant/variant_parser.h": {
        "classes": [
            "VariantParser",
            "VariantWriter"
        ],
        "structs": [
            "Stream",
            "StreamFile",
            "StreamString",
            "ResourceParser",
            "Token",
            "Tag"
        ],
        "defines": [
            "VARIANT_PARSER_H"
        ]
    },
    "core/variant/variant_internal.h": {
        "classes": [
            "VariantInternal"
        ],
        "structs": [
            "VariantGetInternalPtr",
            "VariantInternalAccessor",
            "VariantInitializer",
            "VariantDefaultInitializer",
            "VariantTypeChanger",
            "VariantTypeAdjust",
            "VariantTypeConstructor"
        ],
        "defines": [
            "VARIANT_INTERNAL_H",
            "VARIANT_ACCESSOR_NUMBER",
            "INITIALIZER_INT"
        ]
    },
    "core/variant/callable.h": {
        "classes": [
            "Callable",
            "CallableCustom",
            "Signal"
        ],
        "structs": [
            "CallError",
            "CallableComparator"
        ],
        "defines": [
            "CALLABLE_H"
        ]
    },
    "core/variant/variant_construct.h": {
        "classes": [
            "VariantConstructor",
            "VariantConstructorObject",
            "VariantConstructorNilObject",
            "VariantConstructorFromString",
            "VariantConstructorCallableArgs",
            "VariantConstructorSignalArgs",
            "VariantConstructorTypedArray",
            "VariantConstructorToArray",
            "VariantConstructorFromArray",
            "VariantConstructorNil",
            "VariantConstructNoArgs",
            "VariantConstructNoArgsNil",
            "VariantConstructNoArgsObject"
        ],
        "structs": [
            "PtrConstruct"
        ],
        "defines": [
            "VARIANT_CONSTRUCT_H",
            "MAKE_PTRCONSTRUCT"
        ]
    },
    "core/variant/container_type_validate.h": {
        "classes": [],
        "structs": [
            "ContainerTypeValidate"
        ],
        "defines": [
            "CONTAINER_TYPE_VALIDATE_H"
        ]
    },
    "core/variant/method_ptrcall.h": {
        "classes": [],
        "structs": [
            "PtrToArg"
        ],
        "defines": [
            "METHOD_PTRCALL_H",
            "MAKE_PTRARG",
            "MAKE_PTRARGCONV",
            "MAKE_PTRARG_BY_REFERENCE",
            "MAKE_VECARG",
            "MAKE_VECARG_ALT",
            "MAKE_VECARR",
            "MAKE_DVECARR",
            "MAKE_STRINGCONV_BY_REFERENCE"
        ]
    },
    "core/variant/dictionary.h": {
        "classes": [
            "Dictionary"
        ],
        "structs": [],
        "defines": [
            "DICTIONARY_H"
        ]
    },
    "core/variant/array.h": {
        "classes": [
            "Array"
        ],
        "structs": [],
        "defines": [
            "ARRAY_H"
        ]
    },
    "core/variant/callable_bind.h": {
        "classes": [
            "CallableCustomBind",
            "CallableCustomUnbind"
        ],
        "structs": [],
        "defines": [
            "CALLABLE_BIND_H"
        ]
    },
    "core/variant/type_info.h": {
        "classes": [
            "BitField"
        ],
        "structs": [
            "EnableIf",
            "TypeInherits",
            "ZeroInitializer"
        ],
        "defines": [
            "TYPE_INFO_H",
            "MAKE_TYPE_INFO",
            "MAKE_TYPE_INFO_WITH_META",
            "MAKE_TEMPLATE_TYPE_INFO",
            "TEMPL_MAKE_ENUM_TYPE_INFO",
            "MAKE_ENUM_TYPE_INFO",
            "TEMPL_MAKE_BITFIELD_TYPE_INFO",
            "MAKE_BITFIELD_TYPE_INFO",
            "CLASS_INFO",
            "ZERO_INITIALIZER_NUMBER"
        ]
    },
    "core/variant/typed_array.h": {
        "classes": [
            "TypedArray"
        ],
        "structs": [],
        "defines": [
            "TYPED_ARRAY_H",
            "MAKE_TYPED_ARRAY",
            "MAKE_TYPED_ARRAY_INFO"
        ]
    },
    "core/variant/variant_utility.h": {
        "classes": [],
        "structs": [
            "VariantUtilityFunctions"
        ],
        "defines": [
            "VARIANT_UTILITY_H"
        ]
    },
    "core/variant/native_ptr.h": {
        "classes": [],
        "structs": [
            "GDExtensionConstPtr",
            "GDExtensionPtr"
        ],
        "defines": [
            "NATIVE_PTR_H",
            "GDVIRTUAL_NATIVE_PTR"
        ]
    },
    "core/variant/variant.h": {
        "classes": [
            "Variant"
        ],
        "structs": [
            "Pools",
            "ObjData",
            "PackedArrayRefBase",
            "PackedArrayRef",
            "VariantHasher",
            "VariantComparator",
            "StringLikeVariantComparator"
        ],
        "defines": [
            "VARIANT_H",
            "VARIANT_ENUM_CLASS_CONSTRUCTOR"
        ]
    },
    "core/templates/vmap.h": {
        "classes": [
            "VMap"
        ],
        "structs": [
            "Pair"
        ],
        "defines": [
            "VMAP_H"
        ]
    },
    "core/templates/simple_type.h": {
        "classes": [],
        "structs": [
            "GetSimpleTypeT"
        ],
        "defines": [
            "SIMPLE_TYPE_H"
        ]
    },
    "core/templates/paged_array.h": {
        "classes": [
            "PagedArrayPool",
            "PagedArray"
        ],
        "structs": [
            "PageInfo"
        ],
        "defines": [
            "PAGED_ARRAY_H"
        ]
    },
    "core/templates/hash_map.h": {
        "classes": [
            "HashMap"
        ],
        "structs": [
            "HashMapElement",
            "ConstIterator",
            "Iterator"
        ],
        "defines": [
            "HASH_MAP_H"
        ]
    },
    "core/templates/cowdata.h": {
        "classes": [
            "CowData"
        ],
        "structs": [],
        "defines": [
            "COWDATA_H"
        ]
    },
    "core/templates/safe_refcount.h": {
        "classes": [
            "SafeNumeric",
            "SafeFlag",
            "SafeRefCount"
        ],
        "structs": [],
        "defines": [
            "SAFE_REFCOUNT_H",
            "SAFE_NUMERIC_TYPE_PUN_GUARANTEES",
            "SAFE_FLAG_TYPE_PUN_GUARANTEES"
        ]
    },
    "core/templates/pass_func.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PASS_FUNC_H",
            "PASS0R",
            "PASS0RC",
            "PASS1R",
            "PASS1RC",
            "PASS2R",
            "PASS2RC",
            "PASS3R",
            "PASS3RC",
            "PASS4R",
            "PASS4RC",
            "PASS5R",
            "PASS5RC",
            "PASS6R",
            "PASS6RC",
            "PASS0",
            "PASS1",
            "PASS1C",
            "PASS2",
            "PASS2C",
            "PASS3",
            "PASS4",
            "PASS5",
            "PASS6",
            "PASS7",
            "PASS8",
            "PASS9",
            "PASS10",
            "PASS11",
            "PASS12",
            "PASS13",
            "PASS14",
            "PASS15"
        ]
    },
    "core/templates/hashfuncs.h": {
        "classes": [],
        "structs": [
            "HashMapHasherDefault",
            "HashableHasher",
            "HashMapComparatorDefault"
        ],
        "defines": [
            "HASHFUNCS_H",
            "HASH_MURMUR3_SEED"
        ]
    },
    "core/templates/ring_buffer.h": {
        "classes": [
            "RingBuffer"
        ],
        "structs": [],
        "defines": [
            "RING_BUFFER_H"
        ]
    },
    "core/templates/rb_set.h": {
        "classes": [
            "RBSet",
            "Element"
        ],
        "structs": [
            "Iterator",
            "ConstIterator",
            "_Data"
        ],
        "defines": [
            "RB_SET_H"
        ]
    },
    "core/templates/search_array.h": {
        "classes": [
            "SearchArray"
        ],
        "structs": [],
        "defines": [
            "SEARCH_ARRAY_H"
        ]
    },
    "core/templates/bin_sorted_array.h": {
        "classes": [
            "BinSortedArray"
        ],
        "structs": [],
        "defines": [
            "BIN_SORTED_ARRAY_H"
        ]
    },
    "core/templates/list.h": {
        "classes": [
            "List",
            "Element"
        ],
        "structs": [
            "Iterator",
            "ConstIterator",
            "_Data",
            "AuxiliaryComparator"
        ],
        "defines": [
            "LIST_H"
        ]
    },
    "core/templates/safe_list.h": {
        "classes": [
            "SafeList",
            "Iterator"
        ],
        "structs": [
            "SafeListNode"
        ],
        "defines": [
            "SAFE_LIST_H"
        ]
    },
    "core/templates/lru.h": {
        "classes": [
            "LRUCache"
        ],
        "structs": [
            "Pair"
        ],
        "defines": [
            "LRU_H"
        ]
    },
    "core/templates/sort_array.h": {
        "classes": [
            "SortArray"
        ],
        "structs": [
            "_DefaultComparator"
        ],
        "defines": [
            "SORT_ARRAY_H",
            "ERR_BAD_COMPARE",
            "SORT_ARRAY_VALIDATE_ENABLED",
            "SORT_ARRAY_VALIDATE_ENABLED"
        ]
    },
    "core/templates/rb_map.h": {
        "classes": [
            "RBMap",
            "Element"
        ],
        "structs": [
            "Iterator",
            "ConstIterator",
            "_Data"
        ],
        "defines": [
            "RB_MAP_H"
        ]
    },
    "core/templates/paged_allocator.h": {
        "classes": [
            "PagedAllocator"
        ],
        "structs": [],
        "defines": [
            "PAGED_ALLOCATOR_H"
        ]
    },
    "core/templates/self_list.h": {
        "classes": [
            "SelfList",
            "List"
        ],
        "structs": [],
        "defines": [
            "SELF_LIST_H"
        ]
    },
    "core/templates/pair.h": {
        "classes": [],
        "structs": [
            "Pair",
            "PairSort",
            "PairHash",
            "KeyValue",
            "KeyValueSort"
        ],
        "defines": [
            "PAIR_H"
        ]
    },
    "core/templates/pooled_list.h": {
        "classes": [
            "PooledList",
            "TrackedPooledList"
        ],
        "structs": [],
        "defines": [
            "POOLED_LIST_H"
        ]
    },
    "core/templates/local_vector.h": {
        "classes": [
            "LocalVector"
        ],
        "structs": [
            "Iterator",
            "ConstIterator"
        ],
        "defines": [
            "LOCAL_VECTOR_H"
        ]
    },
    "core/templates/command_queue_mt.h": {
        "classes": [
            "CommandQueueMT"
        ],
        "structs": [
            "SyncSemaphore",
            "CommandBase",
            "SyncCommand"
        ],
        "defines": [
            "COMMAND_QUEUE_MT_H",
            "COMMA",
            "_COMMA_0",
            "_COMMA_1",
            "_COMMA_2",
            "_COMMA_3",
            "_COMMA_4",
            "_COMMA_5",
            "_COMMA_6",
            "_COMMA_7",
            "_COMMA_8",
            "_COMMA_9",
            "_COMMA_10",
            "_COMMA_11",
            "_COMMA_12",
            "_COMMA_13",
            "_COMMA_14",
            "_COMMA_15",
            "COMMA_SEP_LIST",
            "_COMMA_SEP_LIST_15",
            "_COMMA_SEP_LIST_14",
            "_COMMA_SEP_LIST_13",
            "_COMMA_SEP_LIST_12",
            "_COMMA_SEP_LIST_11",
            "_COMMA_SEP_LIST_10",
            "_COMMA_SEP_LIST_9",
            "_COMMA_SEP_LIST_8",
            "_COMMA_SEP_LIST_7",
            "_COMMA_SEP_LIST_6",
            "_COMMA_SEP_LIST_5",
            "_COMMA_SEP_LIST_4",
            "_COMMA_SEP_LIST_3",
            "_COMMA_SEP_LIST_2",
            "_COMMA_SEP_LIST_1",
            "_COMMA_SEP_LIST_0",
            "SEMIC_SEP_LIST",
            "_SEMIC_SEP_LIST_15",
            "_SEMIC_SEP_LIST_14",
            "_SEMIC_SEP_LIST_13",
            "_SEMIC_SEP_LIST_12",
            "_SEMIC_SEP_LIST_11",
            "_SEMIC_SEP_LIST_10",
            "_SEMIC_SEP_LIST_9",
            "_SEMIC_SEP_LIST_8",
            "_SEMIC_SEP_LIST_7",
            "_SEMIC_SEP_LIST_6",
            "_SEMIC_SEP_LIST_5",
            "_SEMIC_SEP_LIST_4",
            "_SEMIC_SEP_LIST_3",
            "_SEMIC_SEP_LIST_2",
            "_SEMIC_SEP_LIST_1",
            "_SEMIC_SEP_LIST_0",
            "SPACE_SEP_LIST",
            "_SPACE_SEP_LIST_15",
            "_SPACE_SEP_LIST_14",
            "_SPACE_SEP_LIST_13",
            "_SPACE_SEP_LIST_12",
            "_SPACE_SEP_LIST_11",
            "_SPACE_SEP_LIST_10",
            "_SPACE_SEP_LIST_9",
            "_SPACE_SEP_LIST_8",
            "_SPACE_SEP_LIST_7",
            "_SPACE_SEP_LIST_6",
            "_SPACE_SEP_LIST_5",
            "_SPACE_SEP_LIST_4",
            "_SPACE_SEP_LIST_3",
            "_SPACE_SEP_LIST_2",
            "_SPACE_SEP_LIST_1",
            "_SPACE_SEP_LIST_0",
            "ARG",
            "PARAM",
            "TYPE_PARAM",
            "PARAM_DECL",
            "DECL_CMD",
            "DECL_CMD_RET",
            "DECL_CMD_SYNC",
            "TYPE_ARG",
            "CMD_TYPE",
            "CMD_ASSIGN_PARAM",
            "DECL_PUSH",
            "CMD_RET_TYPE",
            "DECL_PUSH_AND_RET",
            "CMD_SYNC_TYPE",
            "DECL_PUSH_AND_SYNC",
            "MAX_CMD_PARAMS"
        ]
    },
    "core/templates/vset.h": {
        "classes": [
            "VSet"
        ],
        "structs": [],
        "defines": [
            "VSET_H"
        ]
    },
    "core/templates/rid.h": {
        "classes": [
            "RID"
        ],
        "structs": [],
        "defines": [
            "RID_H"
        ]
    },
    "core/templates/vector.h": {
        "classes": [
            "VectorWriteProxy",
            "Vector"
        ],
        "structs": [
            "Iterator",
            "ConstIterator"
        ],
        "defines": [
            "VECTOR_H"
        ]
    },
    "core/templates/hash_set.h": {
        "classes": [
            "HashSet"
        ],
        "structs": [
            "Iterator"
        ],
        "defines": [
            "HASH_SET_H"
        ]
    },
    "core/templates/rid_owner.h": {
        "classes": [
            "RID_AllocBase",
            "RID_Alloc",
            "RID_PtrOwner",
            "RID_Owner"
        ],
        "structs": [],
        "defines": [
            "RID_OWNER_H"
        ]
    },
    "core/templates/oa_hash_map.h": {
        "classes": [
            "OAHashMap"
        ],
        "structs": [
            "Iterator"
        ],
        "defines": [
            "OA_HASH_MAP_H"
        ]
    },
    "core/os/time.h": {
        "classes": [
            "Time"
        ],
        "structs": [],
        "defines": [
            "TIME_H"
        ]
    },
    "core/os/semaphore.h": {
        "classes": [
            "Semaphore",
            "Semaphore"
        ],
        "structs": [],
        "defines": [
            "SEMAPHORE_H",
            "MINGW_STDTHREAD_REDUNDANCY_WARNING",
            "THREADING_NAMESPACE",
            "THREADING_NAMESPACE"
        ]
    },
    "core/os/condition_variable.h": {
        "classes": [
            "ConditionVariable",
            "ConditionVariable"
        ],
        "structs": [],
        "defines": [
            "CONDITION_VARIABLE_H",
            "MINGW_STDTHREAD_REDUNDANCY_WARNING",
            "THREADING_NAMESPACE",
            "THREADING_NAMESPACE"
        ]
    },
    "core/os/time_enums.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TIME_ENUMS_H"
        ]
    },
    "core/os/midi_driver.h": {
        "classes": [
            "MIDIDriver"
        ],
        "structs": [],
        "defines": [
            "MIDI_DRIVER_H"
        ]
    },
    "core/os/rw_lock.h": {
        "classes": [
            "RWLock",
            "RWLockRead",
            "RWLockWrite"
        ],
        "structs": [],
        "defines": [
            "RW_LOCK_H",
            "MINGW_STDTHREAD_REDUNDANCY_WARNING",
            "THREADING_NAMESPACE",
            "THREADING_NAMESPACE"
        ]
    },
    "core/os/os.h": {
        "classes": [
            "OS"
        ],
        "structs": [
            "DateTime",
            "TimeZoneInfo"
        ],
        "defines": [
            "OS_H"
        ]
    },
    "core/os/safe_binary_mutex.h": {
        "classes": [
            "SafeBinaryMutex",
            "SafeBinaryMutex"
        ],
        "structs": [],
        "defines": [
            "SAFE_BINARY_MUTEX_H"
        ]
    },
    "core/os/thread_safe.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "THREAD_SAFE_H",
            "_THREAD_SAFE_CLASS_",
            "_THREAD_SAFE_METHOD_",
            "_THREAD_SAFE_LOCK_",
            "_THREAD_SAFE_UNLOCK_"
        ]
    },
    "core/os/thread.h": {
        "classes": [
            "Thread",
            "Thread"
        ],
        "structs": [
            "Settings",
            "PlatformFunctions",
            "Settings",
            "PlatformFunctions"
        ],
        "defines": [
            "THREAD_H",
            "MINGW_STDTHREAD_REDUNDANCY_WARNING",
            "THREADING_NAMESPACE",
            "THREADING_NAMESPACE"
        ]
    },
    "core/os/keyboard.h": {
        "classes": [
            "Key",
            "KeyModifierMask",
            "KeyLocation"
        ],
        "structs": [],
        "defines": [
            "KEYBOARD_H"
        ]
    },
    "core/os/memory.h": {
        "classes": [
            "Memory",
            "DefaultAllocator",
            "DefaultTypedAllocator"
        ],
        "structs": [
            "_GlobalNil",
            "_GlobalNilClass"
        ],
        "defines": [
            "MEMORY_H",
            "memalloc",
            "memrealloc",
            "memfree",
            "memnew",
            "memnew_allocator",
            "memnew_placement",
            "memdelete_notnull",
            "memnew_arr"
        ]
    },
    "core/os/spin_lock.h": {
        "classes": [
            "SpinLock",
            "SpinLock"
        ],
        "structs": [],
        "defines": [
            "SPIN_LOCK_H"
        ]
    },
    "core/os/mutex.h": {
        "classes": [
            "MutexImpl",
            "MutexLock",
            "MutexImpl",
            "MutexLock"
        ],
        "structs": [],
        "defines": [
            "MUTEX_H",
            "MINGW_STDTHREAD_REDUNDANCY_WARNING",
            "THREADING_NAMESPACE",
            "THREADING_NAMESPACE"
        ]
    },
    "core/os/pool_allocator.h": {
        "classes": [
            "PoolAllocator"
        ],
        "structs": [
            "Entry"
        ],
        "defines": [
            "POOL_ALLOCATOR_H"
        ]
    },
    "core/os/main_loop.h": {
        "classes": [
            "MainLoop"
        ],
        "structs": [],
        "defines": [
            "MAIN_LOOP_H"
        ]
    },
    "core/string/ucaps.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "UCAPS_H",
            "CAPS_LEN"
        ]
    },
    "core/string/print_string.h": {
        "classes": [],
        "structs": [
            "PrintHandlerList"
        ],
        "defines": [
            "PRINT_STRING_H",
            "print_verbose"
        ]
    },
    "core/string/ustring.h": {
        "classes": [
            "CharProxy",
            "Char16String",
            "CharString",
            "String"
        ],
        "structs": [
            "StrRange",
            "NoCaseComparator",
            "NaturalNoCaseComparator"
        ],
        "defines": [
            "USTRING_GODOT_H",
            "TTRC",
            "TTRGET",
            "TTRC",
            "TTRGET",
            "PNAME",
            "GNAME"
        ]
    },
    "core/string/string_builder.h": {
        "classes": [
            "StringBuilder"
        ],
        "structs": [],
        "defines": [
            "STRING_BUILDER_H"
        ]
    },
    "core/string/char_utils.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "CHAR_UTILS_H",
            "BSEARCH_CHAR_RANGE"
        ]
    },
    "core/string/node_path.h": {
        "classes": [
            "NodePath"
        ],
        "structs": [
            "Data"
        ],
        "defines": [
            "NODE_PATH_H"
        ]
    },
    "core/string/translation.h": {
        "classes": [
            "Translation",
            "TranslationServer"
        ],
        "structs": [
            "LocaleScriptInfo"
        ],
        "defines": [
            "TRANSLATION_H"
        ]
    },
    "core/string/string_buffer.h": {
        "classes": [
            "StringBuffer"
        ],
        "structs": [],
        "defines": [
            "STRING_BUFFER_H"
        ]
    },
    "core/string/string_name.h": {
        "classes": [
            "StringName"
        ],
        "structs": [
            "StaticCString",
            "_Data",
            "DebugSortReferences",
            "AlphCompare"
        ],
        "defines": [
            "STRING_NAME_H",
            "UNIQUE_NODE_PREFIX",
            "SNAME"
        ]
    },
    "core/string/translation_po.h": {
        "classes": [
            "TranslationPO"
        ],
        "structs": [],
        "defines": [
            "TRANSLATION_PO_H",
            "DEBUG_TRANSLATION_PO"
        ]
    },
    "core/string/optimized_translation.h": {
        "classes": [
            "OptimizedTranslation"
        ],
        "structs": [
            "Bucket",
            "Elem"
        ],
        "defines": [
            "OPTIMIZED_TRANSLATION_H"
        ]
    },
    "core/string/locales.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "LOCALES_H"
        ]
    },
    "core/error/error_macros.h": {
        "classes": [],
        "structs": [
            "ErrorHandlerList"
        ],
        "defines": [
            "ERROR_MACROS_H",
            "FUNCTION_STR",
            "FUNCTION_STR",
            "FUNCTION_STR",
            "GENERATE_TRAP",
            "GENERATE_TRAP",
            "ERR_FAIL_INDEX",
            "ERR_FAIL_INDEX_MSG",
            "ERR_FAIL_INDEX_EDMSG",
            "ERR_FAIL_INDEX_V",
            "ERR_FAIL_INDEX_V_MSG",
            "ERR_FAIL_INDEX_V_EDMSG",
            "CRASH_BAD_INDEX",
            "CRASH_BAD_INDEX_MSG",
            "ERR_FAIL_UNSIGNED_INDEX",
            "ERR_FAIL_UNSIGNED_INDEX_MSG",
            "ERR_FAIL_UNSIGNED_INDEX_EDMSG",
            "ERR_FAIL_UNSIGNED_INDEX_V",
            "ERR_FAIL_UNSIGNED_INDEX_V_MSG",
            "ERR_FAIL_UNSIGNED_INDEX_V_EDMSG",
            "CRASH_BAD_UNSIGNED_INDEX",
            "CRASH_BAD_UNSIGNED_INDEX_MSG",
            "ERR_FAIL_NULL",
            "ERR_FAIL_NULL_MSG",
            "ERR_FAIL_NULL_EDMSG",
            "ERR_FAIL_NULL_V",
            "ERR_FAIL_NULL_V_MSG",
            "ERR_FAIL_NULL_V_EDMSG",
            "ERR_FAIL_COND",
            "ERR_FAIL_COND_MSG",
            "ERR_FAIL_COND_EDMSG",
            "ERR_FAIL_COND_V",
            "ERR_FAIL_COND_V_MSG",
            "ERR_FAIL_COND_V_EDMSG",
            "ERR_CONTINUE",
            "ERR_CONTINUE_MSG",
            "ERR_CONTINUE_EDMSG",
            "ERR_BREAK",
            "ERR_BREAK_MSG",
            "ERR_BREAK_EDMSG",
            "CRASH_COND",
            "CRASH_COND_MSG",
            "ERR_FAIL",
            "ERR_FAIL_MSG",
            "ERR_FAIL_EDMSG",
            "ERR_FAIL_V",
            "ERR_FAIL_V_MSG",
            "ERR_FAIL_V_EDMSG",
            "ERR_PRINT",
            "ERR_PRINT_ED",
            "ERR_PRINT_ONCE",
            "ERR_PRINT_ONCE_ED",
            "WARN_PRINT",
            "WARN_PRINT_ED",
            "WARN_PRINT_ONCE",
            "WARN_PRINT_ONCE_ED",
            "WARN_VERBOSE",
            "WARN_DEPRECATED",
            "WARN_DEPRECATED_MSG",
            "CRASH_NOW",
            "CRASH_NOW_MSG",
            "DEV_ASSERT",
            "DEV_ASSERT",
            "DEV_CHECK_ONCE",
            "DEV_CHECK_ONCE"
        ]
    },
    "core/error/error_list.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "ERROR_LIST_H"
        ]
    },
    "platform/register_platform_apis.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGISTER_PLATFORM_APIS_H"
        ]
    },
    "platform/macos/godot_status_item.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_STATUS_ITEM_H"
        ]
    },
    "platform/macos/godot_menu_item.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_MENU_ITEM_H",
            "MENU_TAG_START",
            "MENU_TAG_END"
        ]
    },
    "platform/macos/godot_button_view.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_BUTTON_VIEW_H"
        ]
    },
    "platform/macos/platform_gl.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PLATFORM_GL_H",
            "GL_API_ENABLED",
            "GLES_API_ENABLED",
            "KHRONOS_STATIC"
        ]
    },
    "platform/macos/platform_config.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PTHREAD_RENAME_SELF",
            "_weakify",
            "_strongify"
        ]
    },
    "platform/macos/dir_access_macos.h": {
        "classes": [
            "DirAccessMacOS"
        ],
        "structs": [],
        "defines": [
            "DIR_ACCESS_MACOS_H"
        ]
    },
    "platform/macos/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/macos/godot_open_save_delegate.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_OPEN_SAVE_DELEGATE_H"
        ]
    },
    "platform/macos/macos_terminal_logger.h": {
        "classes": [
            "MacOSTerminalLogger"
        ],
        "structs": [],
        "defines": [
            "MACOS_TERMINAL_LOGGER_H"
        ]
    },
    "platform/macos/gl_manager_macos_legacy.h": {
        "classes": [
            "GLManagerLegacy_MacOS"
        ],
        "structs": [
            "GLWindow"
        ],
        "defines": [
            "GL_MANAGER_MACOS_LEGACY_H"
        ]
    },
    "platform/macos/rendering_context_driver_vulkan_macos.h": {
        "classes": [
            "RenderingContextDriverVulkanMacOS"
        ],
        "structs": [
            "WindowPlatformData"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_VULKAN_MACOS_H"
        ]
    },
    "platform/macos/godot_application_delegate.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_APPLICATION_DELEGATE_H"
        ]
    },
    "platform/macos/godot_window.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_WINDOW_H"
        ]
    },
    "platform/macos/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/macos/os_macos.h": {
        "classes": [
            "OS_MacOS"
        ],
        "structs": [],
        "defines": [
            "OS_MACOS_H"
        ]
    },
    "platform/macos/godot_application.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_APPLICATION_H"
        ]
    },
    "platform/macos/tts_macos.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TTS_MACOS_H"
        ]
    },
    "platform/macos/key_mapping_macos.h": {
        "classes": [
            "KeyMappingMacOS"
        ],
        "structs": [],
        "defines": [
            "KEY_MAPPING_MACOS_H"
        ]
    },
    "platform/macos/crash_handler_macos.h": {
        "classes": [
            "CrashHandler"
        ],
        "structs": [],
        "defines": [
            "CRASH_HANDLER_MACOS_H"
        ]
    },
    "platform/macos/display_server_macos.h": {
        "classes": [
            "DisplayServerMacOS"
        ],
        "structs": [
            "KeyEvent",
            "WindowData",
            "WarpEvent",
            "LayoutInfo",
            "IndicatorData",
            "MenuCall"
        ],
        "defines": [
            "DISPLAY_SERVER_MACOS_H",
            "BitMap"
        ]
    },
    "platform/macos/gl_manager_macos_angle.h": {
        "classes": [
            "GLManagerANGLE_MacOS"
        ],
        "structs": [],
        "defines": [
            "GL_MANAGER_MACOS_ANGLE_H"
        ]
    },
    "platform/macos/logo.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/macos/godot_content_view.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_CONTENT_VIEW_H",
            "RootView",
            "RootView"
        ]
    },
    "platform/macos/joypad_macos.h": {
        "classes": [
            "JoypadMacOS"
        ],
        "structs": [],
        "defines": [
            "Key"
        ]
    },
    "platform/macos/godot_menu_delegate.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_MENU_DELEGATE_H"
        ]
    },
    "platform/macos/native_menu_macos.h": {
        "classes": [
            "NativeMenuMacOS"
        ],
        "structs": [
            "MenuData"
        ],
        "defines": [
            "NATIVE_MENU_MACOS_H"
        ]
    },
    "platform/macos/godot_window_delegate.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_WINDOW_DELEGATE_H"
        ]
    },
    "platform/macos/export/codesign.h": {
        "classes": [
            "CodeSignCodeResources",
            "CRMatch",
            "CodeSignBlob",
            "CodeSignRequirements",
            "CodeSignEntitlementsText",
            "CodeSignEntitlementsBinary",
            "CodeSignCodeDirectory",
            "CodeSignSignature",
            "CodeSignSuperBlob",
            "CodeSign"
        ],
        "structs": [
            "CRFile",
            "CRRule",
            "CodeDirectoryHeader"
        ],
        "defines": [
            "MACOS_CODESIGN_H"
        ]
    },
    "platform/macos/export/lipo.h": {
        "classes": [
            "LipO"
        ],
        "structs": [
            "FatArch"
        ],
        "defines": [
            "MACOS_LIPO_H"
        ]
    },
    "platform/macos/export/export.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MACOS_EXPORT_H"
        ]
    },
    "platform/macos/export/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/macos/export/export_plugin.h": {
        "classes": [
            "EditorExportPlatformMacOS"
        ],
        "structs": [
            "SSHCleanupCommand"
        ],
        "defines": [
            "MACOS_EXPORT_PLUGIN_H"
        ]
    },
    "platform/macos/export/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/macos/export/macho.h": {
        "classes": [
            "MachO"
        ],
        "structs": [
            "MachHeader",
            "LoadCommandHeader",
            "LoadCommandSegment",
            "LoadCommandSegment64",
            "Section",
            "Section64"
        ],
        "defines": [
            "MACOS_MACHO_H"
        ]
    },
    "platform/web/platform_gl.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PLATFORM_GL_H",
            "GLES_API_ENABLED"
        ]
    },
    "platform/web/platform_config.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/web/os_web.h": {
        "classes": [
            "OS_Web"
        ],
        "structs": [],
        "defines": [
            "OS_WEB_H"
        ]
    },
    "platform/web/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/web/godot_js.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_JS_H",
            "WASM_EXPORT"
        ]
    },
    "platform/web/audio_driver_web.h": {
        "classes": [
            "AudioDriverWeb",
            "AudioDriverWorklet",
            "AudioDriverWorklet",
            "AudioDriverScriptProcessor"
        ],
        "structs": [
            "AudioContext"
        ],
        "defines": [
            "AUDIO_DRIVER_WEB_H"
        ]
    },
    "platform/web/godot_audio.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_AUDIO_H"
        ]
    },
    "platform/web/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/web/display_server_web.h": {
        "classes": [
            "DisplayServerWeb"
        ],
        "structs": [
            "JSTouchEvent",
            "JSKeyEvent",
            "KeyEvent"
        ],
        "defines": [
            "DISPLAY_SERVER_WEB_H"
        ]
    },
    "platform/web/run_icon.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/web/logo.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/web/http_client_web.h": {
        "classes": [
            "HTTPClientWeb"
        ],
        "structs": [],
        "defines": [
            "HTTP_CLIENT_WEB_H"
        ]
    },
    "platform/web/godot_webgl2.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_WEBGL2_H",
            "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR",
            "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR",
            "GL_MAX_VIEWS_OVR",
            "GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR",
            "glFramebufferTextureMultiviewOVR",
            "glFramebufferTextureMultisampleMultiviewOVR"
        ]
    },
    "platform/web/api/javascript_bridge_singleton.h": {
        "classes": [
            "JavaScriptObject",
            "JavaScriptBridge"
        ],
        "structs": [],
        "defines": [
            "JAVASCRIPT_BRIDGE_SINGLETON_H"
        ]
    },
    "platform/web/api/api.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WEB_API_H"
        ]
    },
    "platform/web/api/web_tools_editor_plugin.h": {
        "classes": [
            "WebToolsEditorPlugin",
            "WebToolsEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "WEB_TOOLS_EDITOR_PLUGIN_H"
        ]
    },
    "platform/web/export/export.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WEB_EXPORT_H"
        ]
    },
    "platform/web/export/editor_http_server.h": {
        "classes": [
            "EditorHTTPServer"
        ],
        "structs": [],
        "defines": [
            "WEB_EDITOR_HTTP_SERVER_H"
        ]
    },
    "platform/web/export/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/web/export/export_plugin.h": {
        "classes": [
            "EditorExportPlatformWeb"
        ],
        "structs": [],
        "defines": [
            "WEB_EXPORT_PLUGIN_H"
        ]
    },
    "platform/web/export/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/keyboard_input_view.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/joypad_ios.h": {
        "classes": [
            "JoypadIOS"
        ],
        "structs": [],
        "defines": []
    },
    "platform/ios/ios.h": {
        "classes": [
            "iOS"
        ],
        "structs": [],
        "defines": [
            "IOS_H"
        ]
    },
    "platform/ios/godot_view_renderer.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/display_server_ios.h": {
        "classes": [
            "DisplayServerIOS"
        ],
        "structs": [],
        "defines": [
            "DISPLAY_SERVER_IOS_H"
        ]
    },
    "platform/ios/platform_gl.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PLATFORM_GL_H",
            "GLES_API_ENABLED"
        ]
    },
    "platform/ios/godot_app_delegate.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/platform_config.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PTHREAD_RENAME_SELF",
            "_weakify",
            "_strongify"
        ]
    },
    "platform/ios/godot_view.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/view_controller.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/app_delegate.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/ios_terminal_logger.h": {
        "classes": [
            "IOSTerminalLogger"
        ],
        "structs": [],
        "defines": [
            "IOS_TERMINAL_LOGGER_H"
        ]
    },
    "platform/ios/os_ios.h": {
        "classes": [
            "OS_IOS"
        ],
        "structs": [],
        "defines": [
            "OS_IOS_H"
        ]
    },
    "platform/ios/device_metrics.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/rendering_context_driver_vulkan_ios.h": {
        "classes": [
            "RenderingContextDriverVulkanIOS"
        ],
        "structs": [
            "WindowPlatformData"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_VULKAN_IOS_H"
        ]
    },
    "platform/ios/logo.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/tts_ios.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TTS_IOS_H"
        ]
    },
    "platform/ios/display_layer.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/key_mapping_ios.h": {
        "classes": [
            "KeyMappingIOS"
        ],
        "structs": [],
        "defines": [
            "KEY_MAPPING_IOS_H"
        ]
    },
    "platform/ios/api/api.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "IOS_API_H"
        ]
    },
    "platform/ios/export/export.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "IOS_EXPORT_H"
        ]
    },
    "platform/ios/export/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/export/export_plugin.h": {
        "classes": [
            "EditorExportPlatformIOS"
        ],
        "structs": [
            "Device",
            "IOSConfigData",
            "ExportArchitecture",
            "IOSExportAsset"
        ],
        "defines": [
            "IOS_EXPORT_PLUGIN_H"
        ]
    },
    "platform/ios/export/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/ios/export/godot_plugin_config.h": {
        "classes": [],
        "structs": [
            "PluginConfigIOS",
            "PlistItem"
        ],
        "defines": [
            "IOS_GODOT_PLUGIN_CONFIG_H"
        ]
    },
    "platform/android/dir_access_jandroid.h": {
        "classes": [
            "DirAccessJAndroid"
        ],
        "structs": [],
        "defines": [
            "DIR_ACCESS_JANDROID_H"
        ]
    },
    "platform/android/os_android.h": {
        "classes": [
            "OS_Android"
        ],
        "structs": [
            "FontInfo"
        ],
        "defines": [
            "OS_ANDROID_H"
        ]
    },
    "platform/android/tts_android.h": {
        "classes": [
            "TTS_Android"
        ],
        "structs": [],
        "defines": [
            "TTS_ANDROID_H"
        ]
    },
    "platform/android/platform_gl.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PLATFORM_GL_H",
            "GLES_API_ENABLED"
        ]
    },
    "platform/android/platform_config.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/android/java_godot_wrapper.h": {
        "classes": [
            "GodotJavaWrapper"
        ],
        "structs": [],
        "defines": [
            "JAVA_GODOT_WRAPPER_H"
        ]
    },
    "platform/android/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/android/android_keys_utils.h": {
        "classes": [],
        "structs": [
            "AndroidGodotCodePair",
            "AndroidGodotLocationPair"
        ],
        "defines": [
            "ANDROID_KEYS_UTILS_H",
            "AKEYCODE_MAX"
        ]
    },
    "platform/android/android_input_handler.h": {
        "classes": [
            "AndroidInputHandler"
        ],
        "structs": [
            "TouchPos",
            "MouseEventInfo",
            "JoypadEvent"
        ],
        "defines": [
            "ANDROID_INPUT_HANDLER_H"
        ]
    },
    "platform/android/string_android.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "STRING_ANDROID_H"
        ]
    },
    "platform/android/audio_driver_opensl.h": {
        "classes": [
            "AudioDriverOpenSL"
        ],
        "structs": [],
        "defines": [
            "AUDIO_DRIVER_OPENSL_H"
        ]
    },
    "platform/android/thread_jandroid.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "THREAD_JANDROID_H"
        ]
    },
    "platform/android/jni_utils.h": {
        "classes": [],
        "structs": [
            "jvalret"
        ],
        "defines": [
            "JNI_UTILS_H"
        ]
    },
    "platform/android/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/android/java_godot_lib_jni.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "JAVA_GODOT_LIB_JNI_H"
        ]
    },
    "platform/android/rendering_context_driver_vulkan_android.h": {
        "classes": [
            "RenderingContextDriverVulkanAndroid"
        ],
        "structs": [
            "WindowPlatformData"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_VULKAN_ANDROID_H"
        ]
    },
    "platform/android/display_server_android.h": {
        "classes": [
            "DisplayServerAndroid"
        ],
        "structs": [],
        "defines": [
            "DISPLAY_SERVER_ANDROID_H"
        ]
    },
    "platform/android/net_socket_android.h": {
        "classes": [
            "NetSocketAndroid"
        ],
        "structs": [],
        "defines": [
            "NET_SOCKET_ANDROID_H"
        ]
    },
    "platform/android/file_access_android.h": {
        "classes": [
            "FileAccessAndroid"
        ],
        "structs": [],
        "defines": [
            "FILE_ACCESS_ANDROID_H"
        ]
    },
    "platform/android/run_icon.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/android/logo.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/android/java_godot_io_wrapper.h": {
        "classes": [
            "GodotIOJavaWrapper"
        ],
        "structs": [],
        "defines": [
            "JAVA_GODOT_IO_WRAPPER_H"
        ]
    },
    "platform/android/file_access_filesystem_jandroid.h": {
        "classes": [
            "FileAccessFilesystemJAndroid"
        ],
        "structs": [],
        "defines": [
            "FILE_ACCESS_FILESYSTEM_JANDROID_H"
        ]
    },
    "platform/android/java_godot_view_wrapper.h": {
        "classes": [
            "GodotJavaViewWrapper"
        ],
        "structs": [],
        "defines": [
            "JAVA_GODOT_VIEW_WRAPPER_H"
        ]
    },
    "platform/android/plugin/godot_plugin_jni.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_PLUGIN_JNI_H"
        ]
    },
    "platform/android/api/jni_singleton.h": {
        "classes": [
            "JNISingleton"
        ],
        "structs": [
            "MethodData"
        ],
        "defines": [
            "JNI_SINGLETON_H"
        ]
    },
    "platform/android/api/api.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "ANDROID_API_H"
        ]
    },
    "platform/android/api/java_class_wrapper.h": {
        "classes": [
            "JavaClass",
            "JavaObject",
            "JavaClassWrapper"
        ],
        "structs": [
            "MethodInfo"
        ],
        "defines": [
            "JAVA_CLASS_WRAPPER_H"
        ]
    },
    "platform/android/export/export.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "ANDROID_EXPORT_H"
        ]
    },
    "platform/android/export/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/android/export/export_plugin.h": {
        "classes": [
            "EditorExportPlatformAndroid"
        ],
        "structs": [
            "LauncherIcon",
            "Device",
            "APKExportData",
            "ABI"
        ],
        "defines": [
            "ANDROID_EXPORT_PLUGIN_H"
        ]
    },
    "platform/android/export/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/android/export/gradle_export_util.h": {
        "classes": [],
        "structs": [
            "CustomExportData"
        ],
        "defines": [
            "ANDROID_GRADLE_EXPORT_UTIL_H"
        ]
    },
    "platform/android/export/godot_plugin_config.h": {
        "classes": [],
        "structs": [
            "PluginConfigAndroid"
        ],
        "defines": [
            "ANDROID_GODOT_PLUGIN_CONFIG_H"
        ]
    },
    "platform/windows/crash_handler_windows.h": {
        "classes": [
            "CrashHandler"
        ],
        "structs": [],
        "defines": [
            "CRASH_HANDLER_WINDOWS_H",
            "WIN32_LEAN_AND_MEAN",
            "CRASH_HANDLER_EXCEPTION"
        ]
    },
    "platform/windows/platform_gl.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PLATFORM_GL_H",
            "GL_API_ENABLED",
            "GLES_API_ENABLED",
            "KHRONOS_STATIC"
        ]
    },
    "platform/windows/platform_config.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/windows/display_server_windows.h": {
        "classes": [
            "DisplayServerWindows"
        ],
        "structs": [
            "tagLOGCONTEXTW",
            "tagAXIS",
            "tagORIENTATION",
            "tagPACKET",
            "tagPOINTER_INFO",
            "tagPOINTER_PEN_INFO",
            "KeyEvent",
            "WindowData",
            "IndicatorData"
        ],
        "defines": [
            "DISPLAY_SERVER_WINDOWS_H",
            "WIN32_LEAN_AND_MEAN",
            "WT_PACKET",
            "WT_PROXIMITY",
            "WT_INFOCHANGE",
            "WT_CSRCHANGE",
            "WTI_DEFSYSCTX",
            "WTI_DEVICES",
            "DVC_NPRESSURE",
            "DVC_TPRESSURE",
            "DVC_ORIENTATION",
            "DVC_ROTATION",
            "CXO_MESSAGES",
            "PK_STATUS",
            "PK_NORMAL_PRESSURE",
            "PK_TANGENT_PRESSURE",
            "PK_ORIENTATION",
            "TPS_INVERT",
            "POINTER_STRUCTURES",
            "PEN_FLAG_INVERTED",
            "PEN_FLAG_ERASER",
            "PEN_MASK_PRESSURE",
            "PEN_MASK_TILT_X",
            "PEN_MASK_TILT_Y",
            "POINTER_MESSAGE_FLAG_FIRSTBUTTON",
            "WM_POINTERUPDATE",
            "WM_POINTERENTER",
            "WM_POINTERLEAVE"
        ]
    },
    "platform/windows/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/windows/rendering_context_driver_vulkan_windows.h": {
        "classes": [
            "RenderingContextDriverVulkanWindows"
        ],
        "structs": [
            "WindowPlatformData"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_VULKAN_WINDOWS_H",
            "WIN32_LEAN_AND_MEAN"
        ]
    },
    "platform/windows/gl_manager_windows_native.h": {
        "classes": [
            "GLManagerNative_Windows"
        ],
        "structs": [
            "GLWindow",
            "GLDisplay"
        ],
        "defines": [
            "GL_MANAGER_WINDOWS_NATIVE_H"
        ]
    },
    "platform/windows/gl_manager_windows_angle.h": {
        "classes": [
            "GLManagerANGLE_Windows"
        ],
        "structs": [],
        "defines": [
            "GL_MANAGER_WINDOWS_ANGLE_H"
        ]
    },
    "platform/windows/joypad_windows.h": {
        "classes": [
            "JoypadWindows"
        ],
        "structs": [
            "dinput_gamepad",
            "xinput_gamepad"
        ],
        "defines": [
            "JOYPAD_WINDOWS_H",
            "DIRECTINPUT_VERSION",
            "SAFE_RELEASE",
            "XUSER_MAX_COUNT"
        ]
    },
    "platform/windows/os_windows.h": {
        "classes": [
            "ComAutoreleaseRef",
            "OS_Windows"
        ],
        "structs": [
            "ProcessInfo"
        ],
        "defines": [
            "OS_WINDOWS_H",
            "WIN32_LEAN_AND_MEAN",
            "WINDOWS_DEBUG_OUTPUT_ENABLED",
            "ENABLE_VIRTUAL_TERMINAL_PROCESSING"
        ]
    },
    "platform/windows/tts_windows.h": {
        "classes": [
            "TTS_Windows"
        ],
        "structs": [
            "UTData"
        ],
        "defines": [
            "TTS_WINDOWS_H",
            "WIN32_LEAN_AND_MEAN"
        ]
    },
    "platform/windows/key_mapping_windows.h": {
        "classes": [
            "KeyMappingWindows"
        ],
        "structs": [],
        "defines": [
            "KEY_MAPPING_WINDOWS_H",
            "WIN32_LEAN_AND_MEAN"
        ]
    },
    "platform/windows/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/windows/lang_table.h": {
        "classes": [],
        "structs": [
            "_WinLocale"
        ],
        "defines": [
            "LANG_TABLE_H"
        ]
    },
    "platform/windows/logo.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/windows/wgl_detect_version.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WGL_DETECT_VERSION_H"
        ]
    },
    "platform/windows/windows_terminal_logger.h": {
        "classes": [
            "WindowsTerminalLogger"
        ],
        "structs": [],
        "defines": [
            "WINDOWS_TERMINAL_LOGGER_H"
        ]
    },
    "platform/windows/export/export.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WINDOWS_EXPORT_H"
        ]
    },
    "platform/windows/export/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/windows/export/export_plugin.h": {
        "classes": [
            "EditorExportPlatformWindows"
        ],
        "structs": [
            "SSHCleanupCommand"
        ],
        "defines": [
            "WINDOWS_EXPORT_PLUGIN_H"
        ]
    },
    "platform/windows/export/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/linuxbsd/fontconfig-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_FONTCONFIG",
            "FcBlanksCreate",
            "FcBlanksDestroy",
            "FcBlanksAdd",
            "FcBlanksIsMember",
            "FcCacheDir",
            "FcCacheCopySet",
            "FcCacheSubdir",
            "FcCacheNumSubdir",
            "FcCacheNumFont",
            "FcDirCacheUnlink",
            "FcDirCacheValid",
            "FcDirCacheClean",
            "FcCacheCreateTagFile",
            "FcConfigHome",
            "FcConfigEnableHome",
            "FcConfigFilename",
            "FcConfigCreate",
            "FcConfigReference",
            "FcConfigDestroy",
            "FcConfigSetCurrent",
            "FcConfigGetCurrent",
            "FcConfigUptoDate",
            "FcConfigBuildFonts",
            "FcConfigGetFontDirs",
            "FcConfigGetConfigDirs",
            "FcConfigGetConfigFiles",
            "FcConfigGetCache",
            "FcConfigGetBlanks",
            "FcConfigGetCacheDirs",
            "FcConfigGetRescanInterval",
            "FcConfigSetRescanInterval",
            "FcConfigGetFonts",
            "FcConfigAppFontAddFile",
            "FcConfigAppFontAddDir",
            "FcConfigAppFontClear",
            "FcConfigSubstituteWithPat",
            "FcConfigSubstitute",
            "FcConfigGetSysRoot",
            "FcConfigSetSysRoot",
            "FcCharSetCreate",
            "FcCharSetNew",
            "FcCharSetDestroy",
            "FcCharSetAddChar",
            "FcCharSetDelChar",
            "FcCharSetCopy",
            "FcCharSetEqual",
            "FcCharSetIntersect",
            "FcCharSetUnion",
            "FcCharSetSubtract",
            "FcCharSetMerge",
            "FcCharSetHasChar",
            "FcCharSetCount",
            "FcCharSetIntersectCount",
            "FcCharSetSubtractCount",
            "FcCharSetIsSubset",
            "FcCharSetCoverage",
            "FcValuePrint",
            "FcPatternPrint",
            "FcFontSetPrint",
            "FcGetDefaultLangs",
            "FcDefaultSubstitute",
            "FcFileIsDir",
            "FcFileScan",
            "FcDirScan",
            "FcDirSave",
            "FcDirCacheLoad",
            "FcDirCacheRescan",
            "FcDirCacheRead",
            "FcDirCacheLoadFile",
            "FcDirCacheUnload",
            "FcFreeTypeQuery",
            "FcFontSetCreate",
            "FcFontSetDestroy",
            "FcFontSetAdd",
            "FcInitLoadConfig",
            "FcInitLoadConfigAndFonts",
            "FcInit",
            "FcFini",
            "FcGetVersion",
            "FcInitReinitialize",
            "FcInitBringUptoDate",
            "FcGetLangs",
            "FcLangNormalize",
            "FcLangGetCharSet",
            "FcLangSetCreate",
            "FcLangSetDestroy",
            "FcLangSetCopy",
            "FcLangSetAdd",
            "FcLangSetDel",
            "FcLangSetHasLang",
            "FcLangSetCompare",
            "FcLangSetContains",
            "FcLangSetEqual",
            "FcLangSetHash",
            "FcLangSetGetLangs",
            "FcLangSetUnion",
            "FcLangSetSubtract",
            "FcObjectSetCreate",
            "FcObjectSetAdd",
            "FcObjectSetDestroy",
            "FcObjectSetVaBuild",
            "FcObjectSetBuild",
            "FcFontSetList",
            "FcFontList",
            "FcAtomicCreate",
            "FcAtomicLock",
            "FcAtomicNewFile",
            "FcAtomicOrigFile",
            "FcAtomicReplaceOrig",
            "FcAtomicDeleteNew",
            "FcAtomicUnlock",
            "FcAtomicDestroy",
            "FcFontSetMatch",
            "FcFontMatch",
            "FcFontRenderPrepare",
            "FcFontSetSort",
            "FcFontSort",
            "FcFontSetSortDestroy",
            "FcMatrixCopy",
            "FcMatrixEqual",
            "FcMatrixMultiply",
            "FcMatrixRotate",
            "FcMatrixScale",
            "FcMatrixShear",
            "FcNameRegisterObjectTypes",
            "FcNameUnregisterObjectTypes",
            "FcNameGetObjectType",
            "FcNameRegisterConstants",
            "FcNameUnregisterConstants",
            "FcNameGetConstant",
            "FcNameConstant",
            "FcNameParse",
            "FcNameUnparse",
            "FcPatternCreate",
            "FcPatternDuplicate",
            "FcPatternReference",
            "FcPatternFilter",
            "FcValueDestroy",
            "FcValueEqual",
            "FcValueSave",
            "FcPatternDestroy",
            "FcPatternEqual",
            "FcPatternEqualSubset",
            "FcPatternHash",
            "FcPatternAdd",
            "FcPatternAddWeak",
            "FcPatternGet",
            "FcPatternGetWithBinding",
            "FcPatternDel",
            "FcPatternRemove",
            "FcPatternAddInteger",
            "FcPatternAddDouble",
            "FcPatternAddString",
            "FcPatternAddMatrix",
            "FcPatternAddCharSet",
            "FcPatternAddBool",
            "FcPatternAddLangSet",
            "FcPatternAddRange",
            "FcPatternGetInteger",
            "FcPatternGetDouble",
            "FcPatternGetString",
            "FcPatternGetMatrix",
            "FcPatternGetCharSet",
            "FcPatternGetBool",
            "FcPatternGetLangSet",
            "FcPatternGetRange",
            "FcPatternVaBuild",
            "FcPatternBuild",
            "FcPatternFormat",
            "FcRangeCreateDouble",
            "FcRangeCreateInteger",
            "FcRangeDestroy",
            "FcRangeCopy",
            "FcRangeGetDouble",
            "FcWeightFromOpenType",
            "FcWeightToOpenType",
            "FcStrCopy",
            "FcStrCopyFilename",
            "FcStrPlus",
            "FcStrFree",
            "FcStrDowncase",
            "FcStrCmpIgnoreCase",
            "FcStrCmp",
            "FcStrStrIgnoreCase",
            "FcStrStr",
            "FcUtf8ToUcs4",
            "FcUtf8Len",
            "FcUcs4ToUtf8",
            "FcUtf16ToUcs4",
            "FcUtf16Len",
            "FcStrDirname",
            "FcStrBasename",
            "FcStrSetCreate",
            "FcStrSetMember",
            "FcStrSetEqual",
            "FcStrSetAdd",
            "FcStrSetAddFilename",
            "FcStrSetDel",
            "FcStrSetDestroy",
            "FcStrListCreate",
            "FcStrListFirst",
            "FcStrListNext",
            "FcStrListDone",
            "FcConfigParseAndLoad",
            "FcConfigParseAndLoadFromMemory",
            "FcBlanksCreate",
            "FcBlanksDestroy",
            "FcBlanksAdd",
            "FcBlanksIsMember",
            "FcCacheDir",
            "FcCacheCopySet",
            "FcCacheSubdir",
            "FcCacheNumSubdir",
            "FcCacheNumFont",
            "FcDirCacheUnlink",
            "FcDirCacheValid",
            "FcDirCacheClean",
            "FcCacheCreateTagFile",
            "FcConfigHome",
            "FcConfigEnableHome",
            "FcConfigFilename",
            "FcConfigCreate",
            "FcConfigReference",
            "FcConfigDestroy",
            "FcConfigSetCurrent",
            "FcConfigGetCurrent",
            "FcConfigUptoDate",
            "FcConfigBuildFonts",
            "FcConfigGetFontDirs",
            "FcConfigGetConfigDirs",
            "FcConfigGetConfigFiles",
            "FcConfigGetCache",
            "FcConfigGetBlanks",
            "FcConfigGetCacheDirs",
            "FcConfigGetRescanInterval",
            "FcConfigSetRescanInterval",
            "FcConfigGetFonts",
            "FcConfigAppFontAddFile",
            "FcConfigAppFontAddDir",
            "FcConfigAppFontClear",
            "FcConfigSubstituteWithPat",
            "FcConfigSubstitute",
            "FcConfigGetSysRoot",
            "FcConfigSetSysRoot",
            "FcCharSetCreate",
            "FcCharSetNew",
            "FcCharSetDestroy",
            "FcCharSetAddChar",
            "FcCharSetDelChar",
            "FcCharSetCopy",
            "FcCharSetEqual",
            "FcCharSetIntersect",
            "FcCharSetUnion",
            "FcCharSetSubtract",
            "FcCharSetMerge",
            "FcCharSetHasChar",
            "FcCharSetCount",
            "FcCharSetIntersectCount",
            "FcCharSetSubtractCount",
            "FcCharSetIsSubset",
            "FcCharSetCoverage",
            "FcValuePrint",
            "FcPatternPrint",
            "FcFontSetPrint",
            "FcGetDefaultLangs",
            "FcDefaultSubstitute",
            "FcFileIsDir",
            "FcFileScan",
            "FcDirScan",
            "FcDirSave",
            "FcDirCacheLoad",
            "FcDirCacheRescan",
            "FcDirCacheRead",
            "FcDirCacheLoadFile",
            "FcDirCacheUnload",
            "FcFreeTypeQuery",
            "FcFontSetCreate",
            "FcFontSetDestroy",
            "FcFontSetAdd",
            "FcInitLoadConfig",
            "FcInitLoadConfigAndFonts",
            "FcInit",
            "FcFini",
            "FcGetVersion",
            "FcInitReinitialize",
            "FcInitBringUptoDate",
            "FcGetLangs",
            "FcLangNormalize",
            "FcLangGetCharSet",
            "FcLangSetCreate",
            "FcLangSetDestroy",
            "FcLangSetCopy",
            "FcLangSetAdd",
            "FcLangSetDel",
            "FcLangSetHasLang",
            "FcLangSetCompare",
            "FcLangSetContains",
            "FcLangSetEqual",
            "FcLangSetHash",
            "FcLangSetGetLangs",
            "FcLangSetUnion",
            "FcLangSetSubtract",
            "FcObjectSetCreate",
            "FcObjectSetAdd",
            "FcObjectSetDestroy",
            "FcObjectSetVaBuild",
            "FcObjectSetBuild",
            "FcFontSetList",
            "FcFontList",
            "FcAtomicCreate",
            "FcAtomicLock",
            "FcAtomicNewFile",
            "FcAtomicOrigFile",
            "FcAtomicReplaceOrig",
            "FcAtomicDeleteNew",
            "FcAtomicUnlock",
            "FcAtomicDestroy",
            "FcFontSetMatch",
            "FcFontMatch",
            "FcFontRenderPrepare",
            "FcFontSetSort",
            "FcFontSort",
            "FcFontSetSortDestroy",
            "FcMatrixCopy",
            "FcMatrixEqual",
            "FcMatrixMultiply",
            "FcMatrixRotate",
            "FcMatrixScale",
            "FcMatrixShear",
            "FcNameRegisterObjectTypes",
            "FcNameUnregisterObjectTypes",
            "FcNameGetObjectType",
            "FcNameRegisterConstants",
            "FcNameUnregisterConstants",
            "FcNameGetConstant",
            "FcNameConstant",
            "FcNameParse",
            "FcNameUnparse",
            "FcPatternCreate",
            "FcPatternDuplicate",
            "FcPatternReference",
            "FcPatternFilter",
            "FcValueDestroy",
            "FcValueEqual",
            "FcValueSave",
            "FcPatternDestroy",
            "FcPatternEqual",
            "FcPatternEqualSubset",
            "FcPatternHash",
            "FcPatternAdd",
            "FcPatternAddWeak",
            "FcPatternGet",
            "FcPatternGetWithBinding",
            "FcPatternDel",
            "FcPatternRemove",
            "FcPatternAddInteger",
            "FcPatternAddDouble",
            "FcPatternAddString",
            "FcPatternAddMatrix",
            "FcPatternAddCharSet",
            "FcPatternAddBool",
            "FcPatternAddLangSet",
            "FcPatternAddRange",
            "FcPatternGetInteger",
            "FcPatternGetDouble",
            "FcPatternGetString",
            "FcPatternGetMatrix",
            "FcPatternGetCharSet",
            "FcPatternGetBool",
            "FcPatternGetLangSet",
            "FcPatternGetRange",
            "FcPatternVaBuild",
            "FcPatternBuild",
            "FcPatternFormat",
            "FcRangeCreateDouble",
            "FcRangeCreateInteger",
            "FcRangeDestroy",
            "FcRangeCopy",
            "FcRangeGetDouble",
            "FcWeightFromOpenType",
            "FcWeightToOpenType",
            "FcStrCopy",
            "FcStrCopyFilename",
            "FcStrPlus",
            "FcStrFree",
            "FcStrDowncase",
            "FcStrCmpIgnoreCase",
            "FcStrCmp",
            "FcStrStrIgnoreCase",
            "FcStrStr",
            "FcUtf8ToUcs4",
            "FcUtf8Len",
            "FcUcs4ToUtf8",
            "FcUtf16ToUcs4",
            "FcUtf16Len",
            "FcStrDirname",
            "FcStrBasename",
            "FcStrSetCreate",
            "FcStrSetMember",
            "FcStrSetEqual",
            "FcStrSetAdd",
            "FcStrSetAddFilename",
            "FcStrSetDel",
            "FcStrSetDestroy",
            "FcStrListCreate",
            "FcStrListFirst",
            "FcStrListNext",
            "FcStrListDone",
            "FcConfigParseAndLoad",
            "FcConfigParseAndLoadFromMemory"
        ]
    },
    "platform/linuxbsd/platform_gl.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PLATFORM_GL_H",
            "GL_API_ENABLED",
            "GLES_API_ENABLED"
        ]
    },
    "platform/linuxbsd/crash_handler_linuxbsd.h": {
        "classes": [
            "CrashHandler"
        ],
        "structs": [],
        "defines": [
            "CRASH_HANDLER_LINUXBSD_H"
        ]
    },
    "platform/linuxbsd/platform_config.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "PTHREAD_NETBSD_SET_NAME",
            "PTHREAD_BSD_SET_NAME"
        ]
    },
    "platform/linuxbsd/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/linuxbsd/freedesktop_portal_desktop.h": {
        "classes": [
            "FreeDesktopPortalDesktop"
        ],
        "structs": [
            "FileDialogData"
        ],
        "defines": [
            "FREEDESKTOP_PORTAL_DESKTOP_H"
        ]
    },
    "platform/linuxbsd/freedesktop_screensaver.h": {
        "classes": [
            "FreeDesktopScreenSaver"
        ],
        "structs": [],
        "defines": [
            "FREEDESKTOP_SCREENSAVER_H"
        ]
    },
    "platform/linuxbsd/speechd-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_SPEECHD",
            "SPDConnectionAddress__free",
            "spd_get_default_address",
            "spd_open",
            "spd_open2",
            "spd_close",
            "spd_say",
            "spd_sayf",
            "spd_stop",
            "spd_stop_all",
            "spd_stop_uid",
            "spd_cancel",
            "spd_cancel_all",
            "spd_cancel_uid",
            "spd_pause",
            "spd_pause_all",
            "spd_pause_uid",
            "spd_resume",
            "spd_resume_all",
            "spd_resume_uid",
            "spd_key",
            "spd_char",
            "spd_wchar",
            "spd_sound_icon",
            "spd_set_voice_type",
            "spd_set_voice_type_all",
            "spd_set_voice_type_uid",
            "spd_get_voice_type",
            "spd_set_synthesis_voice",
            "spd_set_synthesis_voice_all",
            "spd_set_synthesis_voice_uid",
            "spd_set_data_mode",
            "spd_set_notification_on",
            "spd_set_notification_off",
            "spd_set_notification",
            "spd_set_voice_rate",
            "spd_set_voice_rate_all",
            "spd_set_voice_rate_uid",
            "spd_get_voice_rate",
            "spd_set_voice_pitch",
            "spd_set_voice_pitch_all",
            "spd_set_voice_pitch_uid",
            "spd_get_voice_pitch",
            "spd_set_volume",
            "spd_set_volume_all",
            "spd_set_volume_uid",
            "spd_get_volume",
            "spd_set_punctuation",
            "spd_set_punctuation_all",
            "spd_set_punctuation_uid",
            "spd_set_capital_letters",
            "spd_set_capital_letters_all",
            "spd_set_capital_letters_uid",
            "spd_set_spelling",
            "spd_set_spelling_all",
            "spd_set_spelling_uid",
            "spd_set_language",
            "spd_set_language_all",
            "spd_set_language_uid",
            "spd_get_language",
            "spd_set_output_module",
            "spd_set_output_module_all",
            "spd_set_output_module_uid",
            "spd_get_message_list_fd",
            "spd_list_modules",
            "free_spd_modules",
            "spd_get_output_module",
            "spd_list_voices",
            "spd_list_synthesis_voices",
            "free_spd_voices",
            "spd_execute_command_with_list_reply",
            "spd_execute_command",
            "spd_execute_command_with_reply",
            "spd_execute_command_wo_mutex",
            "spd_send_data",
            "spd_send_data_wo_mutex",
            "SPDConnectionAddress__free",
            "spd_get_default_address",
            "spd_open",
            "spd_open2",
            "spd_close",
            "spd_say",
            "spd_sayf",
            "spd_stop",
            "spd_stop_all",
            "spd_stop_uid",
            "spd_cancel",
            "spd_cancel_all",
            "spd_cancel_uid",
            "spd_pause",
            "spd_pause_all",
            "spd_pause_uid",
            "spd_resume",
            "spd_resume_all",
            "spd_resume_uid",
            "spd_key",
            "spd_char",
            "spd_wchar",
            "spd_sound_icon",
            "spd_set_voice_type",
            "spd_set_voice_type_all",
            "spd_set_voice_type_uid",
            "spd_get_voice_type",
            "spd_set_synthesis_voice",
            "spd_set_synthesis_voice_all",
            "spd_set_synthesis_voice_uid",
            "spd_set_data_mode",
            "spd_set_notification_on",
            "spd_set_notification_off",
            "spd_set_notification",
            "spd_set_voice_rate",
            "spd_set_voice_rate_all",
            "spd_set_voice_rate_uid",
            "spd_get_voice_rate",
            "spd_set_voice_pitch",
            "spd_set_voice_pitch_all",
            "spd_set_voice_pitch_uid",
            "spd_get_voice_pitch",
            "spd_set_volume",
            "spd_set_volume_all",
            "spd_set_volume_uid",
            "spd_get_volume",
            "spd_set_punctuation",
            "spd_set_punctuation_all",
            "spd_set_punctuation_uid",
            "spd_set_capital_letters",
            "spd_set_capital_letters_all",
            "spd_set_capital_letters_uid",
            "spd_set_spelling",
            "spd_set_spelling_all",
            "spd_set_spelling_uid",
            "spd_set_language",
            "spd_set_language_all",
            "spd_set_language_uid",
            "spd_get_language",
            "spd_set_output_module",
            "spd_set_output_module_all",
            "spd_set_output_module_uid",
            "spd_get_message_list_fd",
            "spd_list_modules",
            "free_spd_modules",
            "spd_get_output_module",
            "spd_list_voices",
            "spd_list_synthesis_voices",
            "free_spd_voices",
            "spd_execute_command_with_list_reply",
            "spd_execute_command",
            "spd_execute_command_with_reply",
            "spd_execute_command_wo_mutex",
            "spd_send_data",
            "spd_send_data_wo_mutex"
        ]
    },
    "platform/linuxbsd/tts_linux.h": {
        "classes": [
            "TTS_Linux"
        ],
        "structs": [
            "VoiceInfo"
        ],
        "defines": [
            "TTS_LINUX_H"
        ]
    },
    "platform/linuxbsd/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/linuxbsd/xkbcommon-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_XKBCOMMON",
            "xkb_keysym_get_name",
            "xkb_keysym_from_name",
            "xkb_keysym_to_utf8",
            "xkb_keysym_to_utf32",
            "xkb_utf32_to_keysym",
            "xkb_keysym_to_upper",
            "xkb_keysym_to_lower",
            "xkb_context_new",
            "xkb_context_ref",
            "xkb_context_unref",
            "xkb_context_set_user_data",
            "xkb_context_get_user_data",
            "xkb_context_include_path_append",
            "xkb_context_include_path_append_default",
            "xkb_context_include_path_reset_defaults",
            "xkb_context_include_path_clear",
            "xkb_context_num_include_paths",
            "xkb_context_include_path_get",
            "xkb_context_set_log_level",
            "xkb_context_get_log_level",
            "xkb_context_set_log_verbosity",
            "xkb_context_get_log_verbosity",
            "xkb_context_set_log_fn",
            "xkb_keymap_new_from_names",
            "xkb_keymap_new_from_file",
            "xkb_keymap_new_from_string",
            "xkb_keymap_new_from_buffer",
            "xkb_keymap_ref",
            "xkb_keymap_unref",
            "xkb_keymap_get_as_string",
            "xkb_keymap_min_keycode",
            "xkb_keymap_max_keycode",
            "xkb_keymap_key_for_each",
            "xkb_keymap_key_get_name",
            "xkb_keymap_key_by_name",
            "xkb_keymap_num_mods",
            "xkb_keymap_mod_get_name",
            "xkb_keymap_mod_get_index",
            "xkb_keymap_num_layouts",
            "xkb_keymap_layout_get_name",
            "xkb_keymap_layout_get_index",
            "xkb_keymap_num_leds",
            "xkb_keymap_led_get_name",
            "xkb_keymap_led_get_index",
            "xkb_keymap_num_layouts_for_key",
            "xkb_keymap_num_levels_for_key",
            "xkb_keymap_key_get_mods_for_level",
            "xkb_keymap_key_get_syms_by_level",
            "xkb_keymap_key_repeats",
            "xkb_state_new",
            "xkb_state_ref",
            "xkb_state_unref",
            "xkb_state_get_keymap",
            "xkb_state_update_key",
            "xkb_state_update_mask",
            "xkb_state_key_get_syms",
            "xkb_state_key_get_utf8",
            "xkb_state_key_get_utf32",
            "xkb_state_key_get_one_sym",
            "xkb_state_key_get_layout",
            "xkb_state_key_get_level",
            "xkb_state_serialize_mods",
            "xkb_state_serialize_layout",
            "xkb_state_mod_name_is_active",
            "xkb_state_mod_names_are_active",
            "xkb_state_mod_index_is_active",
            "xkb_state_mod_indices_are_active",
            "xkb_state_key_get_consumed_mods2",
            "xkb_state_key_get_consumed_mods",
            "xkb_state_mod_index_is_consumed2",
            "xkb_state_mod_index_is_consumed",
            "xkb_state_mod_mask_remove_consumed",
            "xkb_state_layout_name_is_active",
            "xkb_state_layout_index_is_active",
            "xkb_state_led_name_is_active",
            "xkb_state_led_index_is_active",
            "xkb_compose_table_new_from_locale",
            "xkb_compose_table_new_from_file",
            "xkb_compose_table_new_from_buffer",
            "xkb_compose_table_ref",
            "xkb_compose_table_unref",
            "xkb_compose_state_new",
            "xkb_compose_state_ref",
            "xkb_compose_state_unref",
            "xkb_compose_state_get_compose_table",
            "xkb_compose_state_feed",
            "xkb_compose_state_reset",
            "xkb_compose_state_get_status",
            "xkb_compose_state_get_utf8",
            "xkb_compose_state_get_one_sym",
            "xkb_keysym_get_name",
            "xkb_keysym_from_name",
            "xkb_keysym_to_utf8",
            "xkb_keysym_to_utf32",
            "xkb_utf32_to_keysym",
            "xkb_keysym_to_upper",
            "xkb_keysym_to_lower",
            "xkb_context_new",
            "xkb_context_ref",
            "xkb_context_unref",
            "xkb_context_set_user_data",
            "xkb_context_get_user_data",
            "xkb_context_include_path_append",
            "xkb_context_include_path_append_default",
            "xkb_context_include_path_reset_defaults",
            "xkb_context_include_path_clear",
            "xkb_context_num_include_paths",
            "xkb_context_include_path_get",
            "xkb_context_set_log_level",
            "xkb_context_get_log_level",
            "xkb_context_set_log_verbosity",
            "xkb_context_get_log_verbosity",
            "xkb_context_set_log_fn",
            "xkb_keymap_new_from_names",
            "xkb_keymap_new_from_file",
            "xkb_keymap_new_from_string",
            "xkb_keymap_new_from_buffer",
            "xkb_keymap_ref",
            "xkb_keymap_unref",
            "xkb_keymap_get_as_string",
            "xkb_keymap_min_keycode",
            "xkb_keymap_max_keycode",
            "xkb_keymap_key_for_each",
            "xkb_keymap_key_get_name",
            "xkb_keymap_key_by_name",
            "xkb_keymap_num_mods",
            "xkb_keymap_mod_get_name",
            "xkb_keymap_mod_get_index",
            "xkb_keymap_num_layouts",
            "xkb_keymap_layout_get_name",
            "xkb_keymap_layout_get_index",
            "xkb_keymap_num_leds",
            "xkb_keymap_led_get_name",
            "xkb_keymap_led_get_index",
            "xkb_keymap_num_layouts_for_key",
            "xkb_keymap_num_levels_for_key",
            "xkb_keymap_key_get_mods_for_level",
            "xkb_keymap_key_get_syms_by_level",
            "xkb_keymap_key_repeats",
            "xkb_state_new",
            "xkb_state_ref",
            "xkb_state_unref",
            "xkb_state_get_keymap",
            "xkb_state_update_key",
            "xkb_state_update_mask",
            "xkb_state_key_get_syms",
            "xkb_state_key_get_utf8",
            "xkb_state_key_get_utf32",
            "xkb_state_key_get_one_sym",
            "xkb_state_key_get_layout",
            "xkb_state_key_get_level",
            "xkb_state_serialize_mods",
            "xkb_state_serialize_layout",
            "xkb_state_mod_name_is_active",
            "xkb_state_mod_names_are_active",
            "xkb_state_mod_index_is_active",
            "xkb_state_mod_indices_are_active",
            "xkb_state_key_get_consumed_mods2",
            "xkb_state_key_get_consumed_mods",
            "xkb_state_mod_index_is_consumed2",
            "xkb_state_mod_index_is_consumed",
            "xkb_state_mod_mask_remove_consumed",
            "xkb_state_layout_name_is_active",
            "xkb_state_layout_index_is_active",
            "xkb_state_led_name_is_active",
            "xkb_state_led_index_is_active",
            "xkb_compose_table_new_from_locale",
            "xkb_compose_table_new_from_file",
            "xkb_compose_table_new_from_buffer",
            "xkb_compose_table_ref",
            "xkb_compose_table_unref",
            "xkb_compose_state_new",
            "xkb_compose_state_ref",
            "xkb_compose_state_unref",
            "xkb_compose_state_get_compose_table",
            "xkb_compose_state_feed",
            "xkb_compose_state_reset",
            "xkb_compose_state_get_status",
            "xkb_compose_state_get_utf8",
            "xkb_compose_state_get_one_sym"
        ]
    },
    "platform/linuxbsd/libudev-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_LIBUDEV",
            "udev_ref",
            "udev_unref",
            "udev_new",
            "udev_set_log_fn",
            "udev_get_log_priority",
            "udev_set_log_priority",
            "udev_get_userdata",
            "udev_set_userdata",
            "udev_list_entry_get_next",
            "udev_list_entry_get_by_name",
            "udev_list_entry_get_name",
            "udev_list_entry_get_value",
            "udev_device_ref",
            "udev_device_unref",
            "udev_device_get_udev",
            "udev_device_new_from_syspath",
            "udev_device_new_from_devnum",
            "udev_device_new_from_subsystem_sysname",
            "udev_device_new_from_device_id",
            "udev_device_new_from_environment",
            "udev_device_get_parent",
            "udev_device_get_parent_with_subsystem_devtype",
            "udev_device_get_devpath",
            "udev_device_get_subsystem",
            "udev_device_get_devtype",
            "udev_device_get_syspath",
            "udev_device_get_sysname",
            "udev_device_get_sysnum",
            "udev_device_get_devnode",
            "udev_device_get_is_initialized",
            "udev_device_get_devlinks_list_entry",
            "udev_device_get_properties_list_entry",
            "udev_device_get_tags_list_entry",
            "udev_device_get_sysattr_list_entry",
            "udev_device_get_property_value",
            "udev_device_get_driver",
            "udev_device_get_devnum",
            "udev_device_get_action",
            "udev_device_get_seqnum",
            "udev_device_get_usec_since_initialized",
            "udev_device_get_sysattr_value",
            "udev_device_set_sysattr_value",
            "udev_device_has_tag",
            "udev_monitor_ref",
            "udev_monitor_unref",
            "udev_monitor_get_udev",
            "udev_monitor_new_from_netlink",
            "udev_monitor_enable_receiving",
            "udev_monitor_set_receive_buffer_size",
            "udev_monitor_get_fd",
            "udev_monitor_receive_device",
            "udev_monitor_filter_add_match_subsystem_devtype",
            "udev_monitor_filter_add_match_tag",
            "udev_monitor_filter_update",
            "udev_monitor_filter_remove",
            "udev_enumerate_ref",
            "udev_enumerate_unref",
            "udev_enumerate_get_udev",
            "udev_enumerate_new",
            "udev_enumerate_add_match_subsystem",
            "udev_enumerate_add_nomatch_subsystem",
            "udev_enumerate_add_match_sysattr",
            "udev_enumerate_add_nomatch_sysattr",
            "udev_enumerate_add_match_property",
            "udev_enumerate_add_match_sysname",
            "udev_enumerate_add_match_tag",
            "udev_enumerate_add_match_parent",
            "udev_enumerate_add_match_is_initialized",
            "udev_enumerate_add_syspath",
            "udev_enumerate_scan_devices",
            "udev_enumerate_scan_subsystems",
            "udev_enumerate_get_list_entry",
            "udev_queue_ref",
            "udev_queue_unref",
            "udev_queue_get_udev",
            "udev_queue_new",
            "udev_queue_get_kernel_seqnum",
            "udev_queue_get_udev_seqnum",
            "udev_queue_get_udev_is_active",
            "udev_queue_get_queue_is_empty",
            "udev_queue_get_seqnum_is_finished",
            "udev_queue_get_seqnum_sequence_is_finished",
            "udev_queue_get_fd",
            "udev_queue_flush",
            "udev_queue_get_queued_list_entry",
            "udev_hwdb_new",
            "udev_hwdb_ref",
            "udev_hwdb_unref",
            "udev_hwdb_get_properties_list_entry",
            "udev_util_encode_string",
            "udev_ref",
            "udev_unref",
            "udev_new",
            "udev_set_log_fn",
            "udev_get_log_priority",
            "udev_set_log_priority",
            "udev_get_userdata",
            "udev_set_userdata",
            "udev_list_entry_get_next",
            "udev_list_entry_get_by_name",
            "udev_list_entry_get_name",
            "udev_list_entry_get_value",
            "udev_device_ref",
            "udev_device_unref",
            "udev_device_get_udev",
            "udev_device_new_from_syspath",
            "udev_device_new_from_devnum",
            "udev_device_new_from_subsystem_sysname",
            "udev_device_new_from_device_id",
            "udev_device_new_from_environment",
            "udev_device_get_parent",
            "udev_device_get_parent_with_subsystem_devtype",
            "udev_device_get_devpath",
            "udev_device_get_subsystem",
            "udev_device_get_devtype",
            "udev_device_get_syspath",
            "udev_device_get_sysname",
            "udev_device_get_sysnum",
            "udev_device_get_devnode",
            "udev_device_get_is_initialized",
            "udev_device_get_devlinks_list_entry",
            "udev_device_get_properties_list_entry",
            "udev_device_get_tags_list_entry",
            "udev_device_get_sysattr_list_entry",
            "udev_device_get_property_value",
            "udev_device_get_driver",
            "udev_device_get_devnum",
            "udev_device_get_action",
            "udev_device_get_seqnum",
            "udev_device_get_usec_since_initialized",
            "udev_device_get_sysattr_value",
            "udev_device_set_sysattr_value",
            "udev_device_has_tag",
            "udev_monitor_ref",
            "udev_monitor_unref",
            "udev_monitor_get_udev",
            "udev_monitor_new_from_netlink",
            "udev_monitor_enable_receiving",
            "udev_monitor_set_receive_buffer_size",
            "udev_monitor_get_fd",
            "udev_monitor_receive_device",
            "udev_monitor_filter_add_match_subsystem_devtype",
            "udev_monitor_filter_add_match_tag",
            "udev_monitor_filter_update",
            "udev_monitor_filter_remove",
            "udev_enumerate_ref",
            "udev_enumerate_unref",
            "udev_enumerate_get_udev",
            "udev_enumerate_new",
            "udev_enumerate_add_match_subsystem",
            "udev_enumerate_add_nomatch_subsystem",
            "udev_enumerate_add_match_sysattr",
            "udev_enumerate_add_nomatch_sysattr",
            "udev_enumerate_add_match_property",
            "udev_enumerate_add_match_sysname",
            "udev_enumerate_add_match_tag",
            "udev_enumerate_add_match_parent",
            "udev_enumerate_add_match_is_initialized",
            "udev_enumerate_add_syspath",
            "udev_enumerate_scan_devices",
            "udev_enumerate_scan_subsystems",
            "udev_enumerate_get_list_entry",
            "udev_queue_ref",
            "udev_queue_unref",
            "udev_queue_get_udev",
            "udev_queue_new",
            "udev_queue_get_kernel_seqnum",
            "udev_queue_get_udev_seqnum",
            "udev_queue_get_udev_is_active",
            "udev_queue_get_queue_is_empty",
            "udev_queue_get_seqnum_is_finished",
            "udev_queue_get_seqnum_sequence_is_finished",
            "udev_queue_get_fd",
            "udev_queue_flush",
            "udev_queue_get_queued_list_entry",
            "udev_hwdb_new",
            "udev_hwdb_ref",
            "udev_hwdb_unref",
            "udev_hwdb_get_properties_list_entry",
            "udev_util_encode_string"
        ]
    },
    "platform/linuxbsd/joypad_linux.h": {
        "classes": [
            "JoypadLinux"
        ],
        "structs": [
            "JoypadEvent",
            "Joypad"
        ],
        "defines": [
            "JOYPAD_LINUX_H"
        ]
    },
    "platform/linuxbsd/dbus-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_DBUS",
            "dbus_error_init",
            "dbus_error_free",
            "dbus_set_error",
            "dbus_set_error_const",
            "dbus_move_error",
            "dbus_error_has_name",
            "dbus_error_is_set",
            "dbus_parse_address",
            "dbus_address_entry_get_value",
            "dbus_address_entry_get_method",
            "dbus_address_entries_free",
            "dbus_address_escape_value",
            "dbus_address_unescape_value",
            "dbus_malloc",
            "dbus_malloc0",
            "dbus_realloc",
            "dbus_free",
            "dbus_free_string_array",
            "dbus_shutdown",
            "dbus_message_new",
            "dbus_message_new_method_call",
            "dbus_message_new_method_return",
            "dbus_message_new_signal",
            "dbus_message_new_error",
            "dbus_message_new_error_printf",
            "dbus_message_copy",
            "dbus_message_ref",
            "dbus_message_unref",
            "dbus_message_get_type",
            "dbus_message_set_path",
            "dbus_message_get_path",
            "dbus_message_has_path",
            "dbus_message_set_interface",
            "dbus_message_get_interface",
            "dbus_message_has_interface",
            "dbus_message_set_member",
            "dbus_message_get_member",
            "dbus_message_has_member",
            "dbus_message_set_error_name",
            "dbus_message_get_error_name",
            "dbus_message_set_destination",
            "dbus_message_get_destination",
            "dbus_message_set_sender",
            "dbus_message_get_sender",
            "dbus_message_get_signature",
            "dbus_message_set_no_reply",
            "dbus_message_get_no_reply",
            "dbus_message_is_method_call",
            "dbus_message_is_signal",
            "dbus_message_is_error",
            "dbus_message_has_destination",
            "dbus_message_has_sender",
            "dbus_message_has_signature",
            "dbus_message_get_serial",
            "dbus_message_set_serial",
            "dbus_message_set_reply_serial",
            "dbus_message_get_reply_serial",
            "dbus_message_set_auto_start",
            "dbus_message_get_auto_start",
            "dbus_message_get_path_decomposed",
            "dbus_message_append_args",
            "dbus_message_append_args_valist",
            "dbus_message_get_args",
            "dbus_message_get_args_valist",
            "dbus_message_contains_unix_fds",
            "dbus_message_iter_init_closed",
            "dbus_message_iter_init",
            "dbus_message_iter_has_next",
            "dbus_message_iter_next",
            "dbus_message_iter_get_signature",
            "dbus_message_iter_get_arg_type",
            "dbus_message_iter_get_element_type",
            "dbus_message_iter_recurse",
            "dbus_message_iter_get_basic",
            "dbus_message_iter_get_element_count",
            "dbus_message_iter_get_array_len",
            "dbus_message_iter_get_fixed_array",
            "dbus_message_iter_init_append",
            "dbus_message_iter_append_basic",
            "dbus_message_iter_append_fixed_array",
            "dbus_message_iter_open_container",
            "dbus_message_iter_close_container",
            "dbus_message_iter_abandon_container",
            "dbus_message_iter_abandon_container_if_open",
            "dbus_message_lock",
            "dbus_set_error_from_message",
            "dbus_message_allocate_data_slot",
            "dbus_message_free_data_slot",
            "dbus_message_set_data",
            "dbus_message_get_data",
            "dbus_message_type_from_string",
            "dbus_message_type_to_string",
            "dbus_message_marshal",
            "dbus_message_demarshal",
            "dbus_message_demarshal_bytes_needed",
            "dbus_message_set_allow_interactive_authorization",
            "dbus_message_get_allow_interactive_authorization",
            "dbus_connection_open",
            "dbus_connection_open_private",
            "dbus_connection_ref",
            "dbus_connection_unref",
            "dbus_connection_close",
            "dbus_connection_get_is_connected",
            "dbus_connection_get_is_authenticated",
            "dbus_connection_get_is_anonymous",
            "dbus_connection_get_server_id",
            "dbus_connection_can_send_type",
            "dbus_connection_set_exit_on_disconnect",
            "dbus_connection_flush",
            "dbus_connection_read_write_dispatch",
            "dbus_connection_read_write",
            "dbus_connection_borrow_message",
            "dbus_connection_return_message",
            "dbus_connection_steal_borrowed_message",
            "dbus_connection_pop_message",
            "dbus_connection_get_dispatch_status",
            "dbus_connection_dispatch",
            "dbus_connection_has_messages_to_send",
            "dbus_connection_send",
            "dbus_connection_send_with_reply",
            "dbus_connection_send_with_reply_and_block",
            "dbus_connection_set_watch_functions",
            "dbus_connection_set_timeout_functions",
            "dbus_connection_set_wakeup_main_function",
            "dbus_connection_set_dispatch_status_function",
            "dbus_connection_get_unix_user",
            "dbus_connection_get_unix_process_id",
            "dbus_connection_get_adt_audit_session_data",
            "dbus_connection_set_unix_user_function",
            "dbus_connection_get_windows_user",
            "dbus_connection_set_windows_user_function",
            "dbus_connection_set_allow_anonymous",
            "dbus_connection_set_route_peer_messages",
            "dbus_connection_add_filter",
            "dbus_connection_remove_filter",
            "dbus_connection_allocate_data_slot",
            "dbus_connection_free_data_slot",
            "dbus_connection_set_data",
            "dbus_connection_get_data",
            "dbus_connection_set_change_sigpipe",
            "dbus_connection_set_max_message_size",
            "dbus_connection_get_max_message_size",
            "dbus_connection_set_max_received_size",
            "dbus_connection_get_max_received_size",
            "dbus_connection_set_max_message_unix_fds",
            "dbus_connection_get_max_message_unix_fds",
            "dbus_connection_set_max_received_unix_fds",
            "dbus_connection_get_max_received_unix_fds",
            "dbus_connection_get_outgoing_size",
            "dbus_connection_get_outgoing_unix_fds",
            "dbus_connection_preallocate_send",
            "dbus_connection_free_preallocated_send",
            "dbus_connection_send_preallocated",
            "dbus_connection_try_register_object_path",
            "dbus_connection_register_object_path",
            "dbus_connection_try_register_fallback",
            "dbus_connection_register_fallback",
            "dbus_connection_unregister_object_path",
            "dbus_connection_get_object_path_data",
            "dbus_connection_list_registered",
            "dbus_connection_get_unix_fd",
            "dbus_connection_get_socket",
            "dbus_watch_get_fd",
            "dbus_watch_get_unix_fd",
            "dbus_watch_get_socket",
            "dbus_watch_get_flags",
            "dbus_watch_get_data",
            "dbus_watch_set_data",
            "dbus_watch_handle",
            "dbus_watch_get_enabled",
            "dbus_timeout_get_interval",
            "dbus_timeout_get_data",
            "dbus_timeout_set_data",
            "dbus_timeout_handle",
            "dbus_timeout_get_enabled",
            "dbus_bus_get",
            "dbus_bus_get_private",
            "dbus_bus_register",
            "dbus_bus_set_unique_name",
            "dbus_bus_get_unique_name",
            "dbus_bus_get_unix_user",
            "dbus_bus_get_id",
            "dbus_bus_request_name",
            "dbus_bus_release_name",
            "dbus_bus_name_has_owner",
            "dbus_bus_start_service_by_name",
            "dbus_bus_add_match",
            "dbus_bus_remove_match",
            "dbus_get_local_machine_id",
            "dbus_get_version",
            "dbus_setenv",
            "dbus_try_get_local_machine_id",
            "dbus_pending_call_ref",
            "dbus_pending_call_unref",
            "dbus_pending_call_set_notify",
            "dbus_pending_call_cancel",
            "dbus_pending_call_get_completed",
            "dbus_pending_call_steal_reply",
            "dbus_pending_call_block",
            "dbus_pending_call_allocate_data_slot",
            "dbus_pending_call_free_data_slot",
            "dbus_pending_call_set_data",
            "dbus_pending_call_get_data",
            "dbus_server_listen",
            "dbus_server_ref",
            "dbus_server_unref",
            "dbus_server_disconnect",
            "dbus_server_get_is_connected",
            "dbus_server_get_address",
            "dbus_server_get_id",
            "dbus_server_set_new_connection_function",
            "dbus_server_set_watch_functions",
            "dbus_server_set_timeout_functions",
            "dbus_server_set_auth_mechanisms",
            "dbus_server_allocate_data_slot",
            "dbus_server_free_data_slot",
            "dbus_server_set_data",
            "dbus_server_get_data",
            "dbus_signature_iter_init",
            "dbus_signature_iter_get_current_type",
            "dbus_signature_iter_get_signature",
            "dbus_signature_iter_get_element_type",
            "dbus_signature_iter_next",
            "dbus_signature_iter_recurse",
            "dbus_signature_validate",
            "dbus_signature_validate_single",
            "dbus_type_is_valid",
            "dbus_type_is_basic",
            "dbus_type_is_container",
            "dbus_type_is_fixed",
            "dbus_validate_path",
            "dbus_validate_interface",
            "dbus_validate_member",
            "dbus_validate_error_name",
            "dbus_validate_bus_name",
            "dbus_validate_utf8",
            "dbus_threads_init",
            "dbus_threads_init_default",
            "dbus_error_init",
            "dbus_error_free",
            "dbus_set_error",
            "dbus_set_error_const",
            "dbus_move_error",
            "dbus_error_has_name",
            "dbus_error_is_set",
            "dbus_parse_address",
            "dbus_address_entry_get_value",
            "dbus_address_entry_get_method",
            "dbus_address_entries_free",
            "dbus_address_escape_value",
            "dbus_address_unescape_value",
            "dbus_malloc",
            "dbus_malloc0",
            "dbus_realloc",
            "dbus_free",
            "dbus_free_string_array",
            "dbus_shutdown",
            "dbus_message_new",
            "dbus_message_new_method_call",
            "dbus_message_new_method_return",
            "dbus_message_new_signal",
            "dbus_message_new_error",
            "dbus_message_new_error_printf",
            "dbus_message_copy",
            "dbus_message_ref",
            "dbus_message_unref",
            "dbus_message_get_type",
            "dbus_message_set_path",
            "dbus_message_get_path",
            "dbus_message_has_path",
            "dbus_message_set_interface",
            "dbus_message_get_interface",
            "dbus_message_has_interface",
            "dbus_message_set_member",
            "dbus_message_get_member",
            "dbus_message_has_member",
            "dbus_message_set_error_name",
            "dbus_message_get_error_name",
            "dbus_message_set_destination",
            "dbus_message_get_destination",
            "dbus_message_set_sender",
            "dbus_message_get_sender",
            "dbus_message_get_signature",
            "dbus_message_set_no_reply",
            "dbus_message_get_no_reply",
            "dbus_message_is_method_call",
            "dbus_message_is_signal",
            "dbus_message_is_error",
            "dbus_message_has_destination",
            "dbus_message_has_sender",
            "dbus_message_has_signature",
            "dbus_message_get_serial",
            "dbus_message_set_serial",
            "dbus_message_set_reply_serial",
            "dbus_message_get_reply_serial",
            "dbus_message_set_auto_start",
            "dbus_message_get_auto_start",
            "dbus_message_get_path_decomposed",
            "dbus_message_append_args",
            "dbus_message_append_args_valist",
            "dbus_message_get_args",
            "dbus_message_get_args_valist",
            "dbus_message_contains_unix_fds",
            "dbus_message_iter_init_closed",
            "dbus_message_iter_init",
            "dbus_message_iter_has_next",
            "dbus_message_iter_next",
            "dbus_message_iter_get_signature",
            "dbus_message_iter_get_arg_type",
            "dbus_message_iter_get_element_type",
            "dbus_message_iter_recurse",
            "dbus_message_iter_get_basic",
            "dbus_message_iter_get_element_count",
            "dbus_message_iter_get_array_len",
            "dbus_message_iter_get_fixed_array",
            "dbus_message_iter_init_append",
            "dbus_message_iter_append_basic",
            "dbus_message_iter_append_fixed_array",
            "dbus_message_iter_open_container",
            "dbus_message_iter_close_container",
            "dbus_message_iter_abandon_container",
            "dbus_message_iter_abandon_container_if_open",
            "dbus_message_lock",
            "dbus_set_error_from_message",
            "dbus_message_allocate_data_slot",
            "dbus_message_free_data_slot",
            "dbus_message_set_data",
            "dbus_message_get_data",
            "dbus_message_type_from_string",
            "dbus_message_type_to_string",
            "dbus_message_marshal",
            "dbus_message_demarshal",
            "dbus_message_demarshal_bytes_needed",
            "dbus_message_set_allow_interactive_authorization",
            "dbus_message_get_allow_interactive_authorization",
            "dbus_connection_open",
            "dbus_connection_open_private",
            "dbus_connection_ref",
            "dbus_connection_unref",
            "dbus_connection_close",
            "dbus_connection_get_is_connected",
            "dbus_connection_get_is_authenticated",
            "dbus_connection_get_is_anonymous",
            "dbus_connection_get_server_id",
            "dbus_connection_can_send_type",
            "dbus_connection_set_exit_on_disconnect",
            "dbus_connection_flush",
            "dbus_connection_read_write_dispatch",
            "dbus_connection_read_write",
            "dbus_connection_borrow_message",
            "dbus_connection_return_message",
            "dbus_connection_steal_borrowed_message",
            "dbus_connection_pop_message",
            "dbus_connection_get_dispatch_status",
            "dbus_connection_dispatch",
            "dbus_connection_has_messages_to_send",
            "dbus_connection_send",
            "dbus_connection_send_with_reply",
            "dbus_connection_send_with_reply_and_block",
            "dbus_connection_set_watch_functions",
            "dbus_connection_set_timeout_functions",
            "dbus_connection_set_wakeup_main_function",
            "dbus_connection_set_dispatch_status_function",
            "dbus_connection_get_unix_user",
            "dbus_connection_get_unix_process_id",
            "dbus_connection_get_adt_audit_session_data",
            "dbus_connection_set_unix_user_function",
            "dbus_connection_get_windows_user",
            "dbus_connection_set_windows_user_function",
            "dbus_connection_set_allow_anonymous",
            "dbus_connection_set_route_peer_messages",
            "dbus_connection_add_filter",
            "dbus_connection_remove_filter",
            "dbus_connection_allocate_data_slot",
            "dbus_connection_free_data_slot",
            "dbus_connection_set_data",
            "dbus_connection_get_data",
            "dbus_connection_set_change_sigpipe",
            "dbus_connection_set_max_message_size",
            "dbus_connection_get_max_message_size",
            "dbus_connection_set_max_received_size",
            "dbus_connection_get_max_received_size",
            "dbus_connection_set_max_message_unix_fds",
            "dbus_connection_get_max_message_unix_fds",
            "dbus_connection_set_max_received_unix_fds",
            "dbus_connection_get_max_received_unix_fds",
            "dbus_connection_get_outgoing_size",
            "dbus_connection_get_outgoing_unix_fds",
            "dbus_connection_preallocate_send",
            "dbus_connection_free_preallocated_send",
            "dbus_connection_send_preallocated",
            "dbus_connection_try_register_object_path",
            "dbus_connection_register_object_path",
            "dbus_connection_try_register_fallback",
            "dbus_connection_register_fallback",
            "dbus_connection_unregister_object_path",
            "dbus_connection_get_object_path_data",
            "dbus_connection_list_registered",
            "dbus_connection_get_unix_fd",
            "dbus_connection_get_socket",
            "dbus_watch_get_fd",
            "dbus_watch_get_unix_fd",
            "dbus_watch_get_socket",
            "dbus_watch_get_flags",
            "dbus_watch_get_data",
            "dbus_watch_set_data",
            "dbus_watch_handle",
            "dbus_watch_get_enabled",
            "dbus_timeout_get_interval",
            "dbus_timeout_get_data",
            "dbus_timeout_set_data",
            "dbus_timeout_handle",
            "dbus_timeout_get_enabled",
            "dbus_bus_get",
            "dbus_bus_get_private",
            "dbus_bus_register",
            "dbus_bus_set_unique_name",
            "dbus_bus_get_unique_name",
            "dbus_bus_get_unix_user",
            "dbus_bus_get_id",
            "dbus_bus_request_name",
            "dbus_bus_release_name",
            "dbus_bus_name_has_owner",
            "dbus_bus_start_service_by_name",
            "dbus_bus_add_match",
            "dbus_bus_remove_match",
            "dbus_get_local_machine_id",
            "dbus_get_version",
            "dbus_setenv",
            "dbus_try_get_local_machine_id",
            "dbus_pending_call_ref",
            "dbus_pending_call_unref",
            "dbus_pending_call_set_notify",
            "dbus_pending_call_cancel",
            "dbus_pending_call_get_completed",
            "dbus_pending_call_steal_reply",
            "dbus_pending_call_block",
            "dbus_pending_call_allocate_data_slot",
            "dbus_pending_call_free_data_slot",
            "dbus_pending_call_set_data",
            "dbus_pending_call_get_data",
            "dbus_server_listen",
            "dbus_server_ref",
            "dbus_server_unref",
            "dbus_server_disconnect",
            "dbus_server_get_is_connected",
            "dbus_server_get_address",
            "dbus_server_get_id",
            "dbus_server_set_new_connection_function",
            "dbus_server_set_watch_functions",
            "dbus_server_set_timeout_functions",
            "dbus_server_set_auth_mechanisms",
            "dbus_server_allocate_data_slot",
            "dbus_server_free_data_slot",
            "dbus_server_set_data",
            "dbus_server_get_data",
            "dbus_signature_iter_init",
            "dbus_signature_iter_get_current_type",
            "dbus_signature_iter_get_signature",
            "dbus_signature_iter_get_element_type",
            "dbus_signature_iter_next",
            "dbus_signature_iter_recurse",
            "dbus_signature_validate",
            "dbus_signature_validate_single",
            "dbus_type_is_valid",
            "dbus_type_is_basic",
            "dbus_type_is_container",
            "dbus_type_is_fixed",
            "dbus_validate_path",
            "dbus_validate_interface",
            "dbus_validate_member",
            "dbus_validate_error_name",
            "dbus_validate_bus_name",
            "dbus_validate_utf8",
            "dbus_threads_init",
            "dbus_threads_init_default"
        ]
    },
    "platform/linuxbsd/logo.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/linuxbsd/os_linuxbsd.h": {
        "classes": [
            "OS_LinuxBSD"
        ],
        "structs": [],
        "defines": [
            "OS_LINUXBSD_H"
        ]
    },
    "platform/linuxbsd/wayland/wayland_thread.h": {
        "classes": [
            "WaylandThread",
            "Message",
            "WindowRectMessage",
            "WindowEventMessage",
            "InputEventMessage",
            "DropFilesEventMessage",
            "Gesture",
            "PointerConstraint"
        ],
        "structs": [
            "RegistryState",
            "WindowState",
            "ScreenData",
            "ScreenState",
            "PointerData",
            "TabletToolData",
            "TabletToolState",
            "OfferState",
            "SeatState",
            "CustomCursor",
            "ThreadData"
        ],
        "defines": [
            "WAYLAND_THREAD_H",
            "pointer"
        ]
    },
    "platform/linuxbsd/wayland/rendering_context_driver_vulkan_wayland.h": {
        "classes": [
            "RenderingContextDriverVulkanWayland"
        ],
        "structs": [
            "WindowPlatformData"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_VULKAN_WAYLAND_H"
        ]
    },
    "platform/linuxbsd/wayland/display_server_wayland.h": {
        "classes": [
            "DisplayServerWayland"
        ],
        "structs": [
            "WindowData",
            "CustomCursor"
        ],
        "defines": [
            "DISPLAY_SERVER_WAYLAND_H"
        ]
    },
    "platform/linuxbsd/wayland/egl_manager_wayland.h": {
        "classes": [
            "EGLManagerWayland"
        ],
        "structs": [],
        "defines": [
            "EGL_MANAGER_WAYLAND_H"
        ]
    },
    "platform/linuxbsd/wayland/key_mapping_xkb.h": {
        "classes": [
            "KeyMappingXKB"
        ],
        "structs": [
            "HashMapHasherKeys"
        ],
        "defines": [
            "KEY_MAPPING_XKB_H"
        ]
    },
    "platform/linuxbsd/wayland/detect_prime_egl.h": {
        "classes": [
            "DetectPrimeEGL"
        ],
        "structs": [
            "Vendor"
        ],
        "defines": [
            "DETECT_PRIME_EGL_H"
        ]
    },
    "platform/linuxbsd/wayland/dynwrappers/libdecor-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_LIBDECOR",
            "libdecor_unref",
            "libdecor_new",
            "libdecor_get_fd",
            "libdecor_dispatch",
            "libdecor_decorate",
            "libdecor_frame_ref",
            "libdecor_frame_unref",
            "libdecor_frame_set_visibility",
            "libdecor_frame_is_visible",
            "libdecor_frame_set_parent",
            "libdecor_frame_set_title",
            "libdecor_frame_get_title",
            "libdecor_frame_set_app_id",
            "libdecor_frame_set_capabilities",
            "libdecor_frame_unset_capabilities",
            "libdecor_frame_has_capability",
            "libdecor_frame_show_window_menu",
            "libdecor_frame_popup_grab",
            "libdecor_frame_popup_ungrab",
            "libdecor_frame_translate_coordinate",
            "libdecor_frame_set_min_content_size",
            "libdecor_frame_set_max_content_size",
            "libdecor_frame_resize",
            "libdecor_frame_move",
            "libdecor_frame_commit",
            "libdecor_frame_set_minimized",
            "libdecor_frame_set_maximized",
            "libdecor_frame_unset_maximized",
            "libdecor_frame_set_fullscreen",
            "libdecor_frame_unset_fullscreen",
            "libdecor_frame_is_floating",
            "libdecor_frame_close",
            "libdecor_frame_map",
            "libdecor_frame_get_xdg_surface",
            "libdecor_frame_get_xdg_toplevel",
            "libdecor_state_new",
            "libdecor_state_free",
            "libdecor_configuration_get_content_size",
            "libdecor_configuration_get_window_state",
            "libdecor_unref",
            "libdecor_new",
            "libdecor_get_fd",
            "libdecor_dispatch",
            "libdecor_decorate",
            "libdecor_frame_ref",
            "libdecor_frame_unref",
            "libdecor_frame_set_visibility",
            "libdecor_frame_is_visible",
            "libdecor_frame_set_parent",
            "libdecor_frame_set_title",
            "libdecor_frame_get_title",
            "libdecor_frame_set_app_id",
            "libdecor_frame_set_capabilities",
            "libdecor_frame_unset_capabilities",
            "libdecor_frame_has_capability",
            "libdecor_frame_show_window_menu",
            "libdecor_frame_popup_grab",
            "libdecor_frame_popup_ungrab",
            "libdecor_frame_translate_coordinate",
            "libdecor_frame_set_min_content_size",
            "libdecor_frame_set_max_content_size",
            "libdecor_frame_resize",
            "libdecor_frame_move",
            "libdecor_frame_commit",
            "libdecor_frame_set_minimized",
            "libdecor_frame_set_maximized",
            "libdecor_frame_unset_maximized",
            "libdecor_frame_set_fullscreen",
            "libdecor_frame_unset_fullscreen",
            "libdecor_frame_is_floating",
            "libdecor_frame_close",
            "libdecor_frame_map",
            "libdecor_frame_get_xdg_surface",
            "libdecor_frame_get_xdg_toplevel",
            "libdecor_state_new",
            "libdecor_state_free",
            "libdecor_configuration_get_content_size",
            "libdecor_configuration_get_window_state"
        ]
    },
    "platform/linuxbsd/wayland/dynwrappers/wayland-cursor-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_WAYLAND_CURSOR",
            "wl_cursor_theme_load",
            "wl_cursor_theme_destroy",
            "wl_cursor_theme_get_cursor",
            "wl_cursor_image_get_buffer",
            "wl_cursor_frame",
            "wl_cursor_frame_and_duration",
            "wl_cursor_theme_load",
            "wl_cursor_theme_destroy",
            "wl_cursor_theme_get_cursor",
            "wl_cursor_image_get_buffer",
            "wl_cursor_frame",
            "wl_cursor_frame_and_duration"
        ]
    },
    "platform/linuxbsd/wayland/dynwrappers/wayland-egl-core-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_WAYLAND_EGL",
            "wl_egl_window_create",
            "wl_egl_window_destroy",
            "wl_egl_window_resize",
            "wl_egl_window_get_attached_size",
            "wl_egl_window_create",
            "wl_egl_window_destroy",
            "wl_egl_window_resize",
            "wl_egl_window_get_attached_size"
        ]
    },
    "platform/linuxbsd/wayland/dynwrappers/wayland-client-core-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_WAYLAND_CLIENT",
            "wl_list_init",
            "wl_list_insert",
            "wl_list_remove",
            "wl_list_length",
            "wl_list_empty",
            "wl_list_insert_list",
            "wl_array_init",
            "wl_array_release",
            "wl_array_add",
            "wl_array_copy",
            "wl_event_queue_destroy",
            "wl_proxy_marshal_flags",
            "wl_proxy_marshal_array_flags",
            "wl_proxy_marshal",
            "wl_proxy_marshal_array",
            "wl_proxy_create",
            "wl_proxy_create_wrapper",
            "wl_proxy_wrapper_destroy",
            "wl_proxy_marshal_constructor",
            "wl_proxy_marshal_constructor_versioned",
            "wl_proxy_marshal_array_constructor",
            "wl_proxy_marshal_array_constructor_versioned",
            "wl_proxy_destroy",
            "wl_proxy_add_listener",
            "wl_proxy_get_listener",
            "wl_proxy_add_dispatcher",
            "wl_proxy_set_user_data",
            "wl_proxy_get_user_data",
            "wl_proxy_get_version",
            "wl_proxy_get_id",
            "wl_proxy_set_tag",
            "wl_proxy_get_tag",
            "wl_proxy_get_class",
            "wl_proxy_set_queue",
            "wl_display_connect",
            "wl_display_connect_to_fd",
            "wl_display_disconnect",
            "wl_display_get_fd",
            "wl_display_dispatch",
            "wl_display_dispatch_queue",
            "wl_display_dispatch_queue_pending",
            "wl_display_dispatch_pending",
            "wl_display_get_error",
            "wl_display_get_protocol_error",
            "wl_display_flush",
            "wl_display_roundtrip_queue",
            "wl_display_roundtrip",
            "wl_display_create_queue",
            "wl_display_prepare_read_queue",
            "wl_display_prepare_read",
            "wl_display_cancel_read",
            "wl_display_read_events",
            "wl_log_set_handler_client",
            "wl_list_init",
            "wl_list_insert",
            "wl_list_remove",
            "wl_list_length",
            "wl_list_empty",
            "wl_list_insert_list",
            "wl_array_init",
            "wl_array_release",
            "wl_array_add",
            "wl_array_copy",
            "wl_event_queue_destroy",
            "wl_proxy_marshal_flags",
            "wl_proxy_marshal_array_flags",
            "wl_proxy_marshal",
            "wl_proxy_marshal_array",
            "wl_proxy_create",
            "wl_proxy_create_wrapper",
            "wl_proxy_wrapper_destroy",
            "wl_proxy_marshal_constructor",
            "wl_proxy_marshal_constructor_versioned",
            "wl_proxy_marshal_array_constructor",
            "wl_proxy_marshal_array_constructor_versioned",
            "wl_proxy_destroy",
            "wl_proxy_add_listener",
            "wl_proxy_get_listener",
            "wl_proxy_add_dispatcher",
            "wl_proxy_set_user_data",
            "wl_proxy_get_user_data",
            "wl_proxy_get_version",
            "wl_proxy_get_id",
            "wl_proxy_set_tag",
            "wl_proxy_get_tag",
            "wl_proxy_get_class",
            "wl_proxy_set_queue",
            "wl_display_connect",
            "wl_display_connect_to_fd",
            "wl_display_disconnect",
            "wl_display_get_fd",
            "wl_display_dispatch",
            "wl_display_dispatch_queue",
            "wl_display_dispatch_queue_pending",
            "wl_display_dispatch_pending",
            "wl_display_get_error",
            "wl_display_get_protocol_error",
            "wl_display_flush",
            "wl_display_roundtrip_queue",
            "wl_display_roundtrip",
            "wl_display_create_queue",
            "wl_display_prepare_read_queue",
            "wl_display_prepare_read",
            "wl_display_cancel_read",
            "wl_display_read_events",
            "wl_log_set_handler_client"
        ]
    },
    "platform/linuxbsd/x11/rendering_context_driver_vulkan_x11.h": {
        "classes": [
            "RenderingContextDriverVulkanX11"
        ],
        "structs": [
            "WindowPlatformData"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_VULKAN_X11_H"
        ]
    },
    "platform/linuxbsd/x11/key_mapping_x11.h": {
        "classes": [
            "KeyMappingX11"
        ],
        "structs": [
            "HashMapHasherKeys"
        ],
        "defines": [
            "KEY_MAPPING_X11_H",
            "XK_MISCELLANY",
            "XK_LATIN1",
            "XK_XKB_KEYS"
        ]
    },
    "platform/linuxbsd/x11/detect_prime_x11.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DETECT_PRIME_X11_H"
        ]
    },
    "platform/linuxbsd/x11/gl_manager_x11_egl.h": {
        "classes": [
            "GLManagerEGL_X11"
        ],
        "structs": [],
        "defines": [
            "GL_MANAGER_X11_EGL_H"
        ]
    },
    "platform/linuxbsd/x11/gl_manager_x11.h": {
        "classes": [
            "GLManager_X11"
        ],
        "structs": [
            "GLWindow",
            "GLDisplay",
            "XWinDisp"
        ],
        "defines": [
            "GL_MANAGER_X11_H"
        ]
    },
    "platform/linuxbsd/x11/display_server_x11.h": {
        "classes": [
            "DisplayServerX11"
        ],
        "structs": [
            "_xrr_monitor_info",
            "WindowData",
            "Property"
        ],
        "defines": [
            "DISPLAY_SERVER_X11_H"
        ]
    },
    "platform/linuxbsd/x11/dynwrappers/xrender-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_XRENDER",
            "XRenderQueryExtension",
            "XRenderQueryVersion",
            "XRenderQueryFormats",
            "XRenderQuerySubpixelOrder",
            "XRenderSetSubpixelOrder",
            "XRenderFindVisualFormat",
            "XRenderFindFormat",
            "XRenderFindStandardFormat",
            "XRenderQueryPictIndexValues",
            "XRenderCreatePicture",
            "XRenderChangePicture",
            "XRenderSetPictureClipRectangles",
            "XRenderSetPictureClipRegion",
            "XRenderSetPictureTransform",
            "XRenderFreePicture",
            "XRenderComposite",
            "XRenderCreateGlyphSet",
            "XRenderReferenceGlyphSet",
            "XRenderFreeGlyphSet",
            "XRenderAddGlyphs",
            "XRenderFreeGlyphs",
            "XRenderCompositeString8",
            "XRenderCompositeString16",
            "XRenderCompositeString32",
            "XRenderCompositeText8",
            "XRenderCompositeText16",
            "XRenderCompositeText32",
            "XRenderFillRectangle",
            "XRenderFillRectangles",
            "XRenderCompositeTrapezoids",
            "XRenderCompositeTriangles",
            "XRenderCompositeTriStrip",
            "XRenderCompositeTriFan",
            "XRenderCompositeDoublePoly",
            "XRenderParseColor",
            "XRenderCreateCursor",
            "XRenderQueryFilters",
            "XRenderSetPictureFilter",
            "XRenderCreateAnimCursor",
            "XRenderAddTraps",
            "XRenderCreateSolidFill",
            "XRenderCreateLinearGradient",
            "XRenderCreateRadialGradient",
            "XRenderCreateConicalGradient",
            "XRenderQueryExtension",
            "XRenderQueryVersion",
            "XRenderQueryFormats",
            "XRenderQuerySubpixelOrder",
            "XRenderSetSubpixelOrder",
            "XRenderFindVisualFormat",
            "XRenderFindFormat",
            "XRenderFindStandardFormat",
            "XRenderQueryPictIndexValues",
            "XRenderCreatePicture",
            "XRenderChangePicture",
            "XRenderSetPictureClipRectangles",
            "XRenderSetPictureClipRegion",
            "XRenderSetPictureTransform",
            "XRenderFreePicture",
            "XRenderComposite",
            "XRenderCreateGlyphSet",
            "XRenderReferenceGlyphSet",
            "XRenderFreeGlyphSet",
            "XRenderAddGlyphs",
            "XRenderFreeGlyphs",
            "XRenderCompositeString8",
            "XRenderCompositeString16",
            "XRenderCompositeString32",
            "XRenderCompositeText8",
            "XRenderCompositeText16",
            "XRenderCompositeText32",
            "XRenderFillRectangle",
            "XRenderFillRectangles",
            "XRenderCompositeTrapezoids",
            "XRenderCompositeTriangles",
            "XRenderCompositeTriStrip",
            "XRenderCompositeTriFan",
            "XRenderCompositeDoublePoly",
            "XRenderParseColor",
            "XRenderCreateCursor",
            "XRenderQueryFilters",
            "XRenderSetPictureFilter",
            "XRenderCreateAnimCursor",
            "XRenderAddTraps",
            "XRenderCreateSolidFill",
            "XRenderCreateLinearGradient",
            "XRenderCreateRadialGradient",
            "XRenderCreateConicalGradient"
        ]
    },
    "platform/linuxbsd/x11/dynwrappers/xlib-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_XLIB",
            "_Xmblen",
            "XLoadQueryFont",
            "XQueryFont",
            "XGetMotionEvents",
            "XDeleteModifiermapEntry",
            "XGetModifierMapping",
            "XInsertModifiermapEntry",
            "XNewModifiermap",
            "XCreateImage",
            "XInitImage",
            "XGetImage",
            "XGetSubImage",
            "XOpenDisplay",
            "XrmInitialize",
            "XFetchBytes",
            "XFetchBuffer",
            "XGetAtomName",
            "XGetAtomNames",
            "XGetDefault",
            "XDisplayName",
            "XKeysymToString",
            "XSynchronize",
            "XSetAfterFunction",
            "XInternAtom",
            "XInternAtoms",
            "XCopyColormapAndFree",
            "XCreateColormap",
            "XCreatePixmapCursor",
            "XCreateGlyphCursor",
            "XCreateFontCursor",
            "XLoadFont",
            "XCreateGC",
            "XGContextFromGC",
            "XFlushGC",
            "XCreatePixmap",
            "XCreateBitmapFromData",
            "XCreatePixmapFromBitmapData",
            "XCreateSimpleWindow",
            "XGetSelectionOwner",
            "XCreateWindow",
            "XListInstalledColormaps",
            "XListFonts",
            "XListFontsWithInfo",
            "XGetFontPath",
            "XListExtensions",
            "XListProperties",
            "XListHosts",
            "XKeycodeToKeysym",
            "XLookupKeysym",
            "XGetKeyboardMapping",
            "XStringToKeysym",
            "XMaxRequestSize",
            "XExtendedMaxRequestSize",
            "XResourceManagerString",
            "XScreenResourceString",
            "XDisplayMotionBufferSize",
            "XVisualIDFromVisual",
            "XInitThreads",
            "XLockDisplay",
            "XUnlockDisplay",
            "XInitExtension",
            "XAddExtension",
            "XFindOnExtensionList",
            "XEHeadOfExtensionList",
            "XRootWindow",
            "XDefaultRootWindow",
            "XRootWindowOfScreen",
            "XDefaultVisual",
            "XDefaultVisualOfScreen",
            "XDefaultGC",
            "XDefaultGCOfScreen",
            "XBlackPixel",
            "XWhitePixel",
            "XAllPlanes",
            "XBlackPixelOfScreen",
            "XWhitePixelOfScreen",
            "XNextRequest",
            "XLastKnownRequestProcessed",
            "XServerVendor",
            "XDisplayString",
            "XDefaultColormap",
            "XDefaultColormapOfScreen",
            "XDisplayOfScreen",
            "XScreenOfDisplay",
            "XDefaultScreenOfDisplay",
            "XEventMaskOfScreen",
            "XScreenNumberOfScreen",
            "XSetErrorHandler",
            "XSetIOErrorHandler",
            "XListPixmapFormats",
            "XListDepths",
            "XReconfigureWMWindow",
            "XGetWMProtocols",
            "XSetWMProtocols",
            "XIconifyWindow",
            "XWithdrawWindow",
            "XGetCommand",
            "XGetWMColormapWindows",
            "XSetWMColormapWindows",
            "XFreeStringList",
            "XSetTransientForHint",
            "XActivateScreenSaver",
            "XAddHost",
            "XAddHosts",
            "XAddToExtensionList",
            "XAddToSaveSet",
            "XAllocColor",
            "XAllocColorCells",
            "XAllocColorPlanes",
            "XAllocNamedColor",
            "XAllowEvents",
            "XAutoRepeatOff",
            "XAutoRepeatOn",
            "XBell",
            "XBitmapBitOrder",
            "XBitmapPad",
            "XBitmapUnit",
            "XCellsOfScreen",
            "XChangeActivePointerGrab",
            "XChangeGC",
            "XChangeKeyboardControl",
            "XChangeKeyboardMapping",
            "XChangePointerControl",
            "XChangeProperty",
            "XChangeSaveSet",
            "XChangeWindowAttributes",
            "XCheckIfEvent",
            "XCheckMaskEvent",
            "XCheckTypedEvent",
            "XCheckTypedWindowEvent",
            "XCheckWindowEvent",
            "XCirculateSubwindows",
            "XCirculateSubwindowsDown",
            "XCirculateSubwindowsUp",
            "XClearArea",
            "XClearWindow",
            "XCloseDisplay",
            "XConfigureWindow",
            "XConnectionNumber",
            "XConvertSelection",
            "XCopyArea",
            "XCopyGC",
            "XCopyPlane",
            "XDefaultDepth",
            "XDefaultDepthOfScreen",
            "XDefaultScreen",
            "XDefineCursor",
            "XDeleteProperty",
            "XDestroyWindow",
            "XDestroySubwindows",
            "XDoesBackingStore",
            "XDoesSaveUnders",
            "XDisableAccessControl",
            "XDisplayCells",
            "XDisplayHeight",
            "XDisplayHeightMM",
            "XDisplayKeycodes",
            "XDisplayPlanes",
            "XDisplayWidth",
            "XDisplayWidthMM",
            "XDrawArc",
            "XDrawArcs",
            "XDrawImageString",
            "XDrawImageString16",
            "XDrawLine",
            "XDrawLines",
            "XDrawPoint",
            "XDrawPoints",
            "XDrawRectangle",
            "XDrawRectangles",
            "XDrawSegments",
            "XDrawString",
            "XDrawString16",
            "XDrawText",
            "XDrawText16",
            "XEnableAccessControl",
            "XEventsQueued",
            "XFetchName",
            "XFillArc",
            "XFillArcs",
            "XFillPolygon",
            "XFillRectangle",
            "XFillRectangles",
            "XFlush",
            "XForceScreenSaver",
            "XFree",
            "XFreeColormap",
            "XFreeColors",
            "XFreeCursor",
            "XFreeExtensionList",
            "XFreeFont",
            "XFreeFontInfo",
            "XFreeFontNames",
            "XFreeFontPath",
            "XFreeGC",
            "XFreeModifiermap",
            "XFreePixmap",
            "XGeometry",
            "XGetErrorDatabaseText",
            "XGetErrorText",
            "XGetFontProperty",
            "XGetGCValues",
            "XGetGeometry",
            "XGetIconName",
            "XGetInputFocus",
            "XGetKeyboardControl",
            "XGetPointerControl",
            "XGetPointerMapping",
            "XGetScreenSaver",
            "XGetTransientForHint",
            "XGetWindowProperty",
            "XGetWindowAttributes",
            "XGrabButton",
            "XGrabKey",
            "XGrabKeyboard",
            "XGrabPointer",
            "XGrabServer",
            "XHeightMMOfScreen",
            "XHeightOfScreen",
            "XIfEvent",
            "XImageByteOrder",
            "XInstallColormap",
            "XKeysymToKeycode",
            "XKillClient",
            "XLookupColor",
            "XLowerWindow",
            "XMapRaised",
            "XMapSubwindows",
            "XMapWindow",
            "XMaskEvent",
            "XMaxCmapsOfScreen",
            "XMinCmapsOfScreen",
            "XMoveResizeWindow",
            "XMoveWindow",
            "XNextEvent",
            "XNoOp",
            "XParseColor",
            "XParseGeometry",
            "XPeekEvent",
            "XPeekIfEvent",
            "XPending",
            "XPlanesOfScreen",
            "XProtocolRevision",
            "XProtocolVersion",
            "XPutBackEvent",
            "XPutImage",
            "XQLength",
            "XQueryBestCursor",
            "XQueryBestSize",
            "XQueryBestStipple",
            "XQueryBestTile",
            "XQueryColor",
            "XQueryColors",
            "XQueryExtension",
            "XQueryKeymap",
            "XQueryPointer",
            "XQueryTextExtents",
            "XQueryTextExtents16",
            "XQueryTree",
            "XRaiseWindow",
            "XReadBitmapFile",
            "XReadBitmapFileData",
            "XRebindKeysym",
            "XRecolorCursor",
            "XRefreshKeyboardMapping",
            "XRemoveFromSaveSet",
            "XRemoveHost",
            "XRemoveHosts",
            "XReparentWindow",
            "XResetScreenSaver",
            "XResizeWindow",
            "XRestackWindows",
            "XRotateBuffers",
            "XRotateWindowProperties",
            "XScreenCount",
            "XSelectInput",
            "XSendEvent",
            "XSetAccessControl",
            "XSetArcMode",
            "XSetBackground",
            "XSetClipMask",
            "XSetClipOrigin",
            "XSetClipRectangles",
            "XSetCloseDownMode",
            "XSetCommand",
            "XSetDashes",
            "XSetFillRule",
            "XSetFillStyle",
            "XSetFont",
            "XSetFontPath",
            "XSetForeground",
            "XSetFunction",
            "XSetGraphicsExposures",
            "XSetIconName",
            "XSetInputFocus",
            "XSetLineAttributes",
            "XSetModifierMapping",
            "XSetPlaneMask",
            "XSetPointerMapping",
            "XSetScreenSaver",
            "XSetSelectionOwner",
            "XSetState",
            "XSetStipple",
            "XSetSubwindowMode",
            "XSetTSOrigin",
            "XSetTile",
            "XSetWindowBackground",
            "XSetWindowBackgroundPixmap",
            "XSetWindowBorder",
            "XSetWindowBorderPixmap",
            "XSetWindowBorderWidth",
            "XSetWindowColormap",
            "XStoreBuffer",
            "XStoreBytes",
            "XStoreColor",
            "XStoreColors",
            "XStoreName",
            "XStoreNamedColor",
            "XSync",
            "XTextExtents",
            "XTextExtents16",
            "XTextWidth",
            "XTextWidth16",
            "XTranslateCoordinates",
            "XUndefineCursor",
            "XUngrabButton",
            "XUngrabKey",
            "XUngrabKeyboard",
            "XUngrabPointer",
            "XUngrabServer",
            "XUninstallColormap",
            "XUnloadFont",
            "XUnmapSubwindows",
            "XUnmapWindow",
            "XVendorRelease",
            "XWarpPointer",
            "XWidthMMOfScreen",
            "XWidthOfScreen",
            "XWindowEvent",
            "XWriteBitmapFile",
            "XSupportsLocale",
            "XSetLocaleModifiers",
            "XOpenOM",
            "XCloseOM",
            "XSetOMValues",
            "XGetOMValues",
            "XDisplayOfOM",
            "XLocaleOfOM",
            "XCreateOC",
            "XDestroyOC",
            "XOMOfOC",
            "XSetOCValues",
            "XGetOCValues",
            "XCreateFontSet",
            "XFreeFontSet",
            "XFontsOfFontSet",
            "XBaseFontNameListOfFontSet",
            "XLocaleOfFontSet",
            "XContextDependentDrawing",
            "XDirectionalDependentDrawing",
            "XContextualDrawing",
            "XExtentsOfFontSet",
            "XmbTextEscapement",
            "XwcTextEscapement",
            "Xutf8TextEscapement",
            "XmbTextExtents",
            "XwcTextExtents",
            "Xutf8TextExtents",
            "XmbTextPerCharExtents",
            "XwcTextPerCharExtents",
            "Xutf8TextPerCharExtents",
            "XmbDrawText",
            "XwcDrawText",
            "Xutf8DrawText",
            "XmbDrawString",
            "XwcDrawString",
            "Xutf8DrawString",
            "XmbDrawImageString",
            "XwcDrawImageString",
            "Xutf8DrawImageString",
            "XOpenIM",
            "XCloseIM",
            "XGetIMValues",
            "XSetIMValues",
            "XDisplayOfIM",
            "XLocaleOfIM",
            "XCreateIC",
            "XDestroyIC",
            "XSetICFocus",
            "XUnsetICFocus",
            "XwcResetIC",
            "XmbResetIC",
            "Xutf8ResetIC",
            "XSetICValues",
            "XGetICValues",
            "XIMOfIC",
            "XFilterEvent",
            "XmbLookupString",
            "XwcLookupString",
            "Xutf8LookupString",
            "XVaCreateNestedList",
            "XRegisterIMInstantiateCallback",
            "XUnregisterIMInstantiateCallback",
            "XInternalConnectionNumbers",
            "XProcessInternalConnection",
            "XAddConnectionWatch",
            "XRemoveConnectionWatch",
            "XSetAuthorization",
            "_Xmbtowc",
            "_Xwctomb",
            "XGetEventData",
            "XFreeEventData",
            "XAllocClassHint",
            "XAllocIconSize",
            "XAllocSizeHints",
            "XAllocStandardColormap",
            "XAllocWMHints",
            "XClipBox",
            "XCreateRegion",
            "XDefaultString",
            "XDeleteContext",
            "XDestroyRegion",
            "XEmptyRegion",
            "XEqualRegion",
            "XFindContext",
            "XGetClassHint",
            "XGetIconSizes",
            "XGetNormalHints",
            "XGetRGBColormaps",
            "XGetSizeHints",
            "XGetStandardColormap",
            "XGetTextProperty",
            "XGetVisualInfo",
            "XGetWMClientMachine",
            "XGetWMHints",
            "XGetWMIconName",
            "XGetWMName",
            "XGetWMNormalHints",
            "XGetWMSizeHints",
            "XGetZoomHints",
            "XIntersectRegion",
            "XConvertCase",
            "XLookupString",
            "XMatchVisualInfo",
            "XOffsetRegion",
            "XPointInRegion",
            "XPolygonRegion",
            "XRectInRegion",
            "XSaveContext",
            "XSetClassHint",
            "XSetIconSizes",
            "XSetNormalHints",
            "XSetRGBColormaps",
            "XSetSizeHints",
            "XSetStandardProperties",
            "XSetTextProperty",
            "XSetWMClientMachine",
            "XSetWMHints",
            "XSetWMIconName",
            "XSetWMName",
            "XSetWMNormalHints",
            "XSetWMProperties",
            "XmbSetWMProperties",
            "Xutf8SetWMProperties",
            "XSetWMSizeHints",
            "XSetRegion",
            "XSetStandardColormap",
            "XSetZoomHints",
            "XShrinkRegion",
            "XStringListToTextProperty",
            "XSubtractRegion",
            "XmbTextListToTextProperty",
            "XwcTextListToTextProperty",
            "Xutf8TextListToTextProperty",
            "XwcFreeStringList",
            "XTextPropertyToStringList",
            "XmbTextPropertyToTextList",
            "XwcTextPropertyToTextList",
            "Xutf8TextPropertyToTextList",
            "XUnionRectWithRegion",
            "XUnionRegion",
            "XWMGeometry",
            "XXorRegion",
            "XkbIgnoreExtension",
            "XkbOpenDisplay",
            "XkbQueryExtension",
            "XkbUseExtension",
            "XkbLibraryVersion",
            "XkbSetXlibControls",
            "XkbGetXlibControls",
            "XkbXlibControlsImplemented",
            "XkbSetAtomFuncs",
            "XkbKeycodeToKeysym",
            "XkbKeysymToModifiers",
            "XkbLookupKeySym",
            "XkbLookupKeyBinding",
            "XkbTranslateKeyCode",
            "XkbTranslateKeySym",
            "XkbSetAutoRepeatRate",
            "XkbGetAutoRepeatRate",
            "XkbChangeEnabledControls",
            "XkbDeviceBell",
            "XkbForceDeviceBell",
            "XkbDeviceBellEvent",
            "XkbBell",
            "XkbForceBell",
            "XkbBellEvent",
            "XkbSelectEvents",
            "XkbSelectEventDetails",
            "XkbNoteMapChanges",
            "XkbNoteNameChanges",
            "XkbGetIndicatorState",
            "XkbGetIndicatorMap",
            "XkbSetIndicatorMap",
            "XkbGetNamedIndicator",
            "XkbGetNamedDeviceIndicator",
            "XkbSetNamedIndicator",
            "XkbSetNamedDeviceIndicator",
            "XkbLockModifiers",
            "XkbLatchModifiers",
            "XkbLockGroup",
            "XkbLatchGroup",
            "XkbSetServerInternalMods",
            "XkbSetIgnoreLockMods",
            "XkbVirtualModsToReal",
            "XkbComputeEffectiveMap",
            "XkbInitCanonicalKeyTypes",
            "XkbAllocKeyboard",
            "XkbFreeKeyboard",
            "XkbAllocClientMap",
            "XkbAllocServerMap",
            "XkbFreeClientMap",
            "XkbFreeServerMap",
            "XkbAddKeyType",
            "XkbAllocIndicatorMaps",
            "XkbFreeIndicatorMaps",
            "XkbGetMap",
            "XkbGetUpdatedMap",
            "XkbGetMapChanges",
            "XkbRefreshKeyboardMapping",
            "XkbGetKeyTypes",
            "XkbGetKeySyms",
            "XkbGetKeyActions",
            "XkbGetKeyBehaviors",
            "XkbGetVirtualMods",
            "XkbGetKeyExplicitComponents",
            "XkbGetKeyModifierMap",
            "XkbGetKeyVirtualModMap",
            "XkbAllocControls",
            "XkbFreeControls",
            "XkbGetControls",
            "XkbSetControls",
            "XkbNoteControlsChanges",
            "XkbAllocCompatMap",
            "XkbFreeCompatMap",
            "XkbGetCompatMap",
            "XkbSetCompatMap",
            "XkbAllocNames",
            "XkbGetNames",
            "XkbSetNames",
            "XkbChangeNames",
            "XkbFreeNames",
            "XkbGetState",
            "XkbSetMap",
            "XkbChangeMap",
            "XkbSetDetectableAutoRepeat",
            "XkbGetDetectableAutoRepeat",
            "XkbSetAutoResetControls",
            "XkbGetAutoResetControls",
            "XkbSetPerClientControls",
            "XkbGetPerClientControls",
            "XkbCopyKeyType",
            "XkbCopyKeyTypes",
            "XkbResizeKeyType",
            "XkbResizeKeySyms",
            "XkbResizeKeyActions",
            "XkbChangeTypesOfKey",
            "XkbChangeKeycodeRange",
            "XkbListComponents",
            "XkbFreeComponentList",
            "XkbGetKeyboard",
            "XkbGetKeyboardByName",
            "XkbKeyTypesForCoreSymbols",
            "XkbApplyCompatMapToKey",
            "XkbUpdateMapFromCore",
            "XkbAddDeviceLedInfo",
            "XkbResizeDeviceButtonActions",
            "XkbAllocDeviceInfo",
            "XkbFreeDeviceInfo",
            "XkbNoteDeviceChanges",
            "XkbGetDeviceInfo",
            "XkbGetDeviceInfoChanges",
            "XkbGetDeviceButtonActions",
            "XkbGetDeviceLedInfo",
            "XkbSetDeviceInfo",
            "XkbChangeDeviceInfo",
            "XkbSetDeviceLedInfo",
            "XkbSetDeviceButtonActions",
            "XkbToControl",
            "XkbSetDebuggingFlags",
            "XkbApplyVirtualModChanges",
            "XkbUpdateActionVirtualMods",
            "XkbUpdateKeyTypeVirtualMods",
            "_Xmblen",
            "XLoadQueryFont",
            "XQueryFont",
            "XGetMotionEvents",
            "XDeleteModifiermapEntry",
            "XGetModifierMapping",
            "XInsertModifiermapEntry",
            "XNewModifiermap",
            "XCreateImage",
            "XInitImage",
            "XGetImage",
            "XGetSubImage",
            "XOpenDisplay",
            "XrmInitialize",
            "XFetchBytes",
            "XFetchBuffer",
            "XGetAtomName",
            "XGetAtomNames",
            "XGetDefault",
            "XDisplayName",
            "XKeysymToString",
            "XSynchronize",
            "XSetAfterFunction",
            "XInternAtom",
            "XInternAtoms",
            "XCopyColormapAndFree",
            "XCreateColormap",
            "XCreatePixmapCursor",
            "XCreateGlyphCursor",
            "XCreateFontCursor",
            "XLoadFont",
            "XCreateGC",
            "XGContextFromGC",
            "XFlushGC",
            "XCreatePixmap",
            "XCreateBitmapFromData",
            "XCreatePixmapFromBitmapData",
            "XCreateSimpleWindow",
            "XGetSelectionOwner",
            "XCreateWindow",
            "XListInstalledColormaps",
            "XListFonts",
            "XListFontsWithInfo",
            "XGetFontPath",
            "XListExtensions",
            "XListProperties",
            "XListHosts",
            "XKeycodeToKeysym",
            "XLookupKeysym",
            "XGetKeyboardMapping",
            "XStringToKeysym",
            "XMaxRequestSize",
            "XExtendedMaxRequestSize",
            "XResourceManagerString",
            "XScreenResourceString",
            "XDisplayMotionBufferSize",
            "XVisualIDFromVisual",
            "XInitThreads",
            "XLockDisplay",
            "XUnlockDisplay",
            "XInitExtension",
            "XAddExtension",
            "XFindOnExtensionList",
            "XEHeadOfExtensionList",
            "XRootWindow",
            "XDefaultRootWindow",
            "XRootWindowOfScreen",
            "XDefaultVisual",
            "XDefaultVisualOfScreen",
            "XDefaultGC",
            "XDefaultGCOfScreen",
            "XBlackPixel",
            "XWhitePixel",
            "XAllPlanes",
            "XBlackPixelOfScreen",
            "XWhitePixelOfScreen",
            "XNextRequest",
            "XLastKnownRequestProcessed",
            "XServerVendor",
            "XDisplayString",
            "XDefaultColormap",
            "XDefaultColormapOfScreen",
            "XDisplayOfScreen",
            "XScreenOfDisplay",
            "XDefaultScreenOfDisplay",
            "XEventMaskOfScreen",
            "XScreenNumberOfScreen",
            "XSetErrorHandler",
            "XSetIOErrorHandler",
            "XListPixmapFormats",
            "XListDepths",
            "XReconfigureWMWindow",
            "XGetWMProtocols",
            "XSetWMProtocols",
            "XIconifyWindow",
            "XWithdrawWindow",
            "XGetCommand",
            "XGetWMColormapWindows",
            "XSetWMColormapWindows",
            "XFreeStringList",
            "XSetTransientForHint",
            "XActivateScreenSaver",
            "XAddHost",
            "XAddHosts",
            "XAddToExtensionList",
            "XAddToSaveSet",
            "XAllocColor",
            "XAllocColorCells",
            "XAllocColorPlanes",
            "XAllocNamedColor",
            "XAllowEvents",
            "XAutoRepeatOff",
            "XAutoRepeatOn",
            "XBell",
            "XBitmapBitOrder",
            "XBitmapPad",
            "XBitmapUnit",
            "XCellsOfScreen",
            "XChangeActivePointerGrab",
            "XChangeGC",
            "XChangeKeyboardControl",
            "XChangeKeyboardMapping",
            "XChangePointerControl",
            "XChangeProperty",
            "XChangeSaveSet",
            "XChangeWindowAttributes",
            "XCheckIfEvent",
            "XCheckMaskEvent",
            "XCheckTypedEvent",
            "XCheckTypedWindowEvent",
            "XCheckWindowEvent",
            "XCirculateSubwindows",
            "XCirculateSubwindowsDown",
            "XCirculateSubwindowsUp",
            "XClearArea",
            "XClearWindow",
            "XCloseDisplay",
            "XConfigureWindow",
            "XConnectionNumber",
            "XConvertSelection",
            "XCopyArea",
            "XCopyGC",
            "XCopyPlane",
            "XDefaultDepth",
            "XDefaultDepthOfScreen",
            "XDefaultScreen",
            "XDefineCursor",
            "XDeleteProperty",
            "XDestroyWindow",
            "XDestroySubwindows",
            "XDoesBackingStore",
            "XDoesSaveUnders",
            "XDisableAccessControl",
            "XDisplayCells",
            "XDisplayHeight",
            "XDisplayHeightMM",
            "XDisplayKeycodes",
            "XDisplayPlanes",
            "XDisplayWidth",
            "XDisplayWidthMM",
            "XDrawArc",
            "XDrawArcs",
            "XDrawImageString",
            "XDrawImageString16",
            "XDrawLine",
            "XDrawLines",
            "XDrawPoint",
            "XDrawPoints",
            "XDrawRectangle",
            "XDrawRectangles",
            "XDrawSegments",
            "XDrawString",
            "XDrawString16",
            "XDrawText",
            "XDrawText16",
            "XEnableAccessControl",
            "XEventsQueued",
            "XFetchName",
            "XFillArc",
            "XFillArcs",
            "XFillPolygon",
            "XFillRectangle",
            "XFillRectangles",
            "XFlush",
            "XForceScreenSaver",
            "XFree",
            "XFreeColormap",
            "XFreeColors",
            "XFreeCursor",
            "XFreeExtensionList",
            "XFreeFont",
            "XFreeFontInfo",
            "XFreeFontNames",
            "XFreeFontPath",
            "XFreeGC",
            "XFreeModifiermap",
            "XFreePixmap",
            "XGeometry",
            "XGetErrorDatabaseText",
            "XGetErrorText",
            "XGetFontProperty",
            "XGetGCValues",
            "XGetGeometry",
            "XGetIconName",
            "XGetInputFocus",
            "XGetKeyboardControl",
            "XGetPointerControl",
            "XGetPointerMapping",
            "XGetScreenSaver",
            "XGetTransientForHint",
            "XGetWindowProperty",
            "XGetWindowAttributes",
            "XGrabButton",
            "XGrabKey",
            "XGrabKeyboard",
            "XGrabPointer",
            "XGrabServer",
            "XHeightMMOfScreen",
            "XHeightOfScreen",
            "XIfEvent",
            "XImageByteOrder",
            "XInstallColormap",
            "XKeysymToKeycode",
            "XKillClient",
            "XLookupColor",
            "XLowerWindow",
            "XMapRaised",
            "XMapSubwindows",
            "XMapWindow",
            "XMaskEvent",
            "XMaxCmapsOfScreen",
            "XMinCmapsOfScreen",
            "XMoveResizeWindow",
            "XMoveWindow",
            "XNextEvent",
            "XNoOp",
            "XParseColor",
            "XParseGeometry",
            "XPeekEvent",
            "XPeekIfEvent",
            "XPending",
            "XPlanesOfScreen",
            "XProtocolRevision",
            "XProtocolVersion",
            "XPutBackEvent",
            "XPutImage",
            "XQLength",
            "XQueryBestCursor",
            "XQueryBestSize",
            "XQueryBestStipple",
            "XQueryBestTile",
            "XQueryColor",
            "XQueryColors",
            "XQueryExtension",
            "XQueryKeymap",
            "XQueryPointer",
            "XQueryTextExtents",
            "XQueryTextExtents16",
            "XQueryTree",
            "XRaiseWindow",
            "XReadBitmapFile",
            "XReadBitmapFileData",
            "XRebindKeysym",
            "XRecolorCursor",
            "XRefreshKeyboardMapping",
            "XRemoveFromSaveSet",
            "XRemoveHost",
            "XRemoveHosts",
            "XReparentWindow",
            "XResetScreenSaver",
            "XResizeWindow",
            "XRestackWindows",
            "XRotateBuffers",
            "XRotateWindowProperties",
            "XScreenCount",
            "XSelectInput",
            "XSendEvent",
            "XSetAccessControl",
            "XSetArcMode",
            "XSetBackground",
            "XSetClipMask",
            "XSetClipOrigin",
            "XSetClipRectangles",
            "XSetCloseDownMode",
            "XSetCommand",
            "XSetDashes",
            "XSetFillRule",
            "XSetFillStyle",
            "XSetFont",
            "XSetFontPath",
            "XSetForeground",
            "XSetFunction",
            "XSetGraphicsExposures",
            "XSetIconName",
            "XSetInputFocus",
            "XSetLineAttributes",
            "XSetModifierMapping",
            "XSetPlaneMask",
            "XSetPointerMapping",
            "XSetScreenSaver",
            "XSetSelectionOwner",
            "XSetState",
            "XSetStipple",
            "XSetSubwindowMode",
            "XSetTSOrigin",
            "XSetTile",
            "XSetWindowBackground",
            "XSetWindowBackgroundPixmap",
            "XSetWindowBorder",
            "XSetWindowBorderPixmap",
            "XSetWindowBorderWidth",
            "XSetWindowColormap",
            "XStoreBuffer",
            "XStoreBytes",
            "XStoreColor",
            "XStoreColors",
            "XStoreName",
            "XStoreNamedColor",
            "XSync",
            "XTextExtents",
            "XTextExtents16",
            "XTextWidth",
            "XTextWidth16",
            "XTranslateCoordinates",
            "XUndefineCursor",
            "XUngrabButton",
            "XUngrabKey",
            "XUngrabKeyboard",
            "XUngrabPointer",
            "XUngrabServer",
            "XUninstallColormap",
            "XUnloadFont",
            "XUnmapSubwindows",
            "XUnmapWindow",
            "XVendorRelease",
            "XWarpPointer",
            "XWidthMMOfScreen",
            "XWidthOfScreen",
            "XWindowEvent",
            "XWriteBitmapFile",
            "XSupportsLocale",
            "XSetLocaleModifiers",
            "XOpenOM",
            "XCloseOM",
            "XSetOMValues",
            "XGetOMValues",
            "XDisplayOfOM",
            "XLocaleOfOM",
            "XCreateOC",
            "XDestroyOC",
            "XOMOfOC",
            "XSetOCValues",
            "XGetOCValues",
            "XCreateFontSet",
            "XFreeFontSet",
            "XFontsOfFontSet",
            "XBaseFontNameListOfFontSet",
            "XLocaleOfFontSet",
            "XContextDependentDrawing",
            "XDirectionalDependentDrawing",
            "XContextualDrawing",
            "XExtentsOfFontSet",
            "XmbTextEscapement",
            "XwcTextEscapement",
            "Xutf8TextEscapement",
            "XmbTextExtents",
            "XwcTextExtents",
            "Xutf8TextExtents",
            "XmbTextPerCharExtents",
            "XwcTextPerCharExtents",
            "Xutf8TextPerCharExtents",
            "XmbDrawText",
            "XwcDrawText",
            "Xutf8DrawText",
            "XmbDrawString",
            "XwcDrawString",
            "Xutf8DrawString",
            "XmbDrawImageString",
            "XwcDrawImageString",
            "Xutf8DrawImageString",
            "XOpenIM",
            "XCloseIM",
            "XGetIMValues",
            "XSetIMValues",
            "XDisplayOfIM",
            "XLocaleOfIM",
            "XCreateIC",
            "XDestroyIC",
            "XSetICFocus",
            "XUnsetICFocus",
            "XwcResetIC",
            "XmbResetIC",
            "Xutf8ResetIC",
            "XSetICValues",
            "XGetICValues",
            "XIMOfIC",
            "XFilterEvent",
            "XmbLookupString",
            "XwcLookupString",
            "Xutf8LookupString",
            "XVaCreateNestedList",
            "XRegisterIMInstantiateCallback",
            "XUnregisterIMInstantiateCallback",
            "XInternalConnectionNumbers",
            "XProcessInternalConnection",
            "XAddConnectionWatch",
            "XRemoveConnectionWatch",
            "XSetAuthorization",
            "_Xmbtowc",
            "_Xwctomb",
            "XGetEventData",
            "XFreeEventData",
            "XAllocClassHint",
            "XAllocIconSize",
            "XAllocSizeHints",
            "XAllocStandardColormap",
            "XAllocWMHints",
            "XClipBox",
            "XCreateRegion",
            "XDefaultString",
            "XDeleteContext",
            "XDestroyRegion",
            "XEmptyRegion",
            "XEqualRegion",
            "XFindContext",
            "XGetClassHint",
            "XGetIconSizes",
            "XGetNormalHints",
            "XGetRGBColormaps",
            "XGetSizeHints",
            "XGetStandardColormap",
            "XGetTextProperty",
            "XGetVisualInfo",
            "XGetWMClientMachine",
            "XGetWMHints",
            "XGetWMIconName",
            "XGetWMName",
            "XGetWMNormalHints",
            "XGetWMSizeHints",
            "XGetZoomHints",
            "XIntersectRegion",
            "XConvertCase",
            "XLookupString",
            "XMatchVisualInfo",
            "XOffsetRegion",
            "XPointInRegion",
            "XPolygonRegion",
            "XRectInRegion",
            "XSaveContext",
            "XSetClassHint",
            "XSetIconSizes",
            "XSetNormalHints",
            "XSetRGBColormaps",
            "XSetSizeHints",
            "XSetStandardProperties",
            "XSetTextProperty",
            "XSetWMClientMachine",
            "XSetWMHints",
            "XSetWMIconName",
            "XSetWMName",
            "XSetWMNormalHints",
            "XSetWMProperties",
            "XmbSetWMProperties",
            "Xutf8SetWMProperties",
            "XSetWMSizeHints",
            "XSetRegion",
            "XSetStandardColormap",
            "XSetZoomHints",
            "XShrinkRegion",
            "XStringListToTextProperty",
            "XSubtractRegion",
            "XmbTextListToTextProperty",
            "XwcTextListToTextProperty",
            "Xutf8TextListToTextProperty",
            "XwcFreeStringList",
            "XTextPropertyToStringList",
            "XmbTextPropertyToTextList",
            "XwcTextPropertyToTextList",
            "Xutf8TextPropertyToTextList",
            "XUnionRectWithRegion",
            "XUnionRegion",
            "XWMGeometry",
            "XXorRegion",
            "XkbIgnoreExtension",
            "XkbOpenDisplay",
            "XkbQueryExtension",
            "XkbUseExtension",
            "XkbLibraryVersion",
            "XkbSetXlibControls",
            "XkbGetXlibControls",
            "XkbXlibControlsImplemented",
            "XkbSetAtomFuncs",
            "XkbKeycodeToKeysym",
            "XkbKeysymToModifiers",
            "XkbLookupKeySym",
            "XkbLookupKeyBinding",
            "XkbTranslateKeyCode",
            "XkbTranslateKeySym",
            "XkbSetAutoRepeatRate",
            "XkbGetAutoRepeatRate",
            "XkbChangeEnabledControls",
            "XkbDeviceBell",
            "XkbForceDeviceBell",
            "XkbDeviceBellEvent",
            "XkbBell",
            "XkbForceBell",
            "XkbBellEvent",
            "XkbSelectEvents",
            "XkbSelectEventDetails",
            "XkbNoteMapChanges",
            "XkbNoteNameChanges",
            "XkbGetIndicatorState",
            "XkbGetIndicatorMap",
            "XkbSetIndicatorMap",
            "XkbGetNamedIndicator",
            "XkbGetNamedDeviceIndicator",
            "XkbSetNamedIndicator",
            "XkbSetNamedDeviceIndicator",
            "XkbLockModifiers",
            "XkbLatchModifiers",
            "XkbLockGroup",
            "XkbLatchGroup",
            "XkbSetServerInternalMods",
            "XkbSetIgnoreLockMods",
            "XkbVirtualModsToReal",
            "XkbComputeEffectiveMap",
            "XkbInitCanonicalKeyTypes",
            "XkbAllocKeyboard",
            "XkbFreeKeyboard",
            "XkbAllocClientMap",
            "XkbAllocServerMap",
            "XkbFreeClientMap",
            "XkbFreeServerMap",
            "XkbAddKeyType",
            "XkbAllocIndicatorMaps",
            "XkbFreeIndicatorMaps",
            "XkbGetMap",
            "XkbGetUpdatedMap",
            "XkbGetMapChanges",
            "XkbRefreshKeyboardMapping",
            "XkbGetKeyTypes",
            "XkbGetKeySyms",
            "XkbGetKeyActions",
            "XkbGetKeyBehaviors",
            "XkbGetVirtualMods",
            "XkbGetKeyExplicitComponents",
            "XkbGetKeyModifierMap",
            "XkbGetKeyVirtualModMap",
            "XkbAllocControls",
            "XkbFreeControls",
            "XkbGetControls",
            "XkbSetControls",
            "XkbNoteControlsChanges",
            "XkbAllocCompatMap",
            "XkbFreeCompatMap",
            "XkbGetCompatMap",
            "XkbSetCompatMap",
            "XkbAllocNames",
            "XkbGetNames",
            "XkbSetNames",
            "XkbChangeNames",
            "XkbFreeNames",
            "XkbGetState",
            "XkbSetMap",
            "XkbChangeMap",
            "XkbSetDetectableAutoRepeat",
            "XkbGetDetectableAutoRepeat",
            "XkbSetAutoResetControls",
            "XkbGetAutoResetControls",
            "XkbSetPerClientControls",
            "XkbGetPerClientControls",
            "XkbCopyKeyType",
            "XkbCopyKeyTypes",
            "XkbResizeKeyType",
            "XkbResizeKeySyms",
            "XkbResizeKeyActions",
            "XkbChangeTypesOfKey",
            "XkbChangeKeycodeRange",
            "XkbListComponents",
            "XkbFreeComponentList",
            "XkbGetKeyboard",
            "XkbGetKeyboardByName",
            "XkbKeyTypesForCoreSymbols",
            "XkbApplyCompatMapToKey",
            "XkbUpdateMapFromCore",
            "XkbAddDeviceLedInfo",
            "XkbResizeDeviceButtonActions",
            "XkbAllocDeviceInfo",
            "XkbFreeDeviceInfo",
            "XkbNoteDeviceChanges",
            "XkbGetDeviceInfo",
            "XkbGetDeviceInfoChanges",
            "XkbGetDeviceButtonActions",
            "XkbGetDeviceLedInfo",
            "XkbSetDeviceInfo",
            "XkbChangeDeviceInfo",
            "XkbSetDeviceLedInfo",
            "XkbSetDeviceButtonActions",
            "XkbToControl",
            "XkbSetDebuggingFlags",
            "XkbApplyVirtualModChanges",
            "XkbUpdateActionVirtualMods",
            "XkbUpdateKeyTypeVirtualMods"
        ]
    },
    "platform/linuxbsd/x11/dynwrappers/xinput2-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_XINPUT2",
            "XIQueryPointer",
            "XIWarpPointer",
            "XIDefineCursor",
            "XIUndefineCursor",
            "XIChangeHierarchy",
            "XISetClientPointer",
            "XIGetClientPointer",
            "XISelectEvents",
            "XIGetSelectedEvents",
            "XIQueryVersion",
            "XIQueryDevice",
            "XISetFocus",
            "XIGetFocus",
            "XIGrabDevice",
            "XIUngrabDevice",
            "XIAllowEvents",
            "XIAllowTouchEvents",
            "XIGrabButton",
            "XIGrabKeycode",
            "XIGrabEnter",
            "XIGrabFocusIn",
            "XIGrabTouchBegin",
            "XIUngrabButton",
            "XIUngrabKeycode",
            "XIUngrabEnter",
            "XIUngrabFocusIn",
            "XIUngrabTouchBegin",
            "XIListProperties",
            "XIChangeProperty",
            "XIDeleteProperty",
            "XIGetProperty",
            "XIBarrierReleasePointers",
            "XIBarrierReleasePointer",
            "XIFreeDeviceInfo",
            "XIQueryPointer",
            "XIWarpPointer",
            "XIDefineCursor",
            "XIUndefineCursor",
            "XIChangeHierarchy",
            "XISetClientPointer",
            "XIGetClientPointer",
            "XISelectEvents",
            "XIGetSelectedEvents",
            "XIQueryVersion",
            "XIQueryDevice",
            "XISetFocus",
            "XIGetFocus",
            "XIGrabDevice",
            "XIUngrabDevice",
            "XIAllowEvents",
            "XIAllowTouchEvents",
            "XIGrabButton",
            "XIGrabKeycode",
            "XIGrabEnter",
            "XIGrabFocusIn",
            "XIGrabTouchBegin",
            "XIUngrabButton",
            "XIUngrabKeycode",
            "XIUngrabEnter",
            "XIUngrabFocusIn",
            "XIUngrabTouchBegin",
            "XIListProperties",
            "XIChangeProperty",
            "XIDeleteProperty",
            "XIGetProperty",
            "XIBarrierReleasePointers",
            "XIBarrierReleasePointer",
            "XIFreeDeviceInfo"
        ]
    },
    "platform/linuxbsd/x11/dynwrappers/xrandr-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_XRANDR",
            "XRRQueryExtension",
            "XRRQueryVersion",
            "XRRGetScreenInfo",
            "XRRFreeScreenConfigInfo",
            "XRRSetScreenConfig",
            "XRRSetScreenConfigAndRate",
            "XRRConfigRotations",
            "XRRConfigTimes",
            "XRRConfigSizes",
            "XRRConfigRates",
            "XRRConfigCurrentConfiguration",
            "XRRConfigCurrentRate",
            "XRRRootToScreen",
            "XRRSelectInput",
            "XRRRotations",
            "XRRSizes",
            "XRRRates",
            "XRRTimes",
            "XRRGetScreenSizeRange",
            "XRRSetScreenSize",
            "XRRGetScreenResources",
            "XRRFreeScreenResources",
            "XRRGetOutputInfo",
            "XRRFreeOutputInfo",
            "XRRListOutputProperties",
            "XRRQueryOutputProperty",
            "XRRConfigureOutputProperty",
            "XRRChangeOutputProperty",
            "XRRDeleteOutputProperty",
            "XRRGetOutputProperty",
            "XRRAllocModeInfo",
            "XRRCreateMode",
            "XRRDestroyMode",
            "XRRAddOutputMode",
            "XRRDeleteOutputMode",
            "XRRFreeModeInfo",
            "XRRGetCrtcInfo",
            "XRRFreeCrtcInfo",
            "XRRSetCrtcConfig",
            "XRRGetCrtcGammaSize",
            "XRRGetCrtcGamma",
            "XRRAllocGamma",
            "XRRSetCrtcGamma",
            "XRRFreeGamma",
            "XRRGetScreenResourcesCurrent",
            "XRRSetCrtcTransform",
            "XRRGetCrtcTransform",
            "XRRUpdateConfiguration",
            "XRRGetPanning",
            "XRRFreePanning",
            "XRRSetPanning",
            "XRRSetOutputPrimary",
            "XRRGetOutputPrimary",
            "XRRGetProviderResources",
            "XRRFreeProviderResources",
            "XRRGetProviderInfo",
            "XRRFreeProviderInfo",
            "XRRSetProviderOutputSource",
            "XRRSetProviderOffloadSink",
            "XRRListProviderProperties",
            "XRRQueryProviderProperty",
            "XRRConfigureProviderProperty",
            "XRRChangeProviderProperty",
            "XRRDeleteProviderProperty",
            "XRRGetProviderProperty",
            "XRRAllocateMonitor",
            "XRRGetMonitors",
            "XRRSetMonitor",
            "XRRDeleteMonitor",
            "XRRFreeMonitors",
            "XRRQueryExtension",
            "XRRQueryVersion",
            "XRRGetScreenInfo",
            "XRRFreeScreenConfigInfo",
            "XRRSetScreenConfig",
            "XRRSetScreenConfigAndRate",
            "XRRConfigRotations",
            "XRRConfigTimes",
            "XRRConfigSizes",
            "XRRConfigRates",
            "XRRConfigCurrentConfiguration",
            "XRRConfigCurrentRate",
            "XRRRootToScreen",
            "XRRSelectInput",
            "XRRRotations",
            "XRRSizes",
            "XRRRates",
            "XRRTimes",
            "XRRGetScreenSizeRange",
            "XRRSetScreenSize",
            "XRRGetScreenResources",
            "XRRFreeScreenResources",
            "XRRGetOutputInfo",
            "XRRFreeOutputInfo",
            "XRRListOutputProperties",
            "XRRQueryOutputProperty",
            "XRRConfigureOutputProperty",
            "XRRChangeOutputProperty",
            "XRRDeleteOutputProperty",
            "XRRGetOutputProperty",
            "XRRAllocModeInfo",
            "XRRCreateMode",
            "XRRDestroyMode",
            "XRRAddOutputMode",
            "XRRDeleteOutputMode",
            "XRRFreeModeInfo",
            "XRRGetCrtcInfo",
            "XRRFreeCrtcInfo",
            "XRRSetCrtcConfig",
            "XRRGetCrtcGammaSize",
            "XRRGetCrtcGamma",
            "XRRAllocGamma",
            "XRRSetCrtcGamma",
            "XRRFreeGamma",
            "XRRGetScreenResourcesCurrent",
            "XRRSetCrtcTransform",
            "XRRGetCrtcTransform",
            "XRRUpdateConfiguration",
            "XRRGetPanning",
            "XRRFreePanning",
            "XRRSetPanning",
            "XRRSetOutputPrimary",
            "XRRGetOutputPrimary",
            "XRRGetProviderResources",
            "XRRFreeProviderResources",
            "XRRGetProviderInfo",
            "XRRFreeProviderInfo",
            "XRRSetProviderOutputSource",
            "XRRSetProviderOffloadSink",
            "XRRListProviderProperties",
            "XRRQueryProviderProperty",
            "XRRConfigureProviderProperty",
            "XRRChangeProviderProperty",
            "XRRDeleteProviderProperty",
            "XRRGetProviderProperty",
            "XRRAllocateMonitor",
            "XRRGetMonitors",
            "XRRSetMonitor",
            "XRRDeleteMonitor",
            "XRRFreeMonitors"
        ]
    },
    "platform/linuxbsd/x11/dynwrappers/xcursor-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_XCURSOR",
            "XcursorImageCreate",
            "XcursorImageDestroy",
            "XcursorImagesCreate",
            "XcursorImagesDestroy",
            "XcursorImagesSetName",
            "XcursorCursorsCreate",
            "XcursorCursorsDestroy",
            "XcursorAnimateCreate",
            "XcursorAnimateDestroy",
            "XcursorAnimateNext",
            "XcursorCommentCreate",
            "XcursorCommentDestroy",
            "XcursorCommentsCreate",
            "XcursorCommentsDestroy",
            "XcursorXcFileLoadImage",
            "XcursorXcFileLoadImages",
            "XcursorXcFileLoadAllImages",
            "XcursorXcFileLoad",
            "XcursorXcFileSave",
            "XcursorFileLoadImage",
            "XcursorFileLoadImages",
            "XcursorFileLoadAllImages",
            "XcursorFileLoad",
            "XcursorFileSaveImages",
            "XcursorFileSave",
            "XcursorFilenameLoadImage",
            "XcursorFilenameLoadImages",
            "XcursorFilenameLoadAllImages",
            "XcursorFilenameLoad",
            "XcursorFilenameSaveImages",
            "XcursorFilenameSave",
            "XcursorLibraryLoadImage",
            "XcursorLibraryLoadImages",
            "XcursorLibraryPath",
            "XcursorLibraryShape",
            "XcursorImageLoadCursor",
            "XcursorImagesLoadCursors",
            "XcursorImagesLoadCursor",
            "XcursorFilenameLoadCursor",
            "XcursorFilenameLoadCursors",
            "XcursorLibraryLoadCursor",
            "XcursorLibraryLoadCursors",
            "XcursorShapeLoadImage",
            "XcursorShapeLoadImages",
            "XcursorShapeLoadCursor",
            "XcursorShapeLoadCursors",
            "XcursorTryShapeCursor",
            "XcursorNoticeCreateBitmap",
            "XcursorNoticePutBitmap",
            "XcursorTryShapeBitmapCursor",
            "XcursorImageHash",
            "XcursorSupportsARGB",
            "XcursorSupportsAnim",
            "XcursorSetDefaultSize",
            "XcursorGetDefaultSize",
            "XcursorSetTheme",
            "XcursorGetTheme",
            "XcursorGetThemeCore",
            "XcursorSetThemeCore",
            "XcursorImageCreate",
            "XcursorImageDestroy",
            "XcursorImagesCreate",
            "XcursorImagesDestroy",
            "XcursorImagesSetName",
            "XcursorCursorsCreate",
            "XcursorCursorsDestroy",
            "XcursorAnimateCreate",
            "XcursorAnimateDestroy",
            "XcursorAnimateNext",
            "XcursorCommentCreate",
            "XcursorCommentDestroy",
            "XcursorCommentsCreate",
            "XcursorCommentsDestroy",
            "XcursorXcFileLoadImage",
            "XcursorXcFileLoadImages",
            "XcursorXcFileLoadAllImages",
            "XcursorXcFileLoad",
            "XcursorXcFileSave",
            "XcursorFileLoadImage",
            "XcursorFileLoadImages",
            "XcursorFileLoadAllImages",
            "XcursorFileLoad",
            "XcursorFileSaveImages",
            "XcursorFileSave",
            "XcursorFilenameLoadImage",
            "XcursorFilenameLoadImages",
            "XcursorFilenameLoadAllImages",
            "XcursorFilenameLoad",
            "XcursorFilenameSaveImages",
            "XcursorFilenameSave",
            "XcursorLibraryLoadImage",
            "XcursorLibraryLoadImages",
            "XcursorLibraryPath",
            "XcursorLibraryShape",
            "XcursorImageLoadCursor",
            "XcursorImagesLoadCursors",
            "XcursorImagesLoadCursor",
            "XcursorFilenameLoadCursor",
            "XcursorFilenameLoadCursors",
            "XcursorLibraryLoadCursor",
            "XcursorLibraryLoadCursors",
            "XcursorShapeLoadImage",
            "XcursorShapeLoadImages",
            "XcursorShapeLoadCursor",
            "XcursorShapeLoadCursors",
            "XcursorTryShapeCursor",
            "XcursorNoticeCreateBitmap",
            "XcursorNoticePutBitmap",
            "XcursorTryShapeBitmapCursor",
            "XcursorImageHash",
            "XcursorSupportsARGB",
            "XcursorSupportsAnim",
            "XcursorSetDefaultSize",
            "XcursorGetDefaultSize",
            "XcursorSetTheme",
            "XcursorGetTheme",
            "XcursorGetThemeCore",
            "XcursorSetThemeCore"
        ]
    },
    "platform/linuxbsd/x11/dynwrappers/xext-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_XEXT",
            "XShapeQueryExtension",
            "XShapeQueryVersion",
            "XShapeCombineRegion",
            "XShapeCombineRectangles",
            "XShapeCombineMask",
            "XShapeCombineShape",
            "XShapeOffsetShape",
            "XShapeQueryExtents",
            "XShapeSelectInput",
            "XShapeInputSelected",
            "XShapeGetRectangles",
            "XShapeQueryExtension",
            "XShapeQueryVersion",
            "XShapeCombineRegion",
            "XShapeCombineRectangles",
            "XShapeCombineMask",
            "XShapeCombineShape",
            "XShapeOffsetShape",
            "XShapeQueryExtents",
            "XShapeSelectInput",
            "XShapeInputSelected",
            "XShapeGetRectangles"
        ]
    },
    "platform/linuxbsd/x11/dynwrappers/xinerama-so_wrap.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DYLIBLOAD_WRAPPER_XINERAMA",
            "XineramaQueryExtension",
            "XineramaQueryVersion",
            "XineramaIsActive",
            "XineramaQueryScreens",
            "XineramaQueryExtension",
            "XineramaQueryVersion",
            "XineramaIsActive",
            "XineramaQueryScreens"
        ]
    },
    "platform/linuxbsd/export/export.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "LINUXBSD_EXPORT_H"
        ]
    },
    "platform/linuxbsd/export/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/linuxbsd/export/export_plugin.h": {
        "classes": [
            "EditorExportPlatformLinuxBSD"
        ],
        "structs": [
            "SSHCleanupCommand"
        ],
        "defines": [
            "LINUXBSD_EXPORT_PLUGIN_H"
        ]
    },
    "platform/linuxbsd/export/run_icon_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/uwp/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/uwp/logo.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "platform/uwp/export/logo_svg.gen.h": {
        "classes": [],
        "structs": [],
        "defines": []
    },
    "scene/property_list_helper.h": {
        "classes": [
            "PropertyListHelper"
        ],
        "structs": [
            "Property"
        ],
        "defines": [
            "PROPERTY_LIST_HELPER_H"
        ]
    },
    "scene/scene_string_names.h": {
        "classes": [
            "SceneStringNames"
        ],
        "structs": [],
        "defines": [
            "SCENE_STRING_NAMES_H"
        ]
    },
    "scene/register_scene_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGISTER_SCENE_TYPES_H"
        ]
    },
    "scene/property_utils.h": {
        "classes": [
            "PropertyUtils"
        ],
        "structs": [],
        "defines": [
            "PROPERTY_UTILS_H"
        ]
    },
    "scene/3d/audio_stream_player_3d.h": {
        "classes": [
            "AudioStreamPlayer3D"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_PLAYER_3D_H"
        ]
    },
    "scene/3d/voxel_gi.h": {
        "classes": [
            "VoxelGIData",
            "VoxelGI"
        ],
        "structs": [
            "PlotMesh"
        ],
        "defines": [
            "VOXEL_GI_H"
        ]
    },
    "scene/3d/marker_3d.h": {
        "classes": [
            "Marker3D"
        ],
        "structs": [],
        "defines": [
            "MARKER_3D_H"
        ]
    },
    "scene/3d/reflection_probe.h": {
        "classes": [
            "ReflectionProbe"
        ],
        "structs": [],
        "defines": [
            "REFLECTION_PROBE_H"
        ]
    },
    "scene/3d/camera_3d.h": {
        "classes": [
            "Camera3D"
        ],
        "structs": [],
        "defines": [
            "CAMERA_3D_H"
        ]
    },
    "scene/3d/remote_transform_3d.h": {
        "classes": [
            "RemoteTransform3D"
        ],
        "structs": [],
        "defines": [
            "REMOTE_TRANSFORM_3D_H"
        ]
    },
    "scene/3d/xr_hand_modifier_3d.h": {
        "classes": [
            "XRHandModifier3D"
        ],
        "structs": [
            "JointData"
        ],
        "defines": [
            "XR_HAND_MODIFIER_3D_H"
        ]
    },
    "scene/3d/visible_on_screen_notifier_3d.h": {
        "classes": [
            "VisibleOnScreenNotifier3D",
            "VisibleOnScreenEnabler3D"
        ],
        "structs": [],
        "defines": [
            "VISIBLE_ON_SCREEN_NOTIFIER_3D_H"
        ]
    },
    "scene/3d/world_environment.h": {
        "classes": [
            "WorldEnvironment"
        ],
        "structs": [],
        "defines": [
            "WORLD_ENVIRONMENT_H"
        ]
    },
    "scene/3d/path_3d.h": {
        "classes": [
            "Path3D",
            "PathFollow3D"
        ],
        "structs": [],
        "defines": [
            "PATH_3D_H"
        ]
    },
    "scene/3d/voxelizer.h": {
        "classes": [
            "Voxelizer"
        ],
        "structs": [
            "Cell",
            "CellSort",
            "MaterialCache"
        ],
        "defines": [
            "VOXELIZER_H"
        ]
    },
    "scene/3d/mesh_instance_3d.h": {
        "classes": [
            "MeshInstance3D"
        ],
        "structs": [],
        "defines": [
            "MESH_INSTANCE_3D_H"
        ]
    },
    "scene/3d/decal.h": {
        "classes": [
            "Decal"
        ],
        "structs": [],
        "defines": [
            "DECAL_H"
        ]
    },
    "scene/3d/navigation_obstacle_3d.h": {
        "classes": [
            "NavigationObstacle3D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_OBSTACLE_3D_H"
        ]
    },
    "scene/3d/navigation_region_3d.h": {
        "classes": [
            "NavigationRegion3D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_REGION_3D_H"
        ]
    },
    "scene/3d/navigation_agent_3d.h": {
        "classes": [
            "NavigationAgent3D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_AGENT_3D_H"
        ]
    },
    "scene/3d/visual_instance_3d.h": {
        "classes": [
            "VisualInstance3D",
            "GeometryInstance3D"
        ],
        "structs": [],
        "defines": [
            "VISUAL_INSTANCE_3D_H"
        ]
    },
    "scene/3d/lightmap_probe.h": {
        "classes": [
            "LightmapProbe"
        ],
        "structs": [],
        "defines": [
            "LIGHTMAP_PROBE_H"
        ]
    },
    "scene/3d/fog_volume.h": {
        "classes": [
            "FogVolume"
        ],
        "structs": [],
        "defines": [
            "FOG_VOLUME_H"
        ]
    },
    "scene/3d/velocity_tracker_3d.h": {
        "classes": [
            "VelocityTracker3D"
        ],
        "structs": [
            "PositionHistory"
        ],
        "defines": [
            "VELOCITY_TRACKER_3D_H"
        ]
    },
    "scene/3d/skeleton_3d.h": {
        "classes": [
            "SkinReference",
            "Skeleton3D"
        ],
        "structs": [
            "Bone"
        ],
        "defines": [
            "SKELETON_3D_H"
        ]
    },
    "scene/3d/cpu_particles_3d.h": {
        "classes": [
            "CPUParticles3D"
        ],
        "structs": [
            "Particle",
            "SortLifetime",
            "SortAxis"
        ],
        "defines": [
            "CPU_PARTICLES_3D_H"
        ]
    },
    "scene/3d/soft_body_3d.h": {
        "classes": [
            "SoftBodyRenderingServerHandler",
            "SoftBody3D"
        ],
        "structs": [
            "PinnedPoint"
        ],
        "defines": [
            "SOFT_BODY_3D_H"
        ]
    },
    "scene/3d/audio_listener_3d.h": {
        "classes": [
            "AudioListener3D"
        ],
        "structs": [],
        "defines": [
            "AUDIO_LISTENER_3D_H"
        ]
    },
    "scene/3d/gpu_particles_3d.h": {
        "classes": [
            "GPUParticles3D"
        ],
        "structs": [],
        "defines": [
            "GPU_PARTICLES_3D_H"
        ]
    },
    "scene/3d/navigation_link_3d.h": {
        "classes": [
            "NavigationLink3D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_LINK_3D_H"
        ]
    },
    "scene/3d/light_3d.h": {
        "classes": [
            "Light3D",
            "DirectionalLight3D",
            "OmniLight3D",
            "SpotLight3D"
        ],
        "structs": [],
        "defines": [
            "LIGHT_3D_H"
        ]
    },
    "scene/3d/skeleton_ik_3d.h": {
        "classes": [
            "FabrikInverseKinematic",
            "SkeletonIK3D"
        ],
        "structs": [
            "EndEffector",
            "ChainItem",
            "ChainTip",
            "Chain",
            "Task"
        ],
        "defines": [
            "SKELETON_IK_3D_H"
        ]
    },
    "scene/3d/occluder_instance_3d.h": {
        "classes": [
            "Occluder3D",
            "ArrayOccluder3D",
            "QuadOccluder3D",
            "BoxOccluder3D",
            "SphereOccluder3D",
            "PolygonOccluder3D",
            "OccluderInstance3D"
        ],
        "structs": [],
        "defines": [
            "OCCLUDER_INSTANCE_3D_H"
        ]
    },
    "scene/3d/xr_body_modifier_3d.h": {
        "classes": [
            "XRBodyModifier3D"
        ],
        "structs": [
            "JointData"
        ],
        "defines": [
            "XR_BODY_MODIFIER_3D_H"
        ]
    },
    "scene/3d/xr_face_modifier_3d.h": {
        "classes": [
            "XRFaceModifier3D"
        ],
        "structs": [],
        "defines": [
            "XR_FACE_MODIFIER_3D_H"
        ]
    },
    "scene/3d/bone_attachment_3d.h": {
        "classes": [
            "BoneAttachment3D"
        ],
        "structs": [],
        "defines": [
            "BONE_ATTACHMENT_3D_H"
        ]
    },
    "scene/3d/multimesh_instance_3d.h": {
        "classes": [
            "MultiMeshInstance3D"
        ],
        "structs": [],
        "defines": [
            "MULTIMESH_INSTANCE_3D_H"
        ]
    },
    "scene/3d/gpu_particles_collision_3d.h": {
        "classes": [
            "GPUParticlesCollision3D",
            "GPUParticlesCollisionSphere3D",
            "GPUParticlesCollisionBox3D",
            "GPUParticlesCollisionSDF3D",
            "GPUParticlesCollisionHeightField3D",
            "GPUParticlesAttractor3D",
            "GPUParticlesAttractorSphere3D",
            "GPUParticlesAttractorBox3D",
            "GPUParticlesAttractorVectorField3D"
        ],
        "structs": [
            "PlotMesh",
            "BVH",
            "FacePos",
            "FaceSort",
            "ComputeSDFParams"
        ],
        "defines": [
            "GPU_PARTICLES_COLLISION_3D_H"
        ]
    },
    "scene/3d/node_3d.h": {
        "classes": [
            "Node3DGizmo",
            "Node3D"
        ],
        "structs": [
            "Data"
        ],
        "defines": [
            "NODE_3D_H"
        ]
    },
    "scene/3d/label_3d.h": {
        "classes": [
            "Label3D"
        ],
        "structs": [
            "SurfaceData",
            "SurfaceKey",
            "SurfaceKeyHasher"
        ],
        "defines": [
            "LABEL_3D_H"
        ]
    },
    "scene/3d/lightmap_gi.h": {
        "classes": [
            "LightmapGIData",
            "LightmapGI"
        ],
        "structs": [
            "User",
            "LightsFound",
            "MeshesFound",
            "BakeTimeData",
            "BSPSimplex",
            "BSPNode",
            "BakeStepUD",
            "GenProbesOctree"
        ],
        "defines": [
            "LIGHTMAP_GI_H"
        ]
    },
    "scene/3d/lightmapper.h": {
        "classes": [
            "LightmapDenoiser",
            "LightmapRaycaster",
            "Lightmapper"
        ],
        "structs": [
            "MeshData"
        ],
        "defines": [
            "LIGHTMAPPER_H",
            "__aligned",
            "__aligned"
        ]
    },
    "scene/3d/importer_mesh_instance_3d.h": {
        "classes": [
            "ImporterMeshInstance3D"
        ],
        "structs": [],
        "defines": [
            "IMPORTER_MESH_INSTANCE_3D_H"
        ]
    },
    "scene/3d/sprite_3d.h": {
        "classes": [
            "SpriteBase3D",
            "Sprite3D",
            "AnimatedSprite3D"
        ],
        "structs": [],
        "defines": [
            "SPRITE_3D_H"
        ]
    },
    "scene/3d/xr_nodes.h": {
        "classes": [
            "XRCamera3D",
            "XRNode3D",
            "XRController3D",
            "XRAnchor3D",
            "XROrigin3D"
        ],
        "structs": [],
        "defines": [
            "XR_NODES_H"
        ]
    },
    "scene/3d/physics/character_body_3d.h": {
        "classes": [
            "CharacterBody3D"
        ],
        "structs": [],
        "defines": [
            "CHARACTER_BODY_3D_H"
        ]
    },
    "scene/3d/physics/collision_object_3d.h": {
        "classes": [
            "CollisionObject3D"
        ],
        "structs": [
            "ShapeData",
            "ShapeBase"
        ],
        "defines": [
            "COLLISION_OBJECT_3D_H"
        ]
    },
    "scene/3d/physics/kinematic_collision_3d.h": {
        "classes": [
            "KinematicCollision3D"
        ],
        "structs": [],
        "defines": [
            "KINEMATIC_COLLISION_3D_H"
        ]
    },
    "scene/3d/physics/ray_cast_3d.h": {
        "classes": [
            "RayCast3D"
        ],
        "structs": [],
        "defines": [
            "RAY_CAST_3D_H"
        ]
    },
    "scene/3d/physics/physics_body_3d.h": {
        "classes": [
            "PhysicsBody3D"
        ],
        "structs": [],
        "defines": [
            "PHYSICS_BODY_3D_H"
        ]
    },
    "scene/3d/physics/spring_arm_3d.h": {
        "classes": [
            "SpringArm3D"
        ],
        "structs": [],
        "defines": [
            "SPRING_ARM_3D_H"
        ]
    },
    "scene/3d/physics/area_3d.h": {
        "classes": [
            "Area3D"
        ],
        "structs": [
            "ShapePair",
            "BodyState",
            "AreaShapePair",
            "AreaState"
        ],
        "defines": [
            "AREA_3D_H"
        ]
    },
    "scene/3d/physics/static_body_3d.h": {
        "classes": [
            "StaticBody3D"
        ],
        "structs": [],
        "defines": [
            "STATIC_BODY_3D_H"
        ]
    },
    "scene/3d/physics/animatable_body_3d.h": {
        "classes": [
            "AnimatableBody3D"
        ],
        "structs": [],
        "defines": [
            "ANIMATABLE_BODY_3D_H"
        ]
    },
    "scene/3d/physics/vehicle_body_3d.h": {
        "classes": [
            "VehicleWheel3D",
            "VehicleBody3D"
        ],
        "structs": [
            "RaycastInfo",
            "btVehicleWheelContactPoint"
        ],
        "defines": [
            "VEHICLE_BODY_3D_H"
        ]
    },
    "scene/3d/physics/physical_bone_3d.h": {
        "classes": [
            "PhysicalBone3D"
        ],
        "structs": [
            "JointData",
            "PinJointData",
            "ConeJointData",
            "HingeJointData",
            "SliderJointData",
            "SixDOFJointData",
            "SixDOFAxisData"
        ],
        "defines": [
            "PHYSICAL_BONE_3D_H"
        ]
    },
    "scene/3d/physics/shape_cast_3d.h": {
        "classes": [
            "ShapeCast3D"
        ],
        "structs": [],
        "defines": [
            "SHAPE_CAST_3D_H"
        ]
    },
    "scene/3d/physics/collision_polygon_3d.h": {
        "classes": [
            "CollisionPolygon3D"
        ],
        "structs": [],
        "defines": [
            "COLLISION_POLYGON_3D_H"
        ]
    },
    "scene/3d/physics/collision_shape_3d.h": {
        "classes": [
            "CollisionShape3D"
        ],
        "structs": [],
        "defines": [
            "COLLISION_SHAPE_3D_H"
        ]
    },
    "scene/3d/physics/rigid_body_3d.h": {
        "classes": [
            "RigidBody3D"
        ],
        "structs": [
            "ShapePair",
            "RigidBody3D_RemoveAction",
            "BodyState",
            "ContactMonitor"
        ],
        "defines": [
            "RIGID_BODY_3D_H"
        ]
    },
    "scene/3d/physics/joints/cone_twist_joint_3d.h": {
        "classes": [
            "ConeTwistJoint3D"
        ],
        "structs": [],
        "defines": [
            "CONE_TWIST_JOINT_3D_H"
        ]
    },
    "scene/3d/physics/joints/slider_joint_3d.h": {
        "classes": [
            "SliderJoint3D"
        ],
        "structs": [],
        "defines": [
            "SLIDER_JOINT_3D_H"
        ]
    },
    "scene/3d/physics/joints/joint_3d.h": {
        "classes": [
            "Joint3D"
        ],
        "structs": [],
        "defines": [
            "JOINT_3D_H"
        ]
    },
    "scene/3d/physics/joints/hinge_joint_3d.h": {
        "classes": [
            "HingeJoint3D"
        ],
        "structs": [],
        "defines": [
            "HINGE_JOINT_3D_H"
        ]
    },
    "scene/3d/physics/joints/generic_6dof_joint_3d.h": {
        "classes": [
            "Generic6DOFJoint3D"
        ],
        "structs": [],
        "defines": [
            "GENERIC_6DOF_JOINT_3D_H"
        ]
    },
    "scene/3d/physics/joints/pin_joint_3d.h": {
        "classes": [
            "PinJoint3D"
        ],
        "structs": [],
        "defines": [
            "PIN_JOINT_3D_H"
        ]
    },
    "scene/resources/portable_compressed_texture.h": {
        "classes": [
            "PortableCompressedTexture2D"
        ],
        "structs": [],
        "defines": [
            "PORTABLE_COMPRESSED_TEXTURE_H"
        ]
    },
    "scene/resources/style_box_texture.h": {
        "classes": [
            "StyleBoxTexture"
        ],
        "structs": [],
        "defines": [
            "STYLE_BOX_TEXTURE_H"
        ]
    },
    "scene/resources/syntax_highlighter.h": {
        "classes": [
            "SyntaxHighlighter",
            "CodeHighlighter"
        ],
        "structs": [
            "ColorRegion"
        ],
        "defines": [
            "SYNTAX_HIGHLIGHTER_H"
        ]
    },
    "scene/resources/theme.h": {
        "classes": [
            "Theme"
        ],
        "structs": [],
        "defines": [
            "THEME_H"
        ]
    },
    "scene/resources/animation.h": {
        "classes": [
            "Animation"
        ],
        "structs": [
            "Track",
            "Key",
            "TKey",
            "PositionTrack",
            "RotationTrack",
            "ScaleTrack",
            "BlendShapeTrack",
            "ValueTrack",
            "MethodKey",
            "MethodTrack",
            "BezierKey",
            "BezierTrack",
            "AudioKey",
            "AudioTrack",
            "AnimationTrack",
            "Compression",
            "Page"
        ],
        "defines": [
            "ANIMATION_H",
            "ANIM_MIN_LENGTH"
        ]
    },
    "scene/resources/bit_map.h": {
        "classes": [
            "BitMap"
        ],
        "structs": [],
        "defines": [
            "BIT_MAP_H"
        ]
    },
    "scene/resources/animated_texture.h": {
        "classes": [
            "AnimatedTexture"
        ],
        "structs": [
            "Frame"
        ],
        "defines": [
            "ANIMATED_TEXTURE_H"
        ]
    },
    "scene/resources/sprite_frames.h": {
        "classes": [
            "SpriteFrames"
        ],
        "structs": [
            "Frame",
            "Anim"
        ],
        "defines": [
            "SPRITE_FRAMES_H"
        ]
    },
    "scene/resources/style_box_line.h": {
        "classes": [
            "StyleBoxLine"
        ],
        "structs": [],
        "defines": [
            "STYLE_BOX_LINE_H"
        ]
    },
    "scene/resources/shader.h": {
        "classes": [
            "Shader",
            "ResourceFormatLoaderShader",
            "ResourceFormatSaverShader"
        ],
        "structs": [],
        "defines": [
            "SHADER_H"
        ]
    },
    "scene/resources/surface_tool.h": {
        "classes": [
            "SurfaceTool"
        ],
        "structs": [
            "Vertex",
            "VertexHasher",
            "SmoothGroupVertex",
            "SmoothGroupVertexHasher",
            "TriangleHasher",
            "WeightSort"
        ],
        "defines": [
            "SURFACE_TOOL_H"
        ]
    },
    "scene/resources/text_paragraph.h": {
        "classes": [
            "TextParagraph"
        ],
        "structs": [],
        "defines": [
            "TEXT_PARAGRAPH_H"
        ]
    },
    "scene/resources/compressed_texture.h": {
        "classes": [
            "CompressedTexture2D",
            "ResourceFormatLoaderCompressedTexture2D",
            "CompressedTextureLayered",
            "ResourceFormatLoaderCompressedTextureLayered",
            "CompressedTexture2DArray",
            "CompressedCubemap",
            "CompressedCubemapArray",
            "CompressedTexture3D",
            "ResourceFormatLoaderCompressedTexture3D"
        ],
        "structs": [],
        "defines": [
            "COMPRESSED_TEXTURE_H"
        ]
    },
    "scene/resources/gradient.h": {
        "classes": [
            "Gradient"
        ],
        "structs": [
            "Point"
        ],
        "defines": [
            "GRADIENT_H"
        ]
    },
    "scene/resources/navigation_polygon.h": {
        "classes": [
            "NavigationPolygon"
        ],
        "structs": [
            "Polygon"
        ],
        "defines": [
            "NAVIGATION_POLYGON_H"
        ]
    },
    "scene/resources/visual_shader.h": {
        "classes": [
            "VisualShader",
            "VisualShaderNode",
            "VisualShaderNodeCustom",
            "VisualShaderNodeInput",
            "VisualShaderNodeOutput",
            "VisualShaderNodeParameter",
            "VisualShaderNodeParameterRef",
            "VisualShaderNodeResizableBase",
            "VisualShaderNodeComment",
            "VisualShaderNodeGroupBase",
            "VisualShaderNodeExpression",
            "VisualShaderNodeGlobalExpression",
            "VisualShaderNodeVarying",
            "VisualShaderNodeVaryingSetter",
            "VisualShaderNodeVaryingGetter"
        ],
        "structs": [
            "Connection",
            "DefaultTextureParam",
            "Varying",
            "Node",
            "Graph",
            "Port",
            "Property",
            "DropDownListProperty",
            "Port",
            "Port",
            "Parameter",
            "Port",
            "Varying"
        ],
        "defines": [
            "VISUAL_SHADER_H"
        ]
    },
    "scene/resources/navigation_mesh_source_geometry_data_2d.h": {
        "classes": [
            "NavigationMeshSourceGeometryData2D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_MESH_SOURCE_GEOMETRY_DATA_2D_H"
        ]
    },
    "scene/resources/material.h": {
        "classes": [
            "Material",
            "ShaderMaterial",
            "BaseMaterial3D",
            "StandardMaterial3D",
            "ORMMaterial3D",
            "PlaceholderMaterial"
        ],
        "structs": [
            "MaterialKey",
            "ShaderData",
            "ShaderNames"
        ],
        "defines": [
            "MATERIAL_H"
        ]
    },
    "scene/resources/animation_library.h": {
        "classes": [
            "AnimationLibrary"
        ],
        "structs": [],
        "defines": [
            "ANIMATION_LIBRARY_H"
        ]
    },
    "scene/resources/multimesh.h": {
        "classes": [
            "MultiMesh"
        ],
        "structs": [],
        "defines": [
            "MULTIMESH_H"
        ]
    },
    "scene/resources/text_file.h": {
        "classes": [
            "TextFile"
        ],
        "structs": [],
        "defines": [
            "TEXT_FILE_H"
        ]
    },
    "scene/resources/audio_stream_wav.h": {
        "classes": [
            "AudioStreamPlaybackWAV",
            "AudioStreamWAV"
        ],
        "structs": [
            "IMA_ADPCM_State"
        ],
        "defines": [
            "AUDIO_STREAM_WAV_H"
        ]
    },
    "scene/resources/style_box_flat.h": {
        "classes": [
            "StyleBoxFlat"
        ],
        "structs": [],
        "defines": [
            "STYLE_BOX_FLAT_H"
        ]
    },
    "scene/resources/navigation_mesh_source_geometry_data_3d.h": {
        "classes": [
            "NavigationMeshSourceGeometryData3D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_MESH_SOURCE_GEOMETRY_DATA_3D_H"
        ]
    },
    "scene/resources/mesh_data_tool.h": {
        "classes": [
            "MeshDataTool"
        ],
        "structs": [
            "Vertex",
            "Edge",
            "Face"
        ],
        "defines": [
            "MESH_DATA_TOOL_H"
        ]
    },
    "scene/resources/physics_material.h": {
        "classes": [
            "PhysicsMaterial"
        ],
        "structs": [],
        "defines": [
            "PHYSICS_MATERIAL_H"
        ]
    },
    "scene/resources/particle_process_material.h": {
        "classes": [
            "ParticleProcessMaterial"
        ],
        "structs": [
            "MaterialKey",
            "ShaderData",
            "ShaderNames"
        ],
        "defines": [
            "PARTICLE_PROCESS_MATERIAL_H"
        ]
    },
    "scene/resources/mesh.h": {
        "classes": [
            "Mesh",
            "MeshConvexDecompositionSettings",
            "ArrayMesh",
            "PlaceholderMesh"
        ],
        "structs": [
            "Surface"
        ],
        "defines": [
            "MESH_H"
        ]
    },
    "scene/resources/compositor.h": {
        "classes": [
            "CompositorEffect",
            "Compositor"
        ],
        "structs": [],
        "defines": [
            "COMPOSITOR_H"
        ]
    },
    "scene/resources/environment.h": {
        "classes": [
            "Environment"
        ],
        "structs": [],
        "defines": [
            "ENVIRONMENT_H"
        ]
    },
    "scene/resources/curve.h": {
        "classes": [
            "Curve",
            "Curve2D",
            "Curve3D"
        ],
        "structs": [
            "Point",
            "Point",
            "BakedPoint",
            "Interval",
            "Point",
            "Interval"
        ],
        "defines": [
            "CURVE_H"
        ]
    },
    "scene/resources/texture_rd.h": {
        "classes": [
            "Texture2DRD",
            "TextureLayeredRD",
            "Texture2DArrayRD",
            "TextureCubemapRD",
            "TextureCubemapArrayRD",
            "Texture3DRD"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_RD_H"
        ]
    },
    "scene/resources/visual_shader_particle_nodes.h": {
        "classes": [
            "VisualShaderNodeParticleEmitter",
            "VisualShaderNodeParticleSphereEmitter",
            "VisualShaderNodeParticleBoxEmitter",
            "VisualShaderNodeParticleRingEmitter",
            "VisualShaderNodeParticleMeshEmitter",
            "VisualShaderNodeParticleMultiplyByAxisAngle",
            "VisualShaderNodeParticleConeVelocity",
            "VisualShaderNodeParticleRandomness",
            "VisualShaderNodeParticleAccelerator",
            "VisualShaderNodeParticleOutput",
            "VisualShaderNodeParticleEmit"
        ],
        "structs": [],
        "defines": [
            "VISUAL_SHADER_PARTICLE_NODES_H"
        ]
    },
    "scene/resources/visual_shader_nodes.h": {
        "classes": [
            "VisualShaderNodeVectorBase",
            "VisualShaderNodeConstant",
            "VisualShaderNodeFloatConstant",
            "VisualShaderNodeIntConstant",
            "VisualShaderNodeUIntConstant",
            "VisualShaderNodeBooleanConstant",
            "VisualShaderNodeColorConstant",
            "VisualShaderNodeVec2Constant",
            "VisualShaderNodeVec3Constant",
            "VisualShaderNodeVec4Constant",
            "VisualShaderNodeTransformConstant",
            "VisualShaderNodeTexture",
            "VisualShaderNodeCurveTexture",
            "VisualShaderNodeCurveXYZTexture",
            "VisualShaderNodeSample3D",
            "VisualShaderNodeTexture2DArray",
            "VisualShaderNodeTexture3D",
            "VisualShaderNodeCubemap",
            "VisualShaderNodeLinearSceneDepth",
            "VisualShaderNodeWorldPositionFromDepth",
            "VisualShaderNodeScreenNormalWorldSpace",
            "VisualShaderNodeFloatOp",
            "VisualShaderNodeIntOp",
            "VisualShaderNodeUIntOp",
            "VisualShaderNodeVectorOp",
            "VisualShaderNodeColorOp",
            "VisualShaderNodeTransformOp",
            "VisualShaderNodeTransformVecMult",
            "VisualShaderNodeFloatFunc",
            "VisualShaderNodeIntFunc",
            "VisualShaderNodeUIntFunc",
            "VisualShaderNodeVectorFunc",
            "VisualShaderNodeColorFunc",
            "VisualShaderNodeTransformFunc",
            "VisualShaderNodeUVFunc",
            "VisualShaderNodeUVPolarCoord",
            "VisualShaderNodeDotProduct",
            "VisualShaderNodeVectorLen",
            "VisualShaderNodeDeterminant",
            "VisualShaderNodeClamp",
            "VisualShaderNodeDerivativeFunc",
            "VisualShaderNodeFaceForward",
            "VisualShaderNodeOuterProduct",
            "VisualShaderNodeStep",
            "VisualShaderNodeSmoothStep",
            "VisualShaderNodeVectorDistance",
            "VisualShaderNodeVectorRefract",
            "VisualShaderNodeMix",
            "VisualShaderNodeVectorCompose",
            "VisualShaderNodeTransformCompose",
            "VisualShaderNodeVectorDecompose",
            "VisualShaderNodeTransformDecompose",
            "VisualShaderNodeFloatParameter",
            "VisualShaderNodeIntParameter",
            "VisualShaderNodeUIntParameter",
            "VisualShaderNodeBooleanParameter",
            "VisualShaderNodeColorParameter",
            "VisualShaderNodeVec2Parameter",
            "VisualShaderNodeVec3Parameter",
            "VisualShaderNodeVec4Parameter",
            "VisualShaderNodeTransformParameter",
            "VisualShaderNodeTextureParameter",
            "VisualShaderNodeTexture2DParameter",
            "VisualShaderNodeTextureParameterTriplanar",
            "VisualShaderNodeTexture2DArrayParameter",
            "VisualShaderNodeTexture3DParameter",
            "VisualShaderNodeCubemapParameter",
            "VisualShaderNodeIf",
            "VisualShaderNodeSwitch",
            "VisualShaderNodeFresnel",
            "VisualShaderNodeIs",
            "VisualShaderNodeCompare",
            "VisualShaderNodeMultiplyAdd",
            "VisualShaderNodeBillboard",
            "VisualShaderNodeDistanceFade",
            "VisualShaderNodeProximityFade",
            "VisualShaderNodeRandomRange",
            "VisualShaderNodeRemap",
            "VisualShaderNodeRotationByAxis"
        ],
        "structs": [],
        "defines": [
            "VISUAL_SHADER_NODES_H"
        ]
    },
    "scene/resources/shader_include.h": {
        "classes": [
            "ShaderInclude",
            "ResourceFormatLoaderShaderInclude",
            "ResourceFormatSaverShaderInclude"
        ],
        "structs": [],
        "defines": [
            "SHADER_INCLUDE_H"
        ]
    },
    "scene/resources/camera_texture.h": {
        "classes": [
            "CameraTexture"
        ],
        "structs": [],
        "defines": [
            "CAMERA_TEXTURE_H"
        ]
    },
    "scene/resources/placeholder_textures.h": {
        "classes": [
            "PlaceholderTexture2D",
            "PlaceholderTexture3D",
            "PlaceholderTextureLayered",
            "PlaceholderTexture2DArray",
            "PlaceholderCubemap",
            "PlaceholderCubemapArray"
        ],
        "structs": [],
        "defines": [
            "PLACEHOLDER_TEXTURES_H"
        ]
    },
    "scene/resources/navigation_mesh.h": {
        "classes": [
            "NavigationMesh"
        ],
        "structs": [
            "Polygon"
        ],
        "defines": [
            "NAVIGATION_MESH_H"
        ]
    },
    "scene/resources/resource_format_text.h": {
        "classes": [
            "ResourceLoaderText",
            "DummyResource",
            "ResourceFormatLoaderText",
            "ResourceFormatSaverTextInstance",
            "ResourceFormatSaverText"
        ],
        "structs": [
            "ExtResource",
            "DummyReadData",
            "NonPersistentKey",
            "ResourceSort"
        ],
        "defines": [
            "RESOURCE_FORMAT_TEXT_H"
        ]
    },
    "scene/resources/style_box.h": {
        "classes": [
            "StyleBox",
            "StyleBoxEmpty"
        ],
        "structs": [],
        "defines": [
            "STYLE_BOX_H"
        ]
    },
    "scene/resources/mesh_texture.h": {
        "classes": [
            "MeshTexture"
        ],
        "structs": [],
        "defines": [
            "MESH_TEXTURE_H"
        ]
    },
    "scene/resources/font.h": {
        "classes": [
            "Font",
            "FontFile",
            "FontVariation",
            "SystemFont"
        ],
        "structs": [
            "ShapedTextKey",
            "ShapedTextKeyHasher",
            "Variation"
        ],
        "defines": [
            "FONT_H"
        ]
    },
    "scene/resources/texture.h": {
        "classes": [
            "Texture",
            "Texture2D",
            "TextureLayered",
            "Texture3D"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_H"
        ]
    },
    "scene/resources/audio_stream_polyphonic.h": {
        "classes": [
            "AudioStreamPolyphonic",
            "AudioStreamPlaybackPolyphonic"
        ],
        "structs": [
            "Stream"
        ],
        "defines": [
            "AUDIO_STREAM_POLYPHONIC_H"
        ]
    },
    "scene/resources/skeleton_profile.h": {
        "classes": [
            "SkeletonProfile",
            "SkeletonProfileHumanoid"
        ],
        "structs": [
            "SkeletonProfileGroup",
            "SkeletonProfileBone"
        ],
        "defines": [
            "SKELETON_PROFILE_H"
        ]
    },
    "scene/resources/label_settings.h": {
        "classes": [
            "LabelSettings"
        ],
        "structs": [],
        "defines": [
            "LABEL_SETTINGS_H"
        ]
    },
    "scene/resources/world_2d.h": {
        "classes": [
            "World2D"
        ],
        "structs": [],
        "defines": [
            "WORLD_2D_H"
        ]
    },
    "scene/resources/visual_shader_sdf_nodes.h": {
        "classes": [
            "VisualShaderNodeSDFToScreenUV",
            "VisualShaderNodeScreenUVToSDF",
            "VisualShaderNodeTextureSDF",
            "VisualShaderNodeTextureSDFNormal",
            "VisualShaderNodeSDFRaymarch"
        ],
        "structs": [],
        "defines": [
            "VISUAL_SHADER_SDF_NODES_H"
        ]
    },
    "scene/resources/video_stream.h": {
        "classes": [
            "VideoStreamPlayback",
            "VideoStream"
        ],
        "structs": [],
        "defines": [
            "VIDEO_STREAM_H"
        ]
    },
    "scene/resources/packed_scene.h": {
        "classes": [
            "SceneState",
            "PackedScene"
        ],
        "structs": [
            "NodeData",
            "Property",
            "DeferredNodePathProperties",
            "ConnectionData",
            "PackState"
        ],
        "defines": [
            "PACKED_SCENE_H"
        ]
    },
    "scene/resources/gradient_texture.h": {
        "classes": [
            "GradientTexture1D",
            "GradientTexture2D"
        ],
        "structs": [],
        "defines": [
            "GRADIENT_TEXTURE_H"
        ]
    },
    "scene/resources/atlas_texture.h": {
        "classes": [
            "AtlasTexture"
        ],
        "structs": [],
        "defines": [
            "ATLAS_TEXTURE_H"
        ]
    },
    "scene/resources/bone_map.h": {
        "classes": [
            "BoneMap"
        ],
        "structs": [],
        "defines": [
            "BONE_MAP_H"
        ]
    },
    "scene/resources/immediate_mesh.h": {
        "classes": [
            "ImmediateMesh"
        ],
        "structs": [
            "Surface"
        ],
        "defines": [
            "IMMEDIATE_MESH_H"
        ]
    },
    "scene/resources/camera_attributes.h": {
        "classes": [
            "CameraAttributes",
            "CameraAttributesPractical",
            "CameraAttributesPhysical"
        ],
        "structs": [],
        "defines": [
            "CAMERA_ATTRIBUTES_H"
        ]
    },
    "scene/resources/curve_texture.h": {
        "classes": [
            "CurveTexture",
            "CurveXYZTexture"
        ],
        "structs": [],
        "defines": [
            "CURVE_TEXTURE_H"
        ]
    },
    "scene/resources/canvas_item_material.h": {
        "classes": [
            "CanvasItemMaterial"
        ],
        "structs": [
            "ShaderNames",
            "ShaderData"
        ],
        "defines": [
            "CANVAS_ITEM_MATERIAL_H"
        ]
    },
    "scene/resources/text_line.h": {
        "classes": [
            "TextLine"
        ],
        "structs": [],
        "defines": [
            "TEXT_LINE_H"
        ]
    },
    "scene/resources/image_texture.h": {
        "classes": [
            "ImageTexture",
            "ImageTextureLayered",
            "ImageTexture3D",
            "Texture2DArray",
            "Cubemap",
            "CubemapArray"
        ],
        "structs": [],
        "defines": [
            "IMAGE_TEXTURE_H"
        ]
    },
    "scene/resources/sky.h": {
        "classes": [
            "Sky"
        ],
        "structs": [],
        "defines": [
            "SKY_H"
        ]
    },
    "scene/resources/3d/concave_polygon_shape_3d.h": {
        "classes": [
            "ConcavePolygonShape3D"
        ],
        "structs": [
            "DrawEdge"
        ],
        "defines": [
            "CONCAVE_POLYGON_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/capsule_shape_3d.h": {
        "classes": [
            "CapsuleShape3D"
        ],
        "structs": [],
        "defines": [
            "CAPSULE_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/cylinder_shape_3d.h": {
        "classes": [
            "CylinderShape3D"
        ],
        "structs": [],
        "defines": [
            "CYLINDER_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/shape_3d.h": {
        "classes": [
            "Shape3D"
        ],
        "structs": [],
        "defines": [
            "SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/mesh_library.h": {
        "classes": [
            "MeshLibrary"
        ],
        "structs": [
            "ShapeData",
            "Item"
        ],
        "defines": [
            "MESH_LIBRARY_H"
        ]
    },
    "scene/resources/3d/sky_material.h": {
        "classes": [
            "ProceduralSkyMaterial",
            "PanoramaSkyMaterial",
            "PhysicalSkyMaterial"
        ],
        "structs": [],
        "defines": [
            "SKY_MATERIAL_H"
        ]
    },
    "scene/resources/3d/height_map_shape_3d.h": {
        "classes": [
            "HeightMapShape3D"
        ],
        "structs": [],
        "defines": [
            "HEIGHT_MAP_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/sphere_shape_3d.h": {
        "classes": [
            "SphereShape3D"
        ],
        "structs": [],
        "defines": [
            "SPHERE_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/skin.h": {
        "classes": [
            "Skin"
        ],
        "structs": [
            "Bind"
        ],
        "defines": [
            "SKIN_H"
        ]
    },
    "scene/resources/3d/fog_material.h": {
        "classes": [
            "FogMaterial"
        ],
        "structs": [],
        "defines": [
            "FOG_MATERIAL_H"
        ]
    },
    "scene/resources/3d/box_shape_3d.h": {
        "classes": [
            "BoxShape3D"
        ],
        "structs": [],
        "defines": [
            "BOX_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/importer_mesh.h": {
        "classes": [
            "ImporterMesh"
        ],
        "structs": [
            "Surface",
            "BlendShape",
            "LOD",
            "LODComparator"
        ],
        "defines": [
            "IMPORTER_MESH_H"
        ]
    },
    "scene/resources/3d/convex_polygon_shape_3d.h": {
        "classes": [
            "ConvexPolygonShape3D"
        ],
        "structs": [],
        "defines": [
            "CONVEX_POLYGON_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/world_boundary_shape_3d.h": {
        "classes": [
            "WorldBoundaryShape3D"
        ],
        "structs": [],
        "defines": [
            "WORLD_BOUNDARY_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/primitive_meshes.h": {
        "classes": [
            "PrimitiveMesh",
            "CapsuleMesh",
            "BoxMesh",
            "CylinderMesh",
            "PlaneMesh",
            "QuadMesh",
            "PrismMesh",
            "SphereMesh",
            "TorusMesh",
            "PointMesh",
            "TubeTrailMesh",
            "RibbonTrailMesh",
            "TextMesh"
        ],
        "structs": [
            "ContourPoint",
            "ContourInfo",
            "GlyphMeshKey",
            "GlyphMeshKeyHasher",
            "GlyphMeshData"
        ],
        "defines": [
            "PRIMITIVE_MESHES_H"
        ]
    },
    "scene/resources/3d/separation_ray_shape_3d.h": {
        "classes": [
            "SeparationRayShape3D"
        ],
        "structs": [],
        "defines": [
            "SEPARATION_RAY_SHAPE_3D_H"
        ]
    },
    "scene/resources/3d/world_3d.h": {
        "classes": [
            "World3D"
        ],
        "structs": [],
        "defines": [
            "WORLD_3D_H"
        ]
    },
    "scene/resources/default_theme/default_theme_icons.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_DEFAULT_THEME_ICONS_H"
        ]
    },
    "scene/resources/default_theme/default_font.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_DEFAULT_FONTS_H"
        ]
    },
    "scene/resources/2d/capsule_shape_2d.h": {
        "classes": [
            "CapsuleShape2D"
        ],
        "structs": [],
        "defines": [
            "CAPSULE_SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/shape_2d.h": {
        "classes": [
            "Shape2D"
        ],
        "structs": [],
        "defines": [
            "SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/circle_shape_2d.h": {
        "classes": [
            "CircleShape2D"
        ],
        "structs": [],
        "defines": [
            "CIRCLE_SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/tile_set.h": {
        "classes": [
            "TileMapPattern",
            "TileSet",
            "TerrainsPattern",
            "TileSetSource",
            "TileSetAtlasSource",
            "TileSetScenesCollectionSource",
            "TileData"
        ],
        "structs": [
            "CompatibilityShapeData",
            "CompatibilityTileData",
            "PackedSceneSource",
            "OcclusionLayer",
            "PhysicsLayer",
            "Terrain",
            "TerrainSet",
            "NavigationLayer",
            "CustomDataLayer",
            "TileAlternativesData",
            "SceneData",
            "OcclusionLayerTileData",
            "PhysicsLayerTileData",
            "PolygonShapeTileData",
            "NavigationLayerTileData"
        ],
        "defines": [
            "TILE_SET_H"
        ]
    },
    "scene/resources/2d/polygon_path_finder.h": {
        "classes": [
            "PolygonPathFinder"
        ],
        "structs": [
            "Point"
        ],
        "defines": [
            "POLYGON_PATH_FINDER_H"
        ]
    },
    "scene/resources/2d/concave_polygon_shape_2d.h": {
        "classes": [
            "ConcavePolygonShape2D"
        ],
        "structs": [],
        "defines": [
            "CONCAVE_POLYGON_SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/rectangle_shape_2d.h": {
        "classes": [
            "RectangleShape2D"
        ],
        "structs": [],
        "defines": [
            "RECTANGLE_SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/segment_shape_2d.h": {
        "classes": [
            "SegmentShape2D"
        ],
        "structs": [],
        "defines": [
            "SEGMENT_SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/separation_ray_shape_2d.h": {
        "classes": [
            "SeparationRayShape2D"
        ],
        "structs": [],
        "defines": [
            "SEPARATION_RAY_SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/convex_polygon_shape_2d.h": {
        "classes": [
            "ConvexPolygonShape2D"
        ],
        "structs": [],
        "defines": [
            "CONVEX_POLYGON_SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/world_boundary_shape_2d.h": {
        "classes": [
            "WorldBoundaryShape2D"
        ],
        "structs": [],
        "defines": [
            "WORLD_BOUNDARY_SHAPE_2D_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_2d.h": {
        "classes": [
            "SkeletonModification2D"
        ],
        "structs": [],
        "defines": [
            "SKELETON_MODIFICATION_2D_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_2d_ccdik.h": {
        "classes": [
            "SkeletonModification2DCCDIK"
        ],
        "structs": [
            "CCDIK_Joint_Data2D"
        ],
        "defines": [
            "SKELETON_MODIFICATION_2D_CCDIK_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_2d_stackholder.h": {
        "classes": [
            "SkeletonModification2DStackHolder"
        ],
        "structs": [],
        "defines": [
            "SKELETON_MODIFICATION_2D_STACKHOLDER_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_2d_lookat.h": {
        "classes": [
            "SkeletonModification2DLookAt"
        ],
        "structs": [],
        "defines": [
            "SKELETON_MODIFICATION_2D_LOOKAT_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_2d_jiggle.h": {
        "classes": [
            "SkeletonModification2DJiggle"
        ],
        "structs": [
            "Jiggle_Joint_Data2D"
        ],
        "defines": [
            "SKELETON_MODIFICATION_2D_JIGGLE_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_2d_twoboneik.h": {
        "classes": [
            "SkeletonModification2DTwoBoneIK"
        ],
        "structs": [],
        "defines": [
            "SKELETON_MODIFICATION_2D_TWOBONEIK_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_2d_physicalbones.h": {
        "classes": [
            "SkeletonModification2DPhysicalBones"
        ],
        "structs": [
            "PhysicalBone_Data2D"
        ],
        "defines": [
            "SKELETON_MODIFICATION_2D_PHYSICALBONES_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_stack_2d.h": {
        "classes": [
            "SkeletonModificationStack2D"
        ],
        "structs": [],
        "defines": [
            "SKELETON_MODIFICATION_STACK_2D_H"
        ]
    },
    "scene/resources/2d/skeleton/skeleton_modification_2d_fabrik.h": {
        "classes": [
            "SkeletonModification2DFABRIK"
        ],
        "structs": [
            "FABRIK_Joint_Data2D"
        ],
        "defines": [
            "SKELETON_MODIFICATION_2D_FABRIK_H"
        ]
    },
    "scene/animation/tween.h": {
        "classes": [
            "Tweener",
            "Tween",
            "PropertyTweener",
            "IntervalTweener",
            "CallbackTweener",
            "MethodTweener"
        ],
        "structs": [],
        "defines": [
            "TWEEN_H"
        ]
    },
    "scene/animation/animation_node_state_machine.h": {
        "classes": [
            "AnimationNodeStateMachineTransition",
            "AnimationNodeStateMachine",
            "AnimationNodeStateMachinePlayback"
        ],
        "structs": [
            "State",
            "Transition",
            "AStarCost",
            "TransitionInfo",
            "NextInfo",
            "ChildStateMachineInfo"
        ],
        "defines": [
            "ANIMATION_NODE_STATE_MACHINE_H"
        ]
    },
    "scene/animation/animation_blend_space_2d.h": {
        "classes": [
            "AnimationNodeBlendSpace2D"
        ],
        "structs": [
            "BlendPoint",
            "BlendTriangle"
        ],
        "defines": [
            "ANIMATION_BLEND_SPACE_2D_H"
        ]
    },
    "scene/animation/animation_mixer.h": {
        "classes": [
            "AnimationMixer",
            "AnimatedValuesBackup"
        ],
        "structs": [
            "AnimationLibraryData",
            "AnimationData",
            "PlaybackInfo",
            "AnimationInstance",
            "TrackCache",
            "TrackCacheTransform",
            "RootMotionCache",
            "TrackCacheBlendShape",
            "TrackCacheValue",
            "TrackCacheMethod",
            "PlayingAudioStreamInfo",
            "PlayingAudioTrackInfo",
            "TrackCacheAudio",
            "TrackCacheAnimation",
            "CaptureCache"
        ],
        "defines": [
            "ANIMATION_MIXER_H"
        ]
    },
    "scene/animation/animation_blend_space_1d.h": {
        "classes": [
            "AnimationNodeBlendSpace1D"
        ],
        "structs": [
            "BlendPoint"
        ],
        "defines": [
            "ANIMATION_BLEND_SPACE_1D_H"
        ]
    },
    "scene/animation/animation_tree.h": {
        "classes": [
            "AnimationNode",
            "AnimationRootNode",
            "AnimationNodeStartState",
            "AnimationNodeEndState",
            "AnimationTree"
        ],
        "structs": [
            "Input",
            "NodeState",
            "ProcessState",
            "ChildNode",
            "Activity"
        ],
        "defines": [
            "ANIMATION_TREE_H",
            "HUGE_LENGTH"
        ]
    },
    "scene/animation/animation_blend_tree.h": {
        "classes": [
            "AnimationNodeAnimation",
            "AnimationNodeSync",
            "AnimationNodeOneShot",
            "AnimationNodeAdd2",
            "AnimationNodeAdd3",
            "AnimationNodeBlend2",
            "AnimationNodeBlend3",
            "AnimationNodeSub2",
            "AnimationNodeTimeScale",
            "AnimationNodeTimeSeek",
            "AnimationNodeTransition",
            "AnimationNodeOutput",
            "AnimationNodeBlendTree"
        ],
        "structs": [
            "InputData",
            "Node",
            "NodeConnection"
        ],
        "defines": [
            "ANIMATION_BLEND_TREE_H"
        ]
    },
    "scene/animation/easing_equations.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "EASING_EQUATIONS_H"
        ]
    },
    "scene/animation/animation_player.h": {
        "classes": [
            "AnimationPlayer"
        ],
        "structs": [
            "PlaybackData",
            "Blend",
            "Playback",
            "BlendKey"
        ],
        "defines": [
            "ANIMATION_PLAYER_H"
        ]
    },
    "scene/animation/root_motion_view.h": {
        "classes": [
            "RootMotionView"
        ],
        "structs": [],
        "defines": [
            "ROOT_MOTION_VIEW_H"
        ]
    },
    "scene/audio/audio_stream_player_internal.h": {
        "classes": [
            "AudioStreamPlayerInternal"
        ],
        "structs": [
            "ParameterData"
        ],
        "defines": [
            "AUDIO_STREAM_PLAYER_INTERNAL_H"
        ]
    },
    "scene/audio/audio_stream_player.h": {
        "classes": [
            "AudioStreamPlayer"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_PLAYER_H"
        ]
    },
    "scene/theme/default_theme_icons.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_DEFAULT_THEME_ICONS_H"
        ]
    },
    "scene/theme/default_theme.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DEFAULT_THEME_H"
        ]
    },
    "scene/theme/theme_owner.h": {
        "classes": [
            "ThemeOwner"
        ],
        "structs": [],
        "defines": [
            "THEME_OWNER_H"
        ]
    },
    "scene/theme/theme_db.h": {
        "classes": [
            "ThemeDB",
            "ThemeContext"
        ],
        "structs": [
            "ThemeItemBind",
            "SortByType"
        ],
        "defines": [
            "THEME_DB_H",
            "BIND_THEME_ITEM",
            "BIND_THEME_ITEM_CUSTOM",
            "BIND_THEME_ITEM_EXT"
        ]
    },
    "scene/theme/default_font.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_DEFAULT_FONTS_H"
        ]
    },
    "scene/gui/video_stream_player.h": {
        "classes": [
            "VideoStreamPlayer"
        ],
        "structs": [
            "Output"
        ],
        "defines": [
            "VIDEO_STREAM_PLAYER_H"
        ]
    },
    "scene/gui/file_dialog.h": {
        "classes": [
            "FileDialog"
        ],
        "structs": [
            "ThemeCache",
            "Option"
        ],
        "defines": [
            "FILE_DIALOG_H"
        ]
    },
    "scene/gui/item_list.h": {
        "classes": [
            "ItemList"
        ],
        "structs": [
            "Item",
            "ThemeCache"
        ],
        "defines": [
            "ITEM_LIST_H"
        ]
    },
    "scene/gui/progress_bar.h": {
        "classes": [
            "ProgressBar"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "PROGRESS_BAR_H"
        ]
    },
    "scene/gui/control.h": {
        "classes": [
            "Control"
        ],
        "structs": [
            "CComparator",
            "Data"
        ],
        "defines": [
            "CONTROL_H",
            "SET_DRAG_FORWARDING_CD",
            "SET_DRAG_FORWARDING_CDU",
            "SET_DRAG_FORWARDING_GCD",
            "SET_DRAG_FORWARDING_GCDU"
        ]
    },
    "scene/gui/range.h": {
        "classes": [
            "Range"
        ],
        "structs": [
            "Shared"
        ],
        "defines": [
            "RANGE_H"
        ]
    },
    "scene/gui/label.h": {
        "classes": [
            "Label"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "LABEL_H"
        ]
    },
    "scene/gui/graph_edit.h": {
        "classes": [
            "GraphEditFilter",
            "GraphEditMinimap",
            "GraphEdit"
        ],
        "structs": [
            "ThemeCache",
            "Connection",
            "Cache",
            "ConnectionType",
            "ThemeCache"
        ],
        "defines": [
            "GRAPH_EDIT_H"
        ]
    },
    "scene/gui/text_edit.h": {
        "classes": [
            "TextEdit",
            "Text"
        ],
        "structs": [
            "GutterInfo",
            "Gutter",
            "Line",
            "TextOperation",
            "LineDrawingCache",
            "Selection",
            "Caret",
            "ThemeCache",
            "BraceMatchingData"
        ],
        "defines": [
            "TEXT_EDIT_H"
        ]
    },
    "scene/gui/popup.h": {
        "classes": [
            "Popup",
            "PopupPanel"
        ],
        "structs": [
            "ThemeCache",
            "ThemeCache"
        ],
        "defines": [
            "POPUP_H"
        ]
    },
    "scene/gui/spin_box.h": {
        "classes": [
            "SpinBox"
        ],
        "structs": [
            "Drag",
            "ThemeCache"
        ],
        "defines": [
            "SPIN_BOX_H"
        ]
    },
    "scene/gui/flow_container.h": {
        "classes": [
            "FlowContainer",
            "HFlowContainer",
            "VFlowContainer"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "FLOW_CONTAINER_H"
        ]
    },
    "scene/gui/container.h": {
        "classes": [
            "Container"
        ],
        "structs": [],
        "defines": [
            "CONTAINER_H"
        ]
    },
    "scene/gui/rich_text_effect.h": {
        "classes": [
            "CharFXTransform",
            "RichTextEffect"
        ],
        "structs": [],
        "defines": [
            "RICH_TEXT_EFFECT_H"
        ]
    },
    "scene/gui/graph_element.h": {
        "classes": [
            "GraphElement"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "GRAPH_ELEMENT_H"
        ]
    },
    "scene/gui/code_edit.h": {
        "classes": [
            "CodeEdit"
        ],
        "structs": [
            "BracePair",
            "Delimiter",
            "ThemeCache",
            "CodeCompletionOptionCompare"
        ],
        "defines": [
            "CODE_EDIT_H"
        ]
    },
    "scene/gui/base_button.h": {
        "classes": [
            "BaseButton",
            "ButtonGroup"
        ],
        "structs": [
            "Status"
        ],
        "defines": [
            "BASE_BUTTON_H"
        ]
    },
    "scene/gui/graph_node.h": {
        "classes": [
            "GraphNode"
        ],
        "structs": [
            "Slot",
            "PortCache",
            "_MinSizeCache",
            "ThemeCache"
        ],
        "defines": [
            "GRAPH_NODE_H"
        ]
    },
    "scene/gui/texture_progress_bar.h": {
        "classes": [
            "TextureProgressBar"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_PROGRESS_BAR_H"
        ]
    },
    "scene/gui/tree.h": {
        "classes": [
            "TreeItem",
            "Tree"
        ],
        "structs": [
            "Cell",
            "Button",
            "ColumnInfo",
            "ThemeCache",
            "Cache"
        ],
        "defines": [
            "TREE_H"
        ]
    },
    "scene/gui/margin_container.h": {
        "classes": [
            "MarginContainer"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "MARGIN_CONTAINER_H"
        ]
    },
    "scene/gui/nine_patch_rect.h": {
        "classes": [
            "NinePatchRect"
        ],
        "structs": [],
        "defines": [
            "NINE_PATCH_RECT_H"
        ]
    },
    "scene/gui/texture_button.h": {
        "classes": [
            "TextureButton"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_BUTTON_H"
        ]
    },
    "scene/gui/box_container.h": {
        "classes": [
            "BoxContainer",
            "HBoxContainer",
            "VBoxContainer"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "BOX_CONTAINER_H"
        ]
    },
    "scene/gui/scroll_bar.h": {
        "classes": [
            "ScrollBar",
            "HScrollBar",
            "VScrollBar"
        ],
        "structs": [
            "Drag",
            "ThemeCache"
        ],
        "defines": [
            "SCROLL_BAR_H"
        ]
    },
    "scene/gui/dialogs.h": {
        "classes": [
            "AcceptDialog",
            "ConfirmationDialog"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "DIALOGS_H"
        ]
    },
    "scene/gui/scroll_container.h": {
        "classes": [
            "ScrollContainer"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "SCROLL_CONTAINER_H"
        ]
    },
    "scene/gui/aspect_ratio_container.h": {
        "classes": [
            "AspectRatioContainer"
        ],
        "structs": [],
        "defines": [
            "ASPECT_RATIO_CONTAINER_H"
        ]
    },
    "scene/gui/menu_bar.h": {
        "classes": [
            "MenuBar"
        ],
        "structs": [
            "Menu",
            "ThemeCache"
        ],
        "defines": [
            "MENU_BAR_H"
        ]
    },
    "scene/gui/center_container.h": {
        "classes": [
            "CenterContainer"
        ],
        "structs": [],
        "defines": [
            "CENTER_CONTAINER_H"
        ]
    },
    "scene/gui/grid_container.h": {
        "classes": [
            "GridContainer"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "GRID_CONTAINER_H"
        ]
    },
    "scene/gui/check_box.h": {
        "classes": [
            "CheckBox"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "CHECK_BOX_H"
        ]
    },
    "scene/gui/option_button.h": {
        "classes": [
            "OptionButton"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "OPTION_BUTTON_H"
        ]
    },
    "scene/gui/slider.h": {
        "classes": [
            "Slider",
            "HSlider",
            "VSlider"
        ],
        "structs": [
            "Grab",
            "ThemeCache"
        ],
        "defines": [
            "SLIDER_H"
        ]
    },
    "scene/gui/check_button.h": {
        "classes": [
            "CheckButton"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "CHECK_BUTTON_H"
        ]
    },
    "scene/gui/panel.h": {
        "classes": [
            "Panel"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "PANEL_H"
        ]
    },
    "scene/gui/menu_button.h": {
        "classes": [
            "MenuButton"
        ],
        "structs": [],
        "defines": [
            "MENU_BUTTON_H"
        ]
    },
    "scene/gui/panel_container.h": {
        "classes": [
            "PanelContainer"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "PANEL_CONTAINER_H"
        ]
    },
    "scene/gui/texture_rect.h": {
        "classes": [
            "TextureRect"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_RECT_H"
        ]
    },
    "scene/gui/view_panner.h": {
        "classes": [
            "ViewPanner"
        ],
        "structs": [],
        "defines": [
            "VIEW_PANNER_H"
        ]
    },
    "scene/gui/rich_text_label.h": {
        "classes": [
            "RichTextLabel"
        ],
        "structs": [
            "Line",
            "Item",
            "ItemFrame",
            "ItemText",
            "ItemDropcap",
            "ItemImage",
            "ItemFont",
            "ItemFontSize",
            "ItemColor",
            "ItemOutlineSize",
            "ItemOutlineColor",
            "ItemUnderline",
            "ItemStrikethrough",
            "ItemMeta",
            "ItemHint",
            "ItemLanguage",
            "ItemParagraph",
            "ItemIndent",
            "ItemList",
            "ItemNewline",
            "ItemTable",
            "Column",
            "ItemFade",
            "ItemFX",
            "ItemShake",
            "ItemWave",
            "ItemTornado",
            "ItemRainbow",
            "ItemPulse",
            "ItemBGColor",
            "ItemFGColor",
            "ItemCustomFX",
            "ItemContext",
            "Selection",
            "ThemeCache"
        ],
        "defines": [
            "RICH_TEXT_LABEL_H"
        ]
    },
    "scene/gui/separator.h": {
        "classes": [
            "Separator",
            "VSeparator",
            "HSeparator"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "SEPARATOR_H"
        ]
    },
    "scene/gui/button.h": {
        "classes": [
            "Button"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "BUTTON_H"
        ]
    },
    "scene/gui/link_button.h": {
        "classes": [
            "LinkButton"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "LINK_BUTTON_H"
        ]
    },
    "scene/gui/color_picker.h": {
        "classes": [
            "ColorPresetButton",
            "ColorPicker",
            "ColorPickerButton"
        ],
        "structs": [
            "ThemeCache",
            "ThemeCache",
            "ThemeCache"
        ],
        "defines": [
            "COLOR_PICKER_H"
        ]
    },
    "scene/gui/color_mode.h": {
        "classes": [
            "ColorMode",
            "ColorModeHSV",
            "ColorModeRGB",
            "ColorModeRAW",
            "ColorModeOKHSL"
        ],
        "structs": [],
        "defines": [
            "COLOR_MODE_H"
        ]
    },
    "scene/gui/reference_rect.h": {
        "classes": [
            "ReferenceRect"
        ],
        "structs": [],
        "defines": [
            "REFERENCE_RECT_H"
        ]
    },
    "scene/gui/tab_container.h": {
        "classes": [
            "TabContainer"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "TAB_CONTAINER_H"
        ]
    },
    "scene/gui/color_rect.h": {
        "classes": [
            "ColorRect"
        ],
        "structs": [],
        "defines": [
            "COLOR_RECT_H"
        ]
    },
    "scene/gui/split_container.h": {
        "classes": [
            "SplitContainerDragger",
            "SplitContainer",
            "HSplitContainer",
            "VSplitContainer"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "SPLIT_CONTAINER_H"
        ]
    },
    "scene/gui/tab_bar.h": {
        "classes": [
            "TabBar"
        ],
        "structs": [
            "Tab",
            "ThemeCache"
        ],
        "defines": [
            "TAB_BAR_H"
        ]
    },
    "scene/gui/popup_menu.h": {
        "classes": [
            "PopupMenu"
        ],
        "structs": [
            "Item",
            "ThemeCache"
        ],
        "defines": [
            "POPUP_MENU_H"
        ]
    },
    "scene/gui/line_edit.h": {
        "classes": [
            "LineEdit"
        ],
        "structs": [
            "Selection",
            "TextOperation",
            "ClearButtonStatus",
            "ThemeCache"
        ],
        "defines": [
            "LINE_EDIT_H"
        ]
    },
    "scene/gui/subviewport_container.h": {
        "classes": [
            "SubViewportContainer"
        ],
        "structs": [],
        "defines": [
            "SUBVIEWPORT_CONTAINER_H"
        ]
    },
    "scene/gui/graph_edit_arranger.h": {
        "classes": [
            "GraphEditArranger"
        ],
        "structs": [],
        "defines": [
            "GRAPH_EDIT_ARRANGER_H"
        ]
    },
    "scene/debugger/scene_debugger.h": {
        "classes": [
            "SceneDebugger",
            "SceneDebuggerObject",
            "SceneDebuggerTree",
            "LiveEditor"
        ],
        "structs": [
            "RemoteNode"
        ],
        "defines": [
            "SCENE_DEBUGGER_H"
        ]
    },
    "scene/main/instance_placeholder.h": {
        "classes": [
            "InstancePlaceholder"
        ],
        "structs": [
            "PropSet"
        ],
        "defines": [
            "INSTANCE_PLACEHOLDER_H"
        ]
    },
    "scene/main/multiplayer_api.h": {
        "classes": [
            "MultiplayerAPI",
            "MultiplayerAPIExtension"
        ],
        "structs": [],
        "defines": [
            "MULTIPLAYER_API_H"
        ]
    },
    "scene/main/multiplayer_peer.h": {
        "classes": [
            "MultiplayerPeer",
            "MultiplayerPeerExtension"
        ],
        "structs": [],
        "defines": [
            "MULTIPLAYER_PEER_H"
        ]
    },
    "scene/main/viewport.h": {
        "classes": [
            "ViewportTexture",
            "Viewport",
            "SubViewport"
        ],
        "structs": [
            "SubWindow",
            "GUI",
            "Camera3DOverrideData"
        ],
        "defines": [
            "VIEWPORT_H"
        ]
    },
    "scene/main/missing_node.h": {
        "classes": [
            "MissingNode"
        ],
        "structs": [],
        "defines": [
            "MISSING_NODE_H"
        ]
    },
    "scene/main/canvas_layer.h": {
        "classes": [
            "CanvasLayer"
        ],
        "structs": [],
        "defines": [
            "CANVAS_LAYER_H"
        ]
    },
    "scene/main/window.h": {
        "classes": [
            "Window"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "WINDOW_H"
        ]
    },
    "scene/main/canvas_item.h": {
        "classes": [
            "CanvasItem",
            "CanvasTexture"
        ],
        "structs": [],
        "defines": [
            "CANVAS_ITEM_H"
        ]
    },
    "scene/main/node.h": {
        "classes": [
            "Node"
        ],
        "structs": [
            "Comparator",
            "GroupData",
            "ComparatorByIndex",
            "ComparatorWithPriority",
            "ComparatorWithPhysicsPriority",
            "Data",
            "GroupInfo"
        ],
        "defines": [
            "NODE_H",
            "ERR_THREAD_GUARD",
            "ERR_THREAD_GUARD_V",
            "ERR_MAIN_THREAD_GUARD",
            "ERR_MAIN_THREAD_GUARD_V",
            "ERR_READ_THREAD_GUARD",
            "ERR_READ_THREAD_GUARD_V",
            "ERR_THREAD_GUARD",
            "ERR_THREAD_GUARD_V",
            "ERR_MAIN_THREAD_GUARD",
            "ERR_MAIN_THREAD_GUARD_V",
            "ERR_READ_THREAD_GUARD",
            "ERR_READ_THREAD_GUARD_V",
            "DEPRECATED_NODE_WARNING",
            "EXPERIMENTAL_NODE_WARNING"
        ]
    },
    "scene/main/timer.h": {
        "classes": [
            "Timer"
        ],
        "structs": [],
        "defines": [
            "TIMER_H"
        ]
    },
    "scene/main/resource_preloader.h": {
        "classes": [
            "ResourcePreloader"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_PRELOADER_H"
        ]
    },
    "scene/main/scene_tree.h": {
        "classes": [
            "SceneTreeTimer",
            "SceneTree"
        ],
        "structs": [
            "ProcessGroup",
            "ProcessGroupSort",
            "Group",
            "UGCall"
        ],
        "defines": [
            "SCENE_TREE_H"
        ]
    },
    "scene/main/http_request.h": {
        "classes": [
            "HTTPRequest"
        ],
        "structs": [],
        "defines": [
            "HTTP_REQUEST_H"
        ]
    },
    "scene/main/status_indicator.h": {
        "classes": [
            "StatusIndicator"
        ],
        "structs": [],
        "defines": [
            "STATUS_INDICATOR_H"
        ]
    },
    "scene/main/shader_globals_override.h": {
        "classes": [
            "ShaderGlobalsOverride"
        ],
        "structs": [
            "Override"
        ],
        "defines": [
            "SHADER_GLOBALS_OVERRIDE_H"
        ]
    },
    "scene/2d/visible_on_screen_notifier_2d.h": {
        "classes": [
            "VisibleOnScreenNotifier2D",
            "VisibleOnScreenEnabler2D"
        ],
        "structs": [],
        "defines": [
            "VISIBLE_ON_SCREEN_NOTIFIER_2D_H"
        ]
    },
    "scene/2d/path_2d.h": {
        "classes": [
            "Path2D",
            "PathFollow2D"
        ],
        "structs": [],
        "defines": [
            "PATH_2D_H"
        ]
    },
    "scene/2d/line_2d.h": {
        "classes": [
            "Line2D"
        ],
        "structs": [],
        "defines": [
            "LINE_2D_H"
        ]
    },
    "scene/2d/remote_transform_2d.h": {
        "classes": [
            "RemoteTransform2D"
        ],
        "structs": [],
        "defines": [
            "REMOTE_TRANSFORM_2D_H"
        ]
    },
    "scene/2d/parallax_background.h": {
        "classes": [
            "ParallaxBackground"
        ],
        "structs": [],
        "defines": [
            "PARALLAX_BACKGROUND_H"
        ]
    },
    "scene/2d/touch_screen_button.h": {
        "classes": [
            "TouchScreenButton"
        ],
        "structs": [],
        "defines": [
            "TOUCH_SCREEN_BUTTON_H"
        ]
    },
    "scene/2d/marker_2d.h": {
        "classes": [
            "Marker2D"
        ],
        "structs": [],
        "defines": [
            "MARKER_2D_H"
        ]
    },
    "scene/2d/camera_2d.h": {
        "classes": [
            "Camera2D"
        ],
        "structs": [],
        "defines": [
            "CAMERA_2D_H"
        ]
    },
    "scene/2d/audio_stream_player_2d.h": {
        "classes": [
            "AudioStreamPlayer2D"
        ],
        "structs": [
            "Output"
        ],
        "defines": [
            "AUDIO_STREAM_PLAYER_2D_H"
        ]
    },
    "scene/2d/navigation_agent_2d.h": {
        "classes": [
            "NavigationAgent2D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_AGENT_2D_H"
        ]
    },
    "scene/2d/line_builder.h": {
        "classes": [
            "LineBuilder"
        ],
        "structs": [],
        "defines": [
            "LINE_BUILDER_H"
        ]
    },
    "scene/2d/back_buffer_copy.h": {
        "classes": [
            "BackBufferCopy"
        ],
        "structs": [],
        "defines": [
            "BACK_BUFFER_COPY_H"
        ]
    },
    "scene/2d/navigation_obstacle_2d.h": {
        "classes": [
            "NavigationObstacle2D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_OBSTACLE_2D_H"
        ]
    },
    "scene/2d/parallax_2d.h": {
        "classes": [
            "Parallax2D"
        ],
        "structs": [],
        "defines": [
            "PARALLAX_2D_H"
        ]
    },
    "scene/2d/navigation_region_2d.h": {
        "classes": [
            "NavigationRegion2D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_REGION_2D_H"
        ]
    },
    "scene/2d/light_occluder_2d.h": {
        "classes": [
            "OccluderPolygon2D",
            "LightOccluder2D"
        ],
        "structs": [],
        "defines": [
            "LIGHT_OCCLUDER_2D_H"
        ]
    },
    "scene/2d/mesh_instance_2d.h": {
        "classes": [
            "MeshInstance2D"
        ],
        "structs": [],
        "defines": [
            "MESH_INSTANCE_2D_H"
        ]
    },
    "scene/2d/animated_sprite_2d.h": {
        "classes": [
            "AnimatedSprite2D"
        ],
        "structs": [],
        "defines": [
            "ANIMATED_SPRITE_2D_H"
        ]
    },
    "scene/2d/navigation_link_2d.h": {
        "classes": [
            "NavigationLink2D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_LINK_2D_H"
        ]
    },
    "scene/2d/light_2d.h": {
        "classes": [
            "Light2D",
            "PointLight2D",
            "DirectionalLight2D"
        ],
        "structs": [],
        "defines": [
            "LIGHT_2D_H"
        ]
    },
    "scene/2d/canvas_group.h": {
        "classes": [
            "CanvasGroup"
        ],
        "structs": [],
        "defines": [
            "CANVAS_GROUP_H"
        ]
    },
    "scene/2d/audio_listener_2d.h": {
        "classes": [
            "AudioListener2D"
        ],
        "structs": [],
        "defines": [
            "AUDIO_LISTENER_2D_H"
        ]
    },
    "scene/2d/gpu_particles_2d.h": {
        "classes": [
            "GPUParticles2D"
        ],
        "structs": [],
        "defines": [
            "GPU_PARTICLES_2D_H"
        ]
    },
    "scene/2d/tile_map_layer_group.h": {
        "classes": [
            "TileMapLayerGroup"
        ],
        "structs": [],
        "defines": [
            "TILE_MAP_LAYER_GROUP_H"
        ]
    },
    "scene/2d/cpu_particles_2d.h": {
        "classes": [
            "CPUParticles2D"
        ],
        "structs": [
            "Particle",
            "SortLifetime",
            "SortAxis"
        ],
        "defines": [
            "CPU_PARTICLES_2D_H"
        ]
    },
    "scene/2d/tile_map_layer.h": {
        "classes": [
            "TerrainConstraint",
            "DebugQuadrant",
            "RenderingQuadrant",
            "TileMapLayer"
        ],
        "structs": [
            "CellData",
            "CellDataYSortedComparator",
            "CoordsWorldComparator"
        ],
        "defines": [
            "TILE_MAP_LAYER_H"
        ]
    },
    "scene/2d/skeleton_2d.h": {
        "classes": [
            "Bone2D",
            "Skeleton2D"
        ],
        "structs": [
            "Bone"
        ],
        "defines": [
            "SKELETON_2D_H"
        ]
    },
    "scene/2d/sprite_2d.h": {
        "classes": [
            "Sprite2D"
        ],
        "structs": [],
        "defines": [
            "SPRITE_2D_H"
        ]
    },
    "scene/2d/parallax_layer.h": {
        "classes": [
            "ParallaxLayer"
        ],
        "structs": [],
        "defines": [
            "PARALLAX_LAYER_H"
        ]
    },
    "scene/2d/canvas_modulate.h": {
        "classes": [
            "CanvasModulate"
        ],
        "structs": [],
        "defines": [
            "CANVAS_MODULATE_H"
        ]
    },
    "scene/2d/tile_map.h": {
        "classes": [
            "TileMap"
        ],
        "structs": [],
        "defines": [
            "TILE_MAP_H"
        ]
    },
    "scene/2d/node_2d.h": {
        "classes": [
            "Node2D"
        ],
        "structs": [],
        "defines": [
            "NODE_2D_H"
        ]
    },
    "scene/2d/polygon_2d.h": {
        "classes": [
            "Polygon2D"
        ],
        "structs": [
            "Bone"
        ],
        "defines": [
            "POLYGON_2D_H"
        ]
    },
    "scene/2d/multimesh_instance_2d.h": {
        "classes": [
            "MultiMeshInstance2D"
        ],
        "structs": [],
        "defines": [
            "MULTIMESH_INSTANCE_2D_H"
        ]
    },
    "scene/2d/physics/kinematic_collision_2d.h": {
        "classes": [
            "KinematicCollision2D"
        ],
        "structs": [],
        "defines": [
            "KINEMATIC_COLLISION_2D_H"
        ]
    },
    "scene/2d/physics/character_body_2d.h": {
        "classes": [
            "CharacterBody2D"
        ],
        "structs": [],
        "defines": [
            "CHARACTER_BODY_2D_H"
        ]
    },
    "scene/2d/physics/collision_object_2d.h": {
        "classes": [
            "CollisionObject2D"
        ],
        "structs": [
            "ShapeData",
            "Shape"
        ],
        "defines": [
            "COLLISION_OBJECT_2D_H"
        ]
    },
    "scene/2d/physics/physical_bone_2d.h": {
        "classes": [
            "PhysicalBone2D"
        ],
        "structs": [],
        "defines": [
            "PHYSICAL_BONE_2D_H"
        ]
    },
    "scene/2d/physics/area_2d.h": {
        "classes": [
            "Area2D"
        ],
        "structs": [
            "ShapePair",
            "BodyState",
            "AreaShapePair",
            "AreaState"
        ],
        "defines": [
            "AREA_2D_H"
        ]
    },
    "scene/2d/physics/static_body_2d.h": {
        "classes": [
            "StaticBody2D"
        ],
        "structs": [],
        "defines": [
            "STATIC_BODY_2D_H"
        ]
    },
    "scene/2d/physics/animatable_body_2d.h": {
        "classes": [
            "AnimatableBody2D"
        ],
        "structs": [],
        "defines": [
            "ANIMATABLE_BODY_2D_H"
        ]
    },
    "scene/2d/physics/ray_cast_2d.h": {
        "classes": [
            "RayCast2D"
        ],
        "structs": [],
        "defines": [
            "RAY_CAST_2D_H"
        ]
    },
    "scene/2d/physics/physics_body_2d.h": {
        "classes": [
            "PhysicsBody2D"
        ],
        "structs": [],
        "defines": [
            "PHYSICS_BODY_2D_H"
        ]
    },
    "scene/2d/physics/collision_polygon_2d.h": {
        "classes": [
            "CollisionPolygon2D"
        ],
        "structs": [],
        "defines": [
            "COLLISION_POLYGON_2D_H"
        ]
    },
    "scene/2d/physics/shape_cast_2d.h": {
        "classes": [
            "ShapeCast2D"
        ],
        "structs": [],
        "defines": [
            "SHAPE_CAST_2D_H"
        ]
    },
    "scene/2d/physics/rigid_body_2d.h": {
        "classes": [
            "RigidBody2D"
        ],
        "structs": [
            "ShapePair",
            "RigidBody2D_RemoveAction",
            "BodyState",
            "ContactMonitor"
        ],
        "defines": [
            "RIGID_BODY_2D_H"
        ]
    },
    "scene/2d/physics/collision_shape_2d.h": {
        "classes": [
            "CollisionShape2D"
        ],
        "structs": [],
        "defines": [
            "COLLISION_SHAPE_2D_H"
        ]
    },
    "scene/2d/physics/joints/joint_2d.h": {
        "classes": [
            "Joint2D"
        ],
        "structs": [],
        "defines": [
            "JOINT_2D_H"
        ]
    },
    "scene/2d/physics/joints/damped_spring_joint_2d.h": {
        "classes": [
            "DampedSpringJoint2D"
        ],
        "structs": [],
        "defines": [
            "DAMPED_SPRING_JOINT_2D_H"
        ]
    },
    "scene/2d/physics/joints/pin_joint_2d.h": {
        "classes": [
            "PinJoint2D"
        ],
        "structs": [],
        "defines": [
            "PIN_JOINT_2D_H"
        ]
    },
    "scene/2d/physics/joints/groove_joint_2d.h": {
        "classes": [
            "GrooveJoint2D"
        ],
        "structs": [],
        "defines": [
            "GROOVE_JOINT_2D_H"
        ]
    },
    "main/main.h": {
        "classes": [
            "Main"
        ],
        "structs": [],
        "defines": [
            "MAIN_H",
            "TEST_MAIN_OVERRIDE",
            "TEST_MAIN_PARAM_OVERRIDE"
        ]
    },
    "main/performance.h": {
        "classes": [
            "Performance",
            "MonitorCall"
        ],
        "structs": [],
        "defines": [
            "PERFORMANCE_H",
            "PERF_WARN_OFFLINE_FUNCTION",
            "PERF_WARN_PROCESS_SYNC"
        ]
    },
    "main/app_icon.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "APP_ICON_H"
        ]
    },
    "main/splash.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "BOOT_SPLASH_H"
        ]
    },
    "main/main_timer_sync.h": {
        "classes": [
            "MainTimerSync",
            "DeltaSmoother"
        ],
        "structs": [
            "MainFrameTime"
        ],
        "defines": [
            "MAIN_TIMER_SYNC_H",
            "GODOT_DEBUG_DELTA_SMOOTHER"
        ]
    },
    "modules/register_module_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGISTER_MODULE_TYPES_H"
        ]
    },
    "modules/modules_enabled.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MODULE_ZIP_ENABLED",
            "MODULE_XATLAS_UNWRAP_ENABLED",
            "MODULE_WEBXR_ENABLED",
            "MODULE_WEBSOCKET_ENABLED",
            "MODULE_WEBRTC_ENABLED",
            "MODULE_WEBP_ENABLED",
            "MODULE_VHACD_ENABLED",
            "MODULE_UPNP_ENABLED",
            "MODULE_TINYEXR_ENABLED",
            "MODULE_TGA_ENABLED",
            "MODULE_TEXT_SERVER_ADV_ENABLED",
            "MODULE_SVG_ENABLED",
            "MODULE_SQUISH_ENABLED",
            "MODULE_REGEX_ENABLED",
            "MODULE_RAYCAST_ENABLED",
            "MODULE_OPENXR_ENABLED",
            "MODULE_OGG_ENABLED",
            "MODULE_NOISE_ENABLED",
            "MODULE_NAVIGATION_ENABLED",
            "MODULE_MULTIPLAYER_ENABLED",
            "MODULE_MOBILE_VR_ENABLED",
            "MODULE_MINIMP3_ENABLED",
            "MODULE_MESHOPTIMIZER_ENABLED",
            "MODULE_MBEDTLS_ENABLED",
            "MODULE_LIGHTMAPPER_RD_ENABLED",
            "MODULE_JSONRPC_ENABLED",
            "MODULE_JPG_ENABLED",
            "MODULE_HDR_ENABLED",
            "MODULE_GRIDMAP_ENABLED",
            "MODULE_GLTF_ENABLED",
            "MODULE_GLSLANG_ENABLED",
            "MODULE_GDSCRIPT_ENABLED",
            "MODULE_FREETYPE_ENABLED",
            "MODULE_FBX_ENABLED",
            "MODULE_ETCPAK_ENABLED",
            "MODULE_ENET_ENABLED",
            "MODULE_DDS_ENABLED",
            "MODULE_CVTT_ENABLED",
            "MODULE_CSG_ENABLED",
            "MODULE_CAMERA_ENABLED",
            "MODULE_BMP_ENABLED",
            "MODULE_BASIS_UNIVERSAL_ENABLED",
            "MODULE_ASTCENC_ENABLED",
            "MODULE_VORBIS_ENABLED",
            "MODULE_THEORA_ENABLED",
            "MODULE_MSDFGEN_ENABLED",
            "MODULE_KTX_ENABLED"
        ]
    },
    "modules/svg/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "SVG_REGISTER_TYPES_H"
        ]
    },
    "modules/svg/image_loader_svg.h": {
        "classes": [
            "ImageLoaderSVG"
        ],
        "structs": [],
        "defines": [
            "IMAGE_LOADER_SVG_H"
        ]
    },
    "modules/enet/enet_packet_peer.h": {
        "classes": [
            "ENetPacketPeer"
        ],
        "structs": [],
        "defines": [
            "ENET_PACKET_PEER_H"
        ]
    },
    "modules/enet/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "ENET_REGISTER_TYPES_H"
        ]
    },
    "modules/enet/enet_connection.h": {
        "classes": [
            "ENetConnection",
            "Compressor"
        ],
        "structs": [
            "Event"
        ],
        "defines": [
            "ENET_CONNECTION_H"
        ]
    },
    "modules/enet/enet_multiplayer_peer.h": {
        "classes": [
            "ENetMultiplayerPeer"
        ],
        "structs": [
            "Packet"
        ],
        "defines": [
            "ENET_MULTIPLAYER_PEER_H"
        ]
    },
    "modules/websocket/packet_buffer.h": {
        "classes": [
            "PacketBuffer"
        ],
        "structs": [],
        "defines": [
            "PACKET_BUFFER_H"
        ]
    },
    "modules/websocket/websocket_multiplayer_peer.h": {
        "classes": [
            "WebSocketMultiplayerPeer"
        ],
        "structs": [
            "Packet",
            "PendingPeer"
        ],
        "defines": [
            "WEBSOCKET_MULTIPLAYER_PEER_H"
        ]
    },
    "modules/websocket/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WEBSOCKET_REGISTER_TYPES_H"
        ]
    },
    "modules/websocket/emws_peer.h": {
        "classes": [
            "EMWSPeer"
        ],
        "structs": [],
        "defines": [
            "EMWS_PEER_H"
        ]
    },
    "modules/websocket/websocket_peer.h": {
        "classes": [
            "WebSocketPeer"
        ],
        "structs": [],
        "defines": [
            "WEBSOCKET_PEER_H"
        ]
    },
    "modules/websocket/remote_debugger_peer_websocket.h": {
        "classes": [
            "RemoteDebuggerPeerWebSocket"
        ],
        "structs": [],
        "defines": [
            "REMOTE_DEBUGGER_PEER_WEBSOCKET_H"
        ]
    },
    "modules/websocket/wsl_peer.h": {
        "classes": [
            "WSLPeer",
            "Resolver"
        ],
        "structs": [],
        "defines": [
            "WSL_PEER_H",
            "WSL_MAX_HEADER_SIZE"
        ]
    },
    "modules/websocket/editor/editor_debugger_server_websocket.h": {
        "classes": [
            "EditorDebuggerServerWebSocket"
        ],
        "structs": [],
        "defines": [
            "EDITOR_DEBUGGER_SERVER_WEBSOCKET_H"
        ]
    },
    "modules/ogg/ogg_packet_sequence.h": {
        "classes": [
            "OggPacketSequence",
            "OggPacketSequencePlayback"
        ],
        "structs": [],
        "defines": [
            "OGG_PACKET_SEQUENCE_H"
        ]
    },
    "modules/ogg/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "OGG_REGISTER_TYPES_H"
        ]
    },
    "modules/meshoptimizer/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MESHOPTIMIZER_REGISTER_TYPES_H"
        ]
    },
    "modules/csg/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "CSG_REGISTER_TYPES_H"
        ]
    },
    "modules/csg/csg.h": {
        "classes": [],
        "structs": [
            "CSGBrush",
            "Face",
            "CSGBrushOperation",
            "MeshMerge",
            "Face",
            "FaceBVH",
            "FaceBVHCmpX",
            "FaceBVHCmpY",
            "FaceBVHCmpZ",
            "VertexKey",
            "VertexKeyHash",
            "Intersection",
            "IntersectionDistance",
            "Build2DFaces",
            "Vertex2D",
            "Face2D",
            "Build2DFaceCollection"
        ],
        "defines": [
            "CSG_H"
        ]
    },
    "modules/csg/csg_shape.h": {
        "classes": [
            "CSGShape3D",
            "CSGCombiner3D",
            "CSGPrimitive3D",
            "CSGMesh3D",
            "CSGSphere3D",
            "CSGBox3D",
            "CSGCylinder3D",
            "CSGTorus3D",
            "CSGPolygon3D"
        ],
        "structs": [
            "Vector3Hasher",
            "ShapeUpdateSurface"
        ],
        "defines": [
            "CSG_SHAPE_H"
        ]
    },
    "modules/csg/editor/csg_gizmos.h": {
        "classes": [
            "CSGShape3DGizmoPlugin",
            "EditorPluginCSG"
        ],
        "structs": [],
        "defines": [
            "CSG_GIZMOS_H"
        ]
    },
    "modules/tinyexr/image_loader_tinyexr.h": {
        "classes": [
            "ImageLoaderTinyEXR"
        ],
        "structs": [],
        "defines": [
            "IMAGE_LOADER_TINYEXR_H"
        ]
    },
    "modules/tinyexr/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TINYEXR_REGISTER_TYPES_H"
        ]
    },
    "modules/tinyexr/image_saver_tinyexr.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "IMAGE_SAVER_TINYEXR_H"
        ]
    },
    "modules/vorbis/audio_stream_ogg_vorbis.h": {
        "classes": [
            "AudioStreamPlaybackOggVorbis",
            "AudioStreamOggVorbis"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_OGG_VORBIS_H"
        ]
    },
    "modules/vorbis/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VORBIS_REGISTER_TYPES_H"
        ]
    },
    "modules/vorbis/resource_importer_ogg_vorbis.h": {
        "classes": [
            "ResourceImporterOggVorbis"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_OGG_VORBIS_H"
        ]
    },
    "modules/lightmapper_rd/lm_raster.glsl.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "LM_RASTER_SHADER_GLSL_RAW_H"
        ]
    },
    "modules/lightmapper_rd/lm_blendseams.glsl.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "LM_BLENDSEAMS_SHADER_GLSL_RAW_H"
        ]
    },
    "modules/lightmapper_rd/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "LIGHTMAPPER_RD_REGISTER_TYPES_H"
        ]
    },
    "modules/lightmapper_rd/lm_compute.glsl.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "LM_COMPUTE_SHADER_GLSL_RAW_H"
        ]
    },
    "modules/lightmapper_rd/lightmapper_rd.h": {
        "classes": [
            "LightmapperRD"
        ],
        "structs": [
            "BakeParameters",
            "MeshInstance",
            "Light",
            "Vertex",
            "Edge",
            "Probe",
            "EdgeHash",
            "EdgeUV2",
            "Seam",
            "VertexHash",
            "Triangle",
            "ClusterAABB",
            "TriangleSort",
            "TriangleSortAxis",
            "RasterPushConstant",
            "RasterSeamsPushConstant",
            "PushConstant",
            "DenoiseParams"
        ],
        "defines": [
            "LIGHTMAPPER_RD_H"
        ]
    },
    "modules/freetype/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "FREETYPE_REGISTER_TYPES_H"
        ]
    },
    "modules/gdscript/gdscript_warning.h": {
        "classes": [
            "GDScriptWarning"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_WARNING_H"
        ]
    },
    "modules/gdscript/gdscript_codegen.h": {
        "classes": [
            "GDScriptCodeGenerator"
        ],
        "structs": [
            "Address"
        ],
        "defines": [
            "GDSCRIPT_CODEGEN_H"
        ]
    },
    "modules/gdscript/gdscript_lambda_callable.h": {
        "classes": [
            "GDScriptLambdaCallable",
            "GDScriptLambdaSelfCallable"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_LAMBDA_CALLABLE_H"
        ]
    },
    "modules/gdscript/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GDSCRIPT_REGISTER_TYPES_H"
        ]
    },
    "modules/gdscript/gdscript_tokenizer.h": {
        "classes": [
            "GDScriptTokenizer",
            "GDScriptTokenizerText"
        ],
        "structs": [
            "Token",
            "CommentData"
        ],
        "defines": [
            "GDSCRIPT_TOKENIZER_H"
        ]
    },
    "modules/gdscript/gdscript_function.h": {
        "classes": [
            "GDScriptDataType",
            "GDScriptFunction",
            "GDScriptFunctionState"
        ],
        "structs": [
            "StackDebug",
            "Profile",
            "NativeProfile",
            "CallState"
        ],
        "defines": [
            "GDSCRIPT_FUNCTION_H"
        ]
    },
    "modules/gdscript/gdscript_utility_functions.h": {
        "classes": [
            "GDScriptUtilityFunctions"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_UTILITY_FUNCTIONS_H"
        ]
    },
    "modules/gdscript/gdscript_cache.h": {
        "classes": [
            "GDScriptParserRef",
            "GDScriptCache"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_CACHE_H"
        ]
    },
    "modules/gdscript/gdscript_compiler.h": {
        "classes": [
            "GDScriptCompiler"
        ],
        "structs": [
            "FunctionLambdaInfo",
            "ScriptLambdaInfo",
            "CodeGen"
        ],
        "defines": [
            "GDSCRIPT_COMPILER_H"
        ]
    },
    "modules/gdscript/gdscript_byte_codegen.h": {
        "classes": [
            "GDScriptByteCodeGenerator"
        ],
        "structs": [
            "StackSlot",
            "CallTarget"
        ],
        "defines": [
            "GDSCRIPT_BYTE_CODEGEN_H"
        ]
    },
    "modules/gdscript/gdscript_tokenizer_buffer.h": {
        "classes": [
            "GDScriptTokenizerBuffer"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_TOKENIZER_BUFFER_H"
        ]
    },
    "modules/gdscript/gdscript_analyzer.h": {
        "classes": [
            "GDScriptAnalyzer"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_ANALYZER_H"
        ]
    },
    "modules/gdscript/gdscript.h": {
        "classes": [
            "GDScriptNativeClass",
            "GDScript",
            "UpdatableFuncPtr",
            "GDScriptInstance",
            "GDScriptLanguage",
            "ResourceFormatLoaderGDScript",
            "ResourceFormatSaverGDScript"
        ],
        "structs": [
            "MemberInfo",
            "ClearData",
            "LambdaInfo",
            "CallLevel",
            "CallStack"
        ],
        "defines": [
            "GDSCRIPT_H"
        ]
    },
    "modules/gdscript/gdscript_rpc_callable.h": {
        "classes": [
            "GDScriptRPCCallable"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_RPC_CALLABLE_H"
        ]
    },
    "modules/gdscript/gdscript_utility_callable.h": {
        "classes": [
            "GDScriptUtilityCallable"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_UTILITY_CALLABLE_H"
        ]
    },
    "modules/gdscript/gdscript_parser.h": {
        "classes": [
            "GDScriptParser",
            "DataType",
            "TreePrinter"
        ],
        "structs": [
            "ParserError",
            "ClassDocData",
            "MemberDocData",
            "Node",
            "ExpressionNode",
            "AnnotationNode",
            "ArrayNode",
            "AssertNode",
            "AssignableNode",
            "AssignmentNode",
            "AwaitNode",
            "BinaryOpNode",
            "BreakNode",
            "BreakpointNode",
            "CallNode",
            "CastNode",
            "EnumNode",
            "Value",
            "ClassNode",
            "Member",
            "ConstantNode",
            "ContinueNode",
            "DictionaryNode",
            "Pair",
            "ForNode",
            "FunctionNode",
            "GetNodeNode",
            "IdentifierNode",
            "IfNode",
            "LambdaNode",
            "LiteralNode",
            "MatchNode",
            "MatchBranchNode",
            "ParameterNode",
            "PassNode",
            "PatternNode",
            "Pair",
            "PreloadNode",
            "ReturnNode",
            "SelfNode",
            "SignalNode",
            "SubscriptNode",
            "SuiteNode",
            "Local",
            "TernaryOpNode",
            "TypeNode",
            "TypeTestNode",
            "UnaryOpNode",
            "VariableNode",
            "WhileNode",
            "CompletionContext",
            "CompletionCall",
            "AnnotationInfo",
            "ParseRule"
        ],
        "defines": [
            "GDSCRIPT_PARSER_H"
        ]
    },
    "modules/gdscript/language_server/gdscript_language_protocol.h": {
        "classes": [
            "GDScriptLanguageProtocol"
        ],
        "structs": [
            "LSPeer"
        ],
        "defines": [
            "GDSCRIPT_LANGUAGE_PROTOCOL_H",
            "LSP_MAX_BUFFER_SIZE",
            "LSP_MAX_CLIENTS"
        ]
    },
    "modules/gdscript/language_server/godot_lsp.h": {
        "classes": [],
        "structs": [
            "TextDocumentIdentifier",
            "Position",
            "Range",
            "Location",
            "LocationLink",
            "TextDocumentPositionParams",
            "ReferenceContext",
            "ReferenceParams",
            "DocumentLinkParams",
            "DocumentLink",
            "TextEdit",
            "WorkspaceEdit",
            "Command",
            "CompletionOptions",
            "SignatureHelpOptions",
            "CodeLensOptions",
            "RenameOptions",
            "DocumentLinkOptions",
            "ExecuteCommandOptions",
            "SaveOptions",
            "ColorProviderOptions",
            "FoldingRangeProviderOptions",
            "TextDocumentSyncOptions",
            "StaticRegistrationOptions",
            "DocumentOnTypeFormattingOptions",
            "TextDocumentItem",
            "TextDocumentContentChangeEvent",
            "DiagnosticRelatedInformation",
            "Diagnostic",
            "MarkupContent",
            "CompletionItem",
            "CompletionList",
            "DocumentSymbol",
            "ApplyWorkspaceEditParams",
            "NativeSymbolInspectParams",
            "FoldingRange",
            "CompletionContext",
            "CompletionParams",
            "Hover",
            "ParameterInformation",
            "SignatureInformation",
            "SignatureHelp",
            "FileOperationPattern",
            "FileOperationFilter",
            "FileOperationRegistrationOptions",
            "FileOperations",
            "Workspace",
            "ServerCapabilities",
            "InitializeResult",
            "GodotNativeClassInfo",
            "GodotCapabilities"
        ],
        "defines": [
            "GODOT_LSP_H"
        ]
    },
    "modules/gdscript/language_server/gdscript_text_document.h": {
        "classes": [
            "GDScriptTextDocument"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_TEXT_DOCUMENT_H"
        ]
    },
    "modules/gdscript/language_server/gdscript_language_server.h": {
        "classes": [
            "GDScriptLanguageServer"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_LANGUAGE_SERVER_H"
        ]
    },
    "modules/gdscript/language_server/gdscript_extend_parser.h": {
        "classes": [
            "ExtendGDScriptParser"
        ],
        "structs": [
            "GodotPosition",
            "GodotRange"
        ],
        "defines": [
            "GDSCRIPT_EXTEND_PARSER_H",
            "LINE_NUMBER_TO_INDEX",
            "COLUMN_NUMBER_TO_INDEX",
            "SYMBOL_SEPERATOR",
            "JOIN_SYMBOLS"
        ]
    },
    "modules/gdscript/language_server/gdscript_workspace.h": {
        "classes": [
            "GDScriptWorkspace"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_WORKSPACE_H"
        ]
    },
    "modules/gdscript/editor/gdscript_translation_parser_plugin.h": {
        "classes": [
            "GDScriptEditorTranslationParserPlugin"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_TRANSLATION_PARSER_PLUGIN_H"
        ]
    },
    "modules/gdscript/editor/gdscript_docgen.h": {
        "classes": [
            "GDScriptDocGen"
        ],
        "structs": [],
        "defines": [
            "GDSCRIPT_DOCGEN_H"
        ]
    },
    "modules/gdscript/editor/gdscript_highlighter.h": {
        "classes": [
            "GDScriptSyntaxHighlighter"
        ],
        "structs": [
            "ColorRegion"
        ],
        "defines": [
            "GDSCRIPT_HIGHLIGHTER_H"
        ]
    },
    "modules/gdscript/editor/script_templates/templates.gen.h": {
        "classes": [],
        "structs": [
            "ScriptLanguage"
        ],
        "defines": [
            "_CODE_TEMPLATES_H"
        ]
    },
    "modules/openxr/openxr_api.h": {
        "classes": [
            "OpenXRAPI"
        ],
        "structs": [
            "OpenXRSwapChainInfo",
            "Tracker",
            "ActionSet",
            "ActionTracker",
            "Action",
            "InteractionProfile"
        ],
        "defines": [
            "OPENXR_API_H"
        ]
    },
    "modules/openxr/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "OPENXR_REGISTER_TYPES_H",
            "MODULE_OPENXR_HAS_PREREGISTER"
        ]
    },
    "modules/openxr/openxr_api_extension.h": {
        "classes": [
            "OpenXRAPIExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_API_EXTENSION_H"
        ]
    },
    "modules/openxr/openxr_interface.h": {
        "classes": [
            "OpenXRInterface"
        ],
        "structs": [
            "Action",
            "ActionSet",
            "Tracker"
        ],
        "defines": [
            "OPENXR_INTERFACE_H",
            "INTERACTION_PROFILE_NONE"
        ]
    },
    "modules/openxr/util.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "UTIL_H",
            "UNPACK",
            "INIT_XR_FUNC_V",
            "EXT_INIT_XR_FUNC_V",
            "OPENXR_API_INIT_XR_FUNC_V",
            "INIT_XR_FUNC",
            "EXT_INIT_XR_FUNC",
            "OPENXR_API_INIT_XR_FUNC",
            "TRY_INIT_XR_FUNC",
            "EXT_TRY_INIT_XR_FUNC",
            "OPENXR_TRY_API_INIT_XR_FUNC",
            "GDEXTENSION_INIT_XR_FUNC",
            "GDEXTENSION_INIT_XR_FUNC_V",
            "EXT_PROTO_XRRESULT_FUNC1",
            "EXT_PROTO_XRRESULT_FUNC2",
            "EXT_PROTO_XRRESULT_FUNC3",
            "EXT_PROTO_XRRESULT_FUNC4",
            "EXT_PROTO_XRRESULT_FUNC5",
            "EXT_PROTO_XRRESULT_FUNC6"
        ]
    },
    "modules/openxr/openxr_platform_inc.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "OPENXR_PLATFORM_INC_H",
            "XR_USE_GRAPHICS_API_VULKAN",
            "XR_USE_GRAPHICS_API_OPENGL_ES",
            "XR_USE_GRAPHICS_API_OPENGL",
            "GL_GLEXT_PROTOTYPES",
            "GL3_PROTOTYPES"
        ]
    },
    "modules/openxr/openxr_util.h": {
        "classes": [
            "OpenXRUtil"
        ],
        "structs": [
            "XrMatrix4x4f"
        ],
        "defines": [
            "OPENXR_UTIL_H"
        ]
    },
    "modules/openxr/action_map/openxr_action_set.h": {
        "classes": [
            "OpenXRActionSet"
        ],
        "structs": [],
        "defines": [
            "OPENXR_ACTION_SET_H"
        ]
    },
    "modules/openxr/action_map/openxr_interaction_profile.h": {
        "classes": [
            "OpenXRIPBinding",
            "OpenXRInteractionProfile"
        ],
        "structs": [],
        "defines": [
            "OPENXR_INTERACTION_PROFILE_H"
        ]
    },
    "modules/openxr/action_map/openxr_action_map.h": {
        "classes": [
            "OpenXRActionMap"
        ],
        "structs": [],
        "defines": [
            "OPENXR_ACTION_MAP_H"
        ]
    },
    "modules/openxr/action_map/openxr_interaction_profile_metadata.h": {
        "classes": [
            "OpenXRInteractionProfileMetadata"
        ],
        "structs": [
            "TopLevelPath",
            "IOPath",
            "InteractionProfile"
        ],
        "defines": [
            "OPENXR_INTERACTION_PROFILE_METADATA_H",
            "XR_PATH_UNSUPPORTED_NAME"
        ]
    },
    "modules/openxr/action_map/openxr_action.h": {
        "classes": [
            "OpenXRAction"
        ],
        "structs": [],
        "defines": [
            "OPENXR_ACTION_H"
        ]
    },
    "modules/openxr/extensions/openxr_htc_vive_tracker_extension.h": {
        "classes": [
            "OpenXRHTCViveTrackerExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_HTC_VIVE_TRACKER_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_wmr_controller_extension.h": {
        "classes": [
            "OpenXRWMRControllerExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_WMR_CONTROLLER_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_local_floor_extension.h": {
        "classes": [
            "OpenXRLocalFloorExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_LOCAL_FLOOR_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_eye_gaze_interaction.h": {
        "classes": [
            "OpenXREyeGazeInteractionExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_EYE_GAZE_INTERACTION_H"
        ]
    },
    "modules/openxr/extensions/openxr_composition_layer_provider.h": {
        "classes": [
            "OpenXRCompositionLayerProvider"
        ],
        "structs": [],
        "defines": [
            "OPENXR_COMPOSITION_LAYER_PROVIDER_H"
        ]
    },
    "modules/openxr/extensions/openxr_htc_controller_extension.h": {
        "classes": [
            "OpenXRHTCControllerExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_HTC_CONTROLLER_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_composition_layer_depth_extension.h": {
        "classes": [
            "OpenXRCompositionLayerDepthExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_COMPOSITION_LAYER_DEPTH_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_hand_tracking_extension.h": {
        "classes": [
            "OpenXRHandTrackingExtension"
        ],
        "structs": [
            "HandTracker"
        ],
        "defines": [
            "OPENXR_HAND_TRACKING_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_palm_pose_extension.h": {
        "classes": [
            "OpenXRPalmPoseExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_PALM_POSE_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_fb_display_refresh_rate_extension.h": {
        "classes": [
            "OpenXRDisplayRefreshRateExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_FB_DISPLAY_REFRESH_RATE_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_extension_wrapper_extension.h": {
        "classes": [
            "OpenXRExtensionWrapperExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_EXTENSION_WRAPPER_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_fb_update_swapchain_extension.h": {
        "classes": [
            "OpenXRFBUpdateSwapchainExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_FB_UPDATE_SWAPCHAIN_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_huawei_controller_extension.h": {
        "classes": [
            "OpenXRHuaweiControllerExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_HUAWEI_CONTROLLER_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_extension_wrapper.h": {
        "classes": [
            "OpenXRExtensionWrapper",
            "OpenXRGraphicsExtensionWrapper"
        ],
        "structs": [],
        "defines": [
            "OPENXR_EXTENSION_WRAPPER_H"
        ]
    },
    "modules/openxr/extensions/openxr_pico_controller_extension.h": {
        "classes": [
            "OpenXRPicoControllerExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_PICO_CONTROLLER_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_ml2_controller_extension.h": {
        "classes": [
            "OpenXRML2ControllerExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_ML2_CONTROLLER_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_meta_controller_extension.h": {
        "classes": [
            "OpenXRMetaControllerExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_META_CONTROLLER_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/openxr_fb_foveation_extension.h": {
        "classes": [
            "OpenXRFBFoveationExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_FB_FOVEATION_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/platform/openxr_opengl_extension.h": {
        "classes": [
            "OpenXROpenGLExtension"
        ],
        "structs": [
            "SwapchainGraphicsData"
        ],
        "defines": [
            "OPENXR_OPENGL_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/platform/openxr_android_extension.h": {
        "classes": [
            "OpenXRAndroidExtension"
        ],
        "structs": [],
        "defines": [
            "OPENXR_ANDROID_EXTENSION_H"
        ]
    },
    "modules/openxr/extensions/platform/openxr_vulkan_extension.h": {
        "classes": [
            "OpenXRVulkanExtension"
        ],
        "structs": [
            "SwapchainGraphicsData"
        ],
        "defines": [
            "OPENXR_VULKAN_EXTENSION_H"
        ]
    },
    "modules/openxr/scene/openxr_hand.h": {
        "classes": [
            "OpenXRHand"
        ],
        "structs": [
            "JointData"
        ],
        "defines": [
            "OPENXR_HAND_H"
        ]
    },
    "modules/openxr/editor/openxr_action_set_editor.h": {
        "classes": [
            "OpenXRActionSetEditor"
        ],
        "structs": [],
        "defines": [
            "OPENXR_ACTION_SET_EDITOR_H"
        ]
    },
    "modules/openxr/editor/openxr_interaction_profile_editor.h": {
        "classes": [
            "OpenXRInteractionProfileEditorBase",
            "OpenXRInteractionProfileEditor"
        ],
        "structs": [],
        "defines": [
            "OPENXR_INTERACTION_PROFILE_EDITOR_H"
        ]
    },
    "modules/openxr/editor/openxr_editor_plugin.h": {
        "classes": [
            "OpenXREditorPlugin"
        ],
        "structs": [],
        "defines": [
            "OPENXR_EDITOR_PLUGIN_H"
        ]
    },
    "modules/openxr/editor/openxr_action_map_editor.h": {
        "classes": [
            "OpenXRActionMapEditor"
        ],
        "structs": [],
        "defines": [
            "OPENXR_ACTION_MAP_EDITOR_H"
        ]
    },
    "modules/openxr/editor/openxr_select_action_dialog.h": {
        "classes": [
            "OpenXRSelectActionDialog"
        ],
        "structs": [],
        "defines": [
            "OPENXR_SELECT_ACTION_DIALOG_H"
        ]
    },
    "modules/openxr/editor/openxr_select_interaction_profile_dialog.h": {
        "classes": [
            "OpenXRSelectInteractionProfileDialog"
        ],
        "structs": [],
        "defines": [
            "OPENXR_SELECT_INTERACTION_PROFILE_DIALOG_H"
        ]
    },
    "modules/openxr/editor/openxr_action_editor.h": {
        "classes": [
            "OpenXRActionEditor"
        ],
        "structs": [],
        "defines": [
            "OPENXR_ACTION_EDITOR_H"
        ]
    },
    "modules/openxr/editor/openxr_select_runtime.h": {
        "classes": [
            "OpenXRSelectRuntime"
        ],
        "structs": [],
        "defines": [
            "OPENXR_SELECT_RUNTIME_H"
        ]
    },
    "modules/minimp3/resource_importer_mp3.h": {
        "classes": [
            "ResourceImporterMP3"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_MP3_H"
        ]
    },
    "modules/minimp3/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MINIMP3_REGISTER_TYPES_H"
        ]
    },
    "modules/minimp3/audio_stream_mp3.h": {
        "classes": [
            "AudioStreamPlaybackMP3",
            "AudioStreamMP3"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_MP3_H"
        ]
    },
    "modules/upnp/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "UPNP_REGISTER_TYPES_H"
        ]
    },
    "modules/upnp/upnp.h": {
        "classes": [
            "UPNP"
        ],
        "structs": [],
        "defines": [
            "UPNP_H"
        ]
    },
    "modules/upnp/upnp_device.h": {
        "classes": [
            "UPNPDevice"
        ],
        "structs": [],
        "defines": [
            "UPNP_DEVICE_H"
        ]
    },
    "modules/camera/camera_win.h": {
        "classes": [
            "CameraWindows"
        ],
        "structs": [],
        "defines": [
            "CAMERA_WIN_H"
        ]
    },
    "modules/camera/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "CAMERA_REGISTER_TYPES_H"
        ]
    },
    "modules/camera/camera_macos.h": {
        "classes": [
            "CameraMacOS"
        ],
        "structs": [],
        "defines": [
            "CAMERA_MACOS_H"
        ]
    },
    "modules/ktx/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "KTX_REGISTER_TYPES_H"
        ]
    },
    "modules/ktx/texture_loader_ktx.h": {
        "classes": [
            "ResourceFormatKTX"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_LOADER_KTX_H"
        ]
    },
    "modules/fbx/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "FBX_REGISTER_TYPES_H"
        ]
    },
    "modules/fbx/fbx_document.h": {
        "classes": [
            "FBXDocument"
        ],
        "structs": [],
        "defines": [
            "FBX_DOCUMENT_H"
        ]
    },
    "modules/fbx/fbx_state.h": {
        "classes": [
            "FBXState"
        ],
        "structs": [],
        "defines": [
            "FBX_STATE_H"
        ]
    },
    "modules/fbx/editor/editor_scene_importer_fbx2gltf.h": {
        "classes": [
            "EditorSceneFormatImporterFBX2GLTF"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCENE_IMPORTER_FBX2GLTF_H"
        ]
    },
    "modules/fbx/editor/editor_scene_importer_ufbx.h": {
        "classes": [
            "EditorSceneFormatImporterUFBX"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCENE_IMPORTER_UFBX_H"
        ]
    },
    "modules/hdr/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "HDR_REGISTER_TYPES_H"
        ]
    },
    "modules/hdr/image_loader_hdr.h": {
        "classes": [
            "ImageLoaderHDR"
        ],
        "structs": [],
        "defines": [
            "IMAGE_LOADER_HDR_H"
        ]
    },
    "modules/jsonrpc/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "JSONRPC_REGISTER_TYPES_H"
        ]
    },
    "modules/jsonrpc/jsonrpc.h": {
        "classes": [
            "JSONRPC"
        ],
        "structs": [],
        "defines": [
            "JSONRPC_H"
        ]
    },
    "modules/mbedtls/crypto_mbedtls.h": {
        "classes": [
            "CryptoKeyMbedTLS",
            "X509CertificateMbedTLS",
            "HMACContextMbedTLS",
            "CryptoMbedTLS"
        ],
        "structs": [],
        "defines": [
            "CRYPTO_MBEDTLS_H"
        ]
    },
    "modules/mbedtls/stream_peer_mbedtls.h": {
        "classes": [
            "StreamPeerMbedTLS"
        ],
        "structs": [],
        "defines": [
            "STREAM_PEER_MBEDTLS_H"
        ]
    },
    "modules/mbedtls/tls_context_mbedtls.h": {
        "classes": [
            "CookieContextMbedTLS",
            "TLSContextMbedTLS"
        ],
        "structs": [],
        "defines": [
            "TLS_CONTEXT_MBEDTLS_H"
        ]
    },
    "modules/mbedtls/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MBEDTLS_REGISTER_TYPES_H"
        ]
    },
    "modules/mbedtls/dtls_server_mbedtls.h": {
        "classes": [
            "DTLSServerMbedTLS"
        ],
        "structs": [],
        "defines": [
            "DTLS_SERVER_MBEDTLS_H"
        ]
    },
    "modules/mbedtls/packet_peer_mbed_dtls.h": {
        "classes": [
            "PacketPeerMbedDTLS"
        ],
        "structs": [],
        "defines": [
            "PACKET_PEER_MBED_DTLS_H"
        ]
    },
    "modules/navigation/nav_obstacle.h": {
        "classes": [
            "NavObstacle"
        ],
        "structs": [],
        "defines": [
            "NAV_OBSTACLE_H"
        ]
    },
    "modules/navigation/nav_agent.h": {
        "classes": [
            "NavAgent"
        ],
        "structs": [],
        "defines": [
            "NAV_AGENT_H"
        ]
    },
    "modules/navigation/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "NAVIGATION_REGISTER_TYPES_H"
        ]
    },
    "modules/navigation/nav_rid.h": {
        "classes": [
            "NavRid"
        ],
        "structs": [],
        "defines": [
            "NAV_RID_H"
        ]
    },
    "modules/navigation/nav_region.h": {
        "classes": [
            "NavRegion"
        ],
        "structs": [],
        "defines": [
            "NAV_REGION_H"
        ]
    },
    "modules/navigation/nav_map.h": {
        "classes": [
            "NavMap"
        ],
        "structs": [],
        "defines": [
            "NAV_MAP_H"
        ]
    },
    "modules/navigation/nav_utils.h": {
        "classes": [],
        "structs": [
            "EdgeKey",
            "Point",
            "Edge",
            "Connection",
            "Polygon",
            "NavigationPoly",
            "ClosestPointQueryResult"
        ],
        "defines": [
            "NAV_UTILS_H"
        ]
    },
    "modules/navigation/nav_link.h": {
        "classes": [
            "NavLink"
        ],
        "structs": [],
        "defines": [
            "NAV_LINK_H"
        ]
    },
    "modules/navigation/nav_base.h": {
        "classes": [
            "NavBase"
        ],
        "structs": [],
        "defines": [
            "NAV_BASE_H"
        ]
    },
    "modules/navigation/3d/nav_mesh_generator_3d.h": {
        "classes": [
            "NavMeshGenerator3D"
        ],
        "structs": [
            "NavMeshGeneratorTask3D"
        ],
        "defines": [
            "NAV_MESH_GENERATOR_3D_H"
        ]
    },
    "modules/navigation/3d/navigation_mesh_generator.h": {
        "classes": [
            "NavigationMeshGenerator"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_MESH_GENERATOR_H"
        ]
    },
    "modules/navigation/3d/godot_navigation_server_3d.h": {
        "classes": [
            "GodotNavigationServer3D"
        ],
        "structs": [
            "SetCommand"
        ],
        "defines": [
            "GODOT_NAVIGATION_SERVER_3D_H",
            "MERGE_INTERNAL",
            "MERGE",
            "COMMAND_1",
            "COMMAND_2"
        ]
    },
    "modules/navigation/2d/nav_mesh_generator_2d.h": {
        "classes": [
            "NavMeshGenerator2D"
        ],
        "structs": [
            "NavMeshGeneratorTask2D"
        ],
        "defines": [
            "NAV_MESH_GENERATOR_2D_H"
        ]
    },
    "modules/navigation/2d/godot_navigation_server_2d.h": {
        "classes": [
            "GodotNavigationServer2D"
        ],
        "structs": [],
        "defines": [
            "GODOT_NAVIGATION_SERVER_2D_H"
        ]
    },
    "modules/navigation/editor/navigation_mesh_editor_plugin.h": {
        "classes": [
            "NavigationMeshEditor",
            "NavigationMeshEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_MESH_EDITOR_PLUGIN_H"
        ]
    },
    "modules/etcpak/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "ETCPAK_REGISTER_TYPES_H"
        ]
    },
    "modules/etcpak/image_compress_etcpak.h": {
        "classes": [
            "EtcpakType"
        ],
        "structs": [],
        "defines": [
            "IMAGE_COMPRESS_ETCPAK_H"
        ]
    },
    "modules/tga/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TGA_REGISTER_TYPES_H"
        ]
    },
    "modules/tga/image_loader_tga.h": {
        "classes": [
            "ImageLoaderTGA"
        ],
        "structs": [
            "tga_header_s"
        ],
        "defines": [
            "IMAGE_LOADER_TGA_H",
            "TGA_IMAGE_DESCRIPTOR_ALPHA_MASK"
        ]
    },
    "modules/gltf/gltf_template_convert.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GLTF_TEMPLATE_CONVERT_H"
        ]
    },
    "modules/gltf/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GLTF_REGISTER_TYPES_H"
        ]
    },
    "modules/gltf/gltf_defines.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GLTF_DEFINES_H"
        ]
    },
    "modules/gltf/gltf_state.h": {
        "classes": [
            "GLTFState"
        ],
        "structs": [],
        "defines": [
            "GLTF_STATE_H"
        ]
    },
    "modules/gltf/gltf_document.h": {
        "classes": [
            "GLTFDocument"
        ],
        "structs": [],
        "defines": [
            "GLTF_DOCUMENT_H"
        ]
    },
    "modules/gltf/skin_tool.h": {
        "classes": [
            "SkinTool"
        ],
        "structs": [],
        "defines": [
            "SKIN_TOOL_H"
        ]
    },
    "modules/gltf/structures/gltf_texture.h": {
        "classes": [
            "GLTFTexture"
        ],
        "structs": [],
        "defines": [
            "GLTF_TEXTURE_H"
        ]
    },
    "modules/gltf/structures/gltf_camera.h": {
        "classes": [
            "GLTFCamera"
        ],
        "structs": [],
        "defines": [
            "GLTF_CAMERA_H"
        ]
    },
    "modules/gltf/structures/gltf_animation.h": {
        "classes": [
            "GLTFAnimation"
        ],
        "structs": [
            "Channel",
            "Track"
        ],
        "defines": [
            "GLTF_ANIMATION_H"
        ]
    },
    "modules/gltf/structures/gltf_node.h": {
        "classes": [
            "GLTFNode"
        ],
        "structs": [],
        "defines": [
            "GLTF_NODE_H"
        ]
    },
    "modules/gltf/structures/gltf_mesh.h": {
        "classes": [
            "GLTFMesh"
        ],
        "structs": [],
        "defines": [
            "GLTF_MESH_H"
        ]
    },
    "modules/gltf/structures/gltf_texture_sampler.h": {
        "classes": [
            "GLTFTextureSampler"
        ],
        "structs": [],
        "defines": [
            "GLTF_TEXTURE_SAMPLER_H"
        ]
    },
    "modules/gltf/structures/gltf_skeleton.h": {
        "classes": [
            "GLTFSkeleton"
        ],
        "structs": [],
        "defines": [
            "GLTF_SKELETON_H"
        ]
    },
    "modules/gltf/structures/gltf_buffer_view.h": {
        "classes": [
            "GLTFBufferView"
        ],
        "structs": [],
        "defines": [
            "GLTF_BUFFER_VIEW_H"
        ]
    },
    "modules/gltf/structures/gltf_skin.h": {
        "classes": [
            "GLTFSkin"
        ],
        "structs": [],
        "defines": [
            "GLTF_SKIN_H"
        ]
    },
    "modules/gltf/structures/gltf_accessor.h": {
        "classes": [],
        "structs": [
            "GLTFAccessor"
        ],
        "defines": [
            "GLTF_ACCESSOR_H"
        ]
    },
    "modules/gltf/extensions/gltf_light.h": {
        "classes": [
            "GLTFLight"
        ],
        "structs": [],
        "defines": [
            "GLTF_LIGHT_H"
        ]
    },
    "modules/gltf/extensions/gltf_spec_gloss.h": {
        "classes": [
            "GLTFSpecGloss"
        ],
        "structs": [],
        "defines": [
            "GLTF_SPEC_GLOSS_H"
        ]
    },
    "modules/gltf/extensions/gltf_document_extension_convert_importer_mesh.h": {
        "classes": [
            "GLTFDocumentExtensionConvertImporterMesh"
        ],
        "structs": [],
        "defines": [
            "GLTF_DOCUMENT_EXTENSION_CONVERT_IMPORTER_MESH_H"
        ]
    },
    "modules/gltf/extensions/gltf_document_extension_texture_webp.h": {
        "classes": [
            "GLTFDocumentExtensionTextureWebP"
        ],
        "structs": [],
        "defines": [
            "GLTF_DOCUMENT_EXTENSION_TEXTURE_WEBP_H"
        ]
    },
    "modules/gltf/extensions/gltf_document_extension_texture_ktx.h": {
        "classes": [
            "GLTFDocumentExtensionTextureKTX"
        ],
        "structs": [],
        "defines": [
            "GLTF_DOCUMENT_EXTENSION_TEXTURE_KTX_H"
        ]
    },
    "modules/gltf/extensions/gltf_document_extension.h": {
        "classes": [
            "GLTFDocumentExtension"
        ],
        "structs": [],
        "defines": [
            "GLTF_DOCUMENT_EXTENSION_H"
        ]
    },
    "modules/gltf/extensions/physics/gltf_document_extension_physics.h": {
        "classes": [
            "GLTFDocumentExtensionPhysics"
        ],
        "structs": [],
        "defines": [
            "GLTF_DOCUMENT_EXTENSION_PHYSICS_H"
        ]
    },
    "modules/gltf/extensions/physics/gltf_physics_body.h": {
        "classes": [
            "GLTFPhysicsBody",
            "PhysicsBodyType"
        ],
        "structs": [],
        "defines": [
            "GLTF_PHYSICS_BODY_H"
        ]
    },
    "modules/gltf/extensions/physics/gltf_physics_shape.h": {
        "classes": [
            "GLTFPhysicsShape"
        ],
        "structs": [],
        "defines": [
            "GLTF_PHYSICS_SHAPE_H"
        ]
    },
    "modules/gltf/editor/editor_scene_exporter_gltf_settings.h": {
        "classes": [
            "EditorSceneExporterGLTFSettings"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCENE_EXPORTER_GLTF_SETTINGS_H"
        ]
    },
    "modules/gltf/editor/editor_scene_importer_blend.h": {
        "classes": [
            "EditorSceneFormatImporterBlend",
            "EditorFileSystemImportFormatSupportQueryBlend"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCENE_IMPORTER_BLEND_H"
        ]
    },
    "modules/gltf/editor/editor_scene_importer_gltf.h": {
        "classes": [
            "EditorSceneFormatImporterGLTF"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCENE_IMPORTER_GLTF_H"
        ]
    },
    "modules/gltf/editor/editor_scene_exporter_gltf_plugin.h": {
        "classes": [
            "SceneExporterGLTFPlugin"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCENE_EXPORTER_GLTF_PLUGIN_H"
        ]
    },
    "modules/gltf/editor/editor_import_blend_runner.h": {
        "classes": [
            "EditorImportBlendRunner"
        ],
        "structs": [],
        "defines": [
            "EDITOR_IMPORT_BLEND_RUNNER_H"
        ]
    },
    "modules/basis_universal/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "BASIS_UNIVERSAL_REGISTER_TYPES_H"
        ]
    },
    "modules/basis_universal/image_compress_basisu.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "IMAGE_COMPRESS_BASISU_H"
        ]
    },
    "modules/webp/resource_saver_webp.h": {
        "classes": [
            "ResourceSaverWebP"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_SAVER_WEBP_H"
        ]
    },
    "modules/webp/webp_common.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WEBP_COMMON_H"
        ]
    },
    "modules/webp/image_loader_webp.h": {
        "classes": [
            "ImageLoaderWebP"
        ],
        "structs": [],
        "defines": [
            "IMAGE_LOADER_WEBP_H"
        ]
    },
    "modules/webp/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WEBP_REGISTER_TYPES_H"
        ]
    },
    "modules/regex/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGEX_REGISTER_TYPES_H"
        ]
    },
    "modules/regex/regex.h": {
        "classes": [
            "RegExMatch",
            "RegEx"
        ],
        "structs": [
            "Range"
        ],
        "defines": [
            "REGEX_H"
        ]
    },
    "modules/glslang/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GLSLANG_REGISTER_TYPES_H",
            "MODULE_GLSLANG_HAS_PREREGISTER"
        ]
    },
    "modules/jpg/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "JPG_REGISTER_TYPES_H"
        ]
    },
    "modules/jpg/image_loader_jpegd.h": {
        "classes": [
            "ImageLoaderJPG"
        ],
        "structs": [],
        "defines": [
            "IMAGE_LOADER_JPEGD_H"
        ]
    },
    "modules/zip/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "ZIP_REGISTER_TYPES_H"
        ]
    },
    "modules/zip/zip_reader.h": {
        "classes": [
            "ZIPReader"
        ],
        "structs": [],
        "defines": [
            "ZIP_READER_H"
        ]
    },
    "modules/zip/zip_packer.h": {
        "classes": [
            "ZIPPacker"
        ],
        "structs": [],
        "defines": [
            "ZIP_PACKER_H"
        ]
    },
    "modules/webxr/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WEBXR_REGISTER_TYPES_H"
        ]
    },
    "modules/webxr/webxr_interface_js.h": {
        "classes": [
            "WebXRInterfaceJS"
        ],
        "structs": [
            "Touch",
            "InputSource"
        ],
        "defines": [
            "WEBXR_INTERFACE_JS_H"
        ]
    },
    "modules/webxr/godot_webxr.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_WEBXR_H"
        ]
    },
    "modules/webxr/webxr_interface.h": {
        "classes": [
            "WebXRInterface"
        ],
        "structs": [],
        "defines": [
            "WEBXR_INTERFACE_H"
        ]
    },
    "modules/text_server_fb/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TEXT_SERVER_FB_REGISTER_TYPES_H"
        ]
    },
    "modules/text_server_fb/thorvg_svg_in_ot.h": {
        "classes": [],
        "structs": [
            "GL_State",
            "TVG_State"
        ],
        "defines": [
            "THORVG_SVG_IN_OT_H"
        ]
    },
    "modules/text_server_fb/text_server_fb.h": {
        "classes": [
            "TextServerFallback"
        ],
        "structs": [
            "FontTexturePosition",
            "Shelf",
            "ShelfPackTexture",
            "FontGlyph",
            "FontForSizeFallback",
            "FontFallbackLinkedVariation",
            "FontFallback",
            "TrimData",
            "ShapedTextDataFallback",
            "Span",
            "EmbeddedObject",
            "SystemFontKey",
            "SystemFontCacheRec",
            "SystemFontCache",
            "SystemFontKeyHasher"
        ],
        "defines": [
            "TEXT_SERVER_FB_H"
        ]
    },
    "modules/text_server_fb/thorvg_bounds_iterator.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "THORVG_BOUNDS_ITERATOR_H"
        ]
    },
    "modules/squish/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "SQUISH_REGISTER_TYPES_H"
        ]
    },
    "modules/squish/image_decompress_squish.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "IMAGE_DECOMPRESS_SQUISH_H"
        ]
    },
    "modules/noise/noise.h": {
        "classes": [
            "Noise"
        ],
        "structs": [
            "img_buff"
        ],
        "defines": [
            "NOISE_H"
        ]
    },
    "modules/noise/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "NOISE_REGISTER_TYPES_H"
        ]
    },
    "modules/noise/noise_texture_2d.h": {
        "classes": [
            "NoiseTexture2D"
        ],
        "structs": [],
        "defines": [
            "NOISE_TEXTURE_2D_H"
        ]
    },
    "modules/noise/noise_texture_3d.h": {
        "classes": [
            "NoiseTexture3D"
        ],
        "structs": [],
        "defines": [
            "NOISE_TEXTURE_3D_H"
        ]
    },
    "modules/noise/fastnoise_lite.h": {
        "classes": [
            "FastNoiseLite"
        ],
        "structs": [],
        "defines": [
            "FASTNOISE_LITE_H"
        ]
    },
    "modules/noise/editor/noise_editor_plugin.h": {
        "classes": [
            "NoiseEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "NOISE_EDITOR_PLUGIN_H"
        ]
    },
    "modules/raycast/lightmap_raycaster_embree.h": {
        "classes": [
            "LightmapRaycasterEmbree"
        ],
        "structs": [
            "AlphaTextureData"
        ],
        "defines": [
            "LIGHTMAP_RAYCASTER_EMBREE_H"
        ]
    },
    "modules/raycast/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "RAYCAST_REGISTER_TYPES_H"
        ]
    },
    "modules/raycast/static_raycaster_embree.h": {
        "classes": [
            "StaticRaycasterEmbree"
        ],
        "structs": [],
        "defines": [
            "STATIC_RAYCASTER_EMBREE_H"
        ]
    },
    "modules/raycast/raycast_occlusion_cull.h": {
        "classes": [
            "RaycastOcclusionCull",
            "RaycastHZBuffer"
        ],
        "structs": [
            "CameraRayThreadData",
            "InstanceID",
            "Occluder",
            "OccluderInstance",
            "Scenario",
            "RaycastThreadData",
            "TransformThreadData"
        ],
        "defines": [
            "RAYCAST_OCCLUSION_CULL_H"
        ]
    },
    "modules/mono/interop_types.h": {
        "classes": [],
        "structs": [
            "godot_rect2",
            "godot_rect2i"
        ],
        "defines": [
            "INTEROP_TYPES_H",
            "GODOT_VARIANT_SIZE",
            "GODOT_ARRAY_SIZE",
            "GODOT_DICTIONARY_SIZE",
            "GODOT_STRING_SIZE",
            "GODOT_STRING_NAME_SIZE",
            "GODOT_PACKED_ARRAY_SIZE",
            "GODOT_VECTOR2_SIZE",
            "GODOT_VECTOR2I_SIZE",
            "GODOT_RECT2_SIZE",
            "GODOT_RECT2I_SIZE",
            "GODOT_VECTOR3_SIZE",
            "GODOT_VECTOR3I_SIZE",
            "GODOT_TRANSFORM2D_SIZE",
            "GODOT_VECTOR4_SIZE",
            "GODOT_VECTOR4I_SIZE",
            "GODOT_PLANE_SIZE",
            "GODOT_QUATERNION_SIZE",
            "GODOT_AABB_SIZE",
            "GODOT_BASIS_SIZE",
            "GODOT_TRANSFORM3D_SIZE",
            "GODOT_PROJECTION_SIZE",
            "GODOT_COLOR_SIZE",
            "GODOT_NODE_PATH_SIZE",
            "GODOT_RID_SIZE",
            "GODOT_CALLABLE_SIZE",
            "GODOT_SIGNAL_SIZE"
        ]
    },
    "modules/mono/godotsharp_dirs.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOTSHARP_DIRS_H"
        ]
    },
    "modules/mono/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MONO_REGISTER_TYPES_H"
        ]
    },
    "modules/mono/godotsharp_defs.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOTSHARP_DEFS_H",
            "BINDINGS_NAMESPACE",
            "BINDINGS_NAMESPACE_COLLECTIONS",
            "API_SOLUTION_NAME",
            "CORE_API_ASSEMBLY_NAME",
            "EDITOR_API_ASSEMBLY_NAME",
            "TOOLS_ASM_NAME",
            "BINDINGS_CLASS_NATIVECALLS",
            "BINDINGS_CLASS_NATIVECALLS_EDITOR"
        ]
    },
    "modules/mono/managed_callable.h": {
        "classes": [
            "ManagedCallable"
        ],
        "structs": [],
        "defines": [
            "MANAGED_CALLABLE_H"
        ]
    },
    "modules/mono/class_db_api_json.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "CLASS_DB_API_JSON_H"
        ]
    },
    "modules/mono/signal_awaiter_utils.h": {
        "classes": [
            "BaseSignalCallable",
            "SignalAwaiterCallable",
            "EventSignalCallable"
        ],
        "structs": [],
        "defines": [
            "SIGNAL_AWAITER_UTILS_H"
        ]
    },
    "modules/mono/csharp_script.h": {
        "classes": [
            "CSharpScript",
            "CSharpInstance",
            "ManagedCallableMiddleman",
            "CSharpLanguage",
            "ResourceFormatLoaderCSharpScript",
            "ResourceFormatSaverCSharpScript"
        ],
        "structs": [
            "TypeInfo",
            "StateBackup",
            "EventSignalInfo",
            "CSharpMethodInfo",
            "CSharpScriptBinding"
        ],
        "defines": [
            "CSHARP_SCRIPT_H",
            "CAST_CSHARP_INSTANCE"
        ]
    },
    "modules/mono/mono_gc_handle.h": {
        "classes": [
            "GCHandleType"
        ],
        "structs": [
            "GCHandleIntPtr",
            "MonoGCHandleData"
        ],
        "defines": [
            "MONO_GC_HANDLE_H"
        ]
    },
    "modules/mono/mono_gd/gd_mono.h": {
        "classes": [
            "GDMono",
            "GodotSharp"
        ],
        "structs": [
            "PluginCallbacks"
        ],
        "defines": [
            "GD_MONO_H",
            "GD_CLR_STDCALL",
            "GD_CLR_STDCALL"
        ]
    },
    "modules/mono/mono_gd/gd_mono_cache.h": {
        "classes": [],
        "structs": [
            "godotsharp_property_info",
            "godotsharp_property_def_val_pair",
            "ManagedCallbacks"
        ],
        "defines": [
            "GD_MONO_CACHE_H",
            "GD_CLR_STDCALL",
            "GD_CLR_STDCALL"
        ]
    },
    "modules/mono/glue/runtime_interop.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "RUNTIME_INTEROP_H"
        ]
    },
    "modules/mono/utils/naming_utils.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MONO_NAMING_UTILS_H"
        ]
    },
    "modules/mono/utils/string_utils.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MONO_STRING_UTILS_H",
            "_PRINTF_FORMAT_ATTRIBUTE_1_0",
            "_PRINTF_FORMAT_ATTRIBUTE_1_2",
            "_PRINTF_FORMAT_ATTRIBUTE_1_0",
            "_PRINTF_FORMAT_ATTRIBUTE_1_2"
        ]
    },
    "modules/mono/utils/path_utils.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MONO_PATH_UTILS_H"
        ]
    },
    "modules/mono/utils/macros.h": {
        "classes": [
            "ScopeExitAux"
        ],
        "structs": [
            "ScopeExit"
        ],
        "defines": [
            "MONO_MACROS_H",
            "_GD_VARNAME_CONCAT_B_",
            "_GD_VARNAME_CONCAT_A_",
            "_GD_VARNAME_CONCAT_",
            "GD_UNIQUE_NAME",
            "GD_UNREACHABLE",
            "GD_UNREACHABLE",
            "GD_UNREACHABLE",
            "SCOPE_EXIT"
        ]
    },
    "modules/mono/utils/macos_utils.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MONO_MACOS_UTILS_H"
        ]
    },
    "modules/mono/editor/bindings_generator.h": {
        "classes": [
            "BindingsGenerator"
        ],
        "structs": [
            "ConstantInterface",
            "EnumInterface",
            "PropertyInterface",
            "TypeReference",
            "ArgumentInterface",
            "MethodInterface",
            "SignalInterface",
            "TypeInterface",
            "InternalCall",
            "NameCache"
        ],
        "defines": [
            "BINDINGS_GENERATOR_H"
        ]
    },
    "modules/mono/editor/editor_internal_calls.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "EDITOR_INTERNAL_CALLS_H"
        ]
    },
    "modules/mono/editor/code_completion.h": {
        "classes": [
            "CompletionKind"
        ],
        "structs": [],
        "defines": [
            "CODE_COMPLETION_H"
        ]
    },
    "modules/mono/editor/hostfxr_resolver.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "HOSTFXR_RESOLVER_H"
        ]
    },
    "modules/mono/editor/semver.h": {
        "classes": [],
        "structs": [
            "SemVer",
            "SemVerParser"
        ],
        "defines": [
            "SEMVER_H"
        ]
    },
    "modules/msdfgen/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MSDFGEN_REGISTER_TYPES_H"
        ]
    },
    "modules/text_server_adv/script_iterator.h": {
        "classes": [
            "ScriptIterator"
        ],
        "structs": [
            "ScriptRange"
        ],
        "defines": [
            "SCRIPT_ITERATOR_H"
        ]
    },
    "modules/text_server_adv/text_server_adv.h": {
        "classes": [
            "TextServerAdvanced"
        ],
        "structs": [
            "NumSystemData",
            "FeatureInfo",
            "FontTexturePosition",
            "Shelf",
            "ShelfPackTexture",
            "FontGlyph",
            "FontForSizeAdvanced",
            "FontAdvancedLinkedVariation",
            "FontAdvanced",
            "TrimData",
            "ShapedTextDataAdvanced",
            "Span",
            "EmbeddedObject",
            "SystemFontKey",
            "SystemFontCacheRec",
            "SystemFontCache",
            "SystemFontKeyHasher",
            "bmp_font_t",
            "GlyphCompare"
        ],
        "defines": [
            "TEXT_SERVER_ADV_H"
        ]
    },
    "modules/text_server_adv/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "TEXT_SERVER_ADV_REGISTER_TYPES_H"
        ]
    },
    "modules/text_server_adv/thorvg_svg_in_ot.h": {
        "classes": [],
        "structs": [
            "GL_State",
            "TVG_State"
        ],
        "defines": [
            "THORVG_SVG_IN_OT_H"
        ]
    },
    "modules/text_server_adv/thorvg_bounds_iterator.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "THORVG_BOUNDS_ITERATOR_H"
        ]
    },
    "modules/astcenc/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "ASTCENC_REGISTER_TYPES_H"
        ]
    },
    "modules/astcenc/image_compress_astcenc.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "IMAGE_COMPRESS_ASTCENC_H"
        ]
    },
    "modules/dds/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "DDS_REGISTER_TYPES_H"
        ]
    },
    "modules/dds/texture_loader_dds.h": {
        "classes": [
            "ResourceFormatDDS"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_LOADER_DDS_H"
        ]
    },
    "modules/cvtt/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "CVTT_REGISTER_TYPES_H"
        ]
    },
    "modules/cvtt/image_compress_cvtt.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "IMAGE_COMPRESS_CVTT_H"
        ]
    },
    "modules/bmp/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "BMP_REGISTER_TYPES_H"
        ]
    },
    "modules/bmp/image_loader_bmp.h": {
        "classes": [
            "ImageLoaderBMP"
        ],
        "structs": [
            "bmp_header_s",
            "bmp_file_header_s",
            "bmp_info_header_s",
            "bmp_bitfield_s"
        ],
        "defines": [
            "IMAGE_LOADER_BMP_H"
        ]
    },
    "modules/theora/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "THEORA_REGISTER_TYPES_H"
        ]
    },
    "modules/theora/video_stream_theora.h": {
        "classes": [
            "VideoStreamPlaybackTheora",
            "VideoStreamTheora",
            "ResourceFormatLoaderTheora"
        ],
        "structs": [],
        "defines": [
            "VIDEO_STREAM_THEORA_H",
            "THEORA_USE_THREAD_STREAMING"
        ]
    },
    "modules/webrtc/webrtc_data_channel.h": {
        "classes": [
            "WebRTCDataChannel"
        ],
        "structs": [],
        "defines": [
            "WEBRTC_DATA_CHANNEL_H"
        ]
    },
    "modules/webrtc/webrtc_data_channel_js.h": {
        "classes": [
            "WebRTCDataChannelJS"
        ],
        "structs": [],
        "defines": [
            "WEBRTC_DATA_CHANNEL_JS_H"
        ]
    },
    "modules/webrtc/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "WEBRTC_REGISTER_TYPES_H"
        ]
    },
    "modules/webrtc/webrtc_multiplayer_peer.h": {
        "classes": [
            "WebRTCMultiplayerPeer",
            "ConnectedPeer"
        ],
        "structs": [],
        "defines": [
            "WEBRTC_MULTIPLAYER_PEER_H"
        ]
    },
    "modules/webrtc/webrtc_peer_connection.h": {
        "classes": [
            "WebRTCPeerConnection"
        ],
        "structs": [],
        "defines": [
            "WEBRTC_PEER_CONNECTION_H"
        ]
    },
    "modules/webrtc/webrtc_peer_connection_js.h": {
        "classes": [
            "WebRTCPeerConnectionJS"
        ],
        "structs": [],
        "defines": [
            "WEBRTC_PEER_CONNECTION_JS_H"
        ]
    },
    "modules/webrtc/webrtc_peer_connection_extension.h": {
        "classes": [
            "WebRTCPeerConnectionExtension"
        ],
        "structs": [],
        "defines": [
            "WEBRTC_PEER_CONNECTION_EXTENSION_H"
        ]
    },
    "modules/webrtc/webrtc_data_channel_extension.h": {
        "classes": [
            "WebRTCDataChannelExtension"
        ],
        "structs": [],
        "defines": [
            "WEBRTC_DATA_CHANNEL_EXTENSION_H"
        ]
    },
    "modules/mobile_vr/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MOBILE_VR_REGISTER_TYPES_H"
        ]
    },
    "modules/mobile_vr/mobile_vr_interface.h": {
        "classes": [
            "MobileVRInterface"
        ],
        "structs": [],
        "defines": [
            "MOBILE_VR_INTERFACE_H"
        ]
    },
    "modules/xatlas_unwrap/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "XATLAS_UNWRAP_REGISTER_TYPES_H"
        ]
    },
    "modules/multiplayer/scene_replication_config.h": {
        "classes": [
            "SceneReplicationConfig"
        ],
        "structs": [
            "ReplicationProperty"
        ],
        "defines": [
            "SCENE_REPLICATION_CONFIG_H"
        ]
    },
    "modules/multiplayer/multiplayer_debugger.h": {
        "classes": [
            "MultiplayerDebugger",
            "BandwidthProfiler",
            "RPCProfiler",
            "ReplicationProfiler"
        ],
        "structs": [
            "RPCNodeInfo",
            "RPCFrame",
            "SyncInfo",
            "ReplicationFrame",
            "BandwidthFrame"
        ],
        "defines": [
            "MULTIPLAYER_DEBUGGER_H"
        ]
    },
    "modules/multiplayer/multiplayer_spawner.h": {
        "classes": [
            "MultiplayerSpawner"
        ],
        "structs": [
            "SpawnableScene",
            "SpawnInfo"
        ],
        "defines": [
            "MULTIPLAYER_SPAWNER_H"
        ]
    },
    "modules/multiplayer/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "MULTIPLAYER_REGISTER_TYPES_H"
        ]
    },
    "modules/multiplayer/scene_cache_interface.h": {
        "classes": [
            "SceneCacheInterface"
        ],
        "structs": [
            "NodeCache",
            "PeerInfo"
        ],
        "defines": [
            "SCENE_CACHE_INTERFACE_H"
        ]
    },
    "modules/multiplayer/scene_multiplayer.h": {
        "classes": [
            "OfflineMultiplayerPeer",
            "SceneMultiplayer"
        ],
        "structs": [
            "PendingPeer"
        ],
        "defines": [
            "SCENE_MULTIPLAYER_H"
        ]
    },
    "modules/multiplayer/multiplayer_synchronizer.h": {
        "classes": [
            "MultiplayerSynchronizer"
        ],
        "structs": [
            "Watcher"
        ],
        "defines": [
            "MULTIPLAYER_SYNCHRONIZER_H"
        ]
    },
    "modules/multiplayer/scene_replication_interface.h": {
        "classes": [
            "SceneReplicationInterface"
        ],
        "structs": [
            "TrackedNode",
            "PeerInfo"
        ],
        "defines": [
            "SCENE_REPLICATION_INTERFACE_H"
        ]
    },
    "modules/multiplayer/scene_rpc_interface.h": {
        "classes": [
            "SceneRPCInterface"
        ],
        "structs": [
            "RPCConfig",
            "RPCConfigCache",
            "SortRPCConfig"
        ],
        "defines": [
            "SCENE_RPC_INTERFACE_H"
        ]
    },
    "modules/multiplayer/editor/editor_network_profiler.h": {
        "classes": [
            "EditorNetworkProfiler"
        ],
        "structs": [
            "NodeInfo",
            "ThemeCache"
        ],
        "defines": [
            "EDITOR_NETWORK_PROFILER_H"
        ]
    },
    "modules/multiplayer/editor/replication_editor.h": {
        "classes": [
            "ReplicationEditor"
        ],
        "structs": [],
        "defines": [
            "REPLICATION_EDITOR_H"
        ]
    },
    "modules/multiplayer/editor/multiplayer_editor_plugin.h": {
        "classes": [
            "MultiplayerEditorDebugger",
            "MultiplayerEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "MULTIPLAYER_EDITOR_PLUGIN_H"
        ]
    },
    "modules/gridmap/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GRIDMAP_REGISTER_TYPES_H"
        ]
    },
    "modules/gridmap/grid_map.h": {
        "classes": [
            "GridMap"
        ],
        "structs": [
            "Octant",
            "NavigationCell",
            "MultimeshInstance",
            "Item",
            "BakeLight",
            "BakedMesh"
        ],
        "defines": [
            "GRID_MAP_H"
        ]
    },
    "modules/gridmap/editor/grid_map_editor_plugin.h": {
        "classes": [
            "GridMapEditor",
            "GridMapEditorPlugin"
        ],
        "structs": [
            "SetItem",
            "ClipboardItem",
            "Selection",
            "PasteIndicator",
            "AreaDisplay"
        ],
        "defines": [
            "GRID_MAP_EDITOR_PLUGIN_H"
        ]
    },
    "modules/vhacd/register_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "VHACD_REGISTER_TYPES_H"
        ]
    },
    "servers/camera_server.h": {
        "classes": [
            "CameraServer"
        ],
        "structs": [],
        "defines": [
            "CAMERA_SERVER_H"
        ]
    },
    "servers/navigation_server_2d_dummy.h": {
        "classes": [
            "NavigationServer2DDummy"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_SERVER_2D_DUMMY_H"
        ]
    },
    "servers/navigation_server_3d_dummy.h": {
        "classes": [
            "NavigationServer3DDummy"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_SERVER_3D_DUMMY_H"
        ]
    },
    "servers/server_wrap_mt_common.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "SERVER_WRAP_MT_COMMON_H",
            "FUNC0R",
            "FUNCRIDSPLIT",
            "FUNCRID",
            "FUNC0RC",
            "FUNC0",
            "FUNC0C",
            "FUNC0S",
            "FUNC0SC",
            "FUNC1R",
            "FUNC1RC",
            "FUNC1S",
            "FUNC1SC",
            "FUNC1",
            "FUNC1C",
            "FUNC2R",
            "FUNC2RC",
            "FUNC2S",
            "FUNC2SC",
            "FUNC2",
            "FUNC2C",
            "FUNC3R",
            "FUNC3RC",
            "FUNC3S",
            "FUNC3SC",
            "FUNC3",
            "FUNC3C",
            "FUNC4R",
            "FUNC4RC",
            "FUNC4S",
            "FUNC4SC",
            "FUNC4",
            "FUNC4C",
            "FUNC5R",
            "FUNC5RC",
            "FUNC5S",
            "FUNC5SC",
            "FUNC5",
            "FUNC5C",
            "FUNC6R",
            "FUNC6RC",
            "FUNC6S",
            "FUNC6SC",
            "FUNC6",
            "FUNC6C",
            "FUNC7R",
            "FUNC7RC",
            "FUNC7S",
            "FUNC7SC",
            "FUNC7",
            "FUNC7C",
            "FUNC8R",
            "FUNC8RC",
            "FUNC8S",
            "FUNC8SC",
            "FUNC8",
            "FUNC8C",
            "FUNC9",
            "FUNC10",
            "FUNC11",
            "FUNC12",
            "FUNC13",
            "FUNC14",
            "FUNC15"
        ]
    },
    "servers/physics_server_3d.h": {
        "classes": [
            "PhysicsDirectBodyState3D",
            "PhysicsDirectSpaceState3D",
            "PhysicsServer3DRenderingServerHandler",
            "PhysicsServer3D",
            "PhysicsRayQueryParameters3D",
            "PhysicsPointQueryParameters3D",
            "PhysicsShapeQueryParameters3D",
            "PhysicsTestMotionParameters3D",
            "PhysicsTestMotionResult3D",
            "PhysicsServer3DManager"
        ],
        "structs": [
            "RayParameters",
            "RayResult",
            "ShapeResult",
            "PointParameters",
            "ShapeParameters",
            "ShapeRestInfo",
            "MotionParameters",
            "MotionCollision",
            "MotionResult",
            "ClassInfo"
        ],
        "defines": [
            "PHYSICS_SERVER_3D_H"
        ]
    },
    "servers/register_server_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGISTER_SERVER_TYPES_H"
        ]
    },
    "servers/display_server.h": {
        "classes": [
            "DisplayServer"
        ],
        "structs": [
            "DisplayServerCreate",
            "TTSUtterance"
        ],
        "defines": [
            "DISPLAY_SERVER_H"
        ]
    },
    "servers/physics_server_2d.h": {
        "classes": [
            "PhysicsDirectBodyState2D",
            "PhysicsDirectSpaceState2D",
            "PhysicsServer2D",
            "PhysicsRayQueryParameters2D",
            "PhysicsPointQueryParameters2D",
            "PhysicsShapeQueryParameters2D",
            "PhysicsTestMotionParameters2D",
            "PhysicsTestMotionResult2D",
            "PhysicsServer2DManager"
        ],
        "structs": [
            "RayParameters",
            "RayResult",
            "ShapeResult",
            "PointParameters",
            "ShapeParameters",
            "ShapeRestInfo",
            "MotionParameters",
            "MotionResult",
            "ClassInfo"
        ],
        "defines": [
            "PHYSICS_SERVER_2D_H"
        ]
    },
    "servers/display_server_headless.h": {
        "classes": [
            "DisplayServerHeadless"
        ],
        "structs": [],
        "defines": [
            "DISPLAY_SERVER_HEADLESS_H"
        ]
    },
    "servers/rendering_server.h": {
        "classes": [
            "RenderingServer"
        ],
        "structs": [
            "TextureInfo",
            "ShaderNativeSourceCode",
            "Version",
            "Stage",
            "SurfaceData",
            "LOD",
            "FrameProfileArea"
        ],
        "defines": [
            "RENDERING_SERVER_H",
            "RS"
        ]
    },
    "servers/text_server.h": {
        "classes": [
            "TextServer",
            "TextServerManager"
        ],
        "structs": [
            "Glyph",
            "CaretInfo"
        ],
        "defines": [
            "TEXT_SERVER_H",
            "TS"
        ]
    },
    "servers/physics_server_2d_wrap_mt.h": {
        "classes": [
            "PhysicsServer2DWrapMT"
        ],
        "structs": [],
        "defines": [
            "PHYSICS_SERVER_2D_WRAP_MT_H",
            "SYNC_DEBUG",
            "SYNC_DEBUG",
            "ServerName",
            "ServerNameWrapMT",
            "server_name",
            "WRITE_ACTION"
        ]
    },
    "servers/navigation_server_3d.h": {
        "classes": [
            "NavigationServer3D",
            "NavigationServer3DManager"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_SERVER_3D_H"
        ]
    },
    "servers/navigation_server_2d.h": {
        "classes": [
            "NavigationServer2D",
            "NavigationServer2DManager"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_SERVER_2D_H"
        ]
    },
    "servers/physics_server_3d_wrap_mt.h": {
        "classes": [
            "PhysicsServer3DWrapMT"
        ],
        "structs": [],
        "defines": [
            "PHYSICS_SERVER_3D_WRAP_MT_H",
            "SYNC_DEBUG",
            "SYNC_DEBUG",
            "ServerName",
            "ServerNameWrapMT",
            "server_name",
            "WRITE_ACTION"
        ]
    },
    "servers/xr_server.h": {
        "classes": [
            "XRServer"
        ],
        "structs": [],
        "defines": [
            "XR_SERVER_H",
            "XR"
        ]
    },
    "servers/native_menu.h": {
        "classes": [
            "NativeMenu"
        ],
        "structs": [],
        "defines": [
            "NATIVE_MENU_H"
        ]
    },
    "servers/audio_server.h": {
        "classes": [
            "AudioDriver",
            "AudioDriverManager",
            "AudioServer",
            "AudioBusLayout"
        ],
        "structs": [
            "Bus",
            "Channel",
            "Effect",
            "AudioStreamPlaybackBusDetails",
            "AudioStreamPlaybackListNode",
            "CallbackItem",
            "Bus",
            "Effect"
        ],
        "defines": [
            "AUDIO_SERVER_H"
        ]
    },
    "servers/physics_3d/godot_step_3d.h": {
        "classes": [
            "GodotStep3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_STEP_3D_H"
        ]
    },
    "servers/physics_3d/godot_broad_phase_3d.h": {
        "classes": [
            "GodotBroadPhase3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_BROAD_PHASE_3D_H"
        ]
    },
    "servers/physics_3d/godot_collision_solver_3d.h": {
        "classes": [
            "GodotCollisionSolver3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_COLLISION_SOLVER_3D_H"
        ]
    },
    "servers/physics_3d/godot_joint_3d.h": {
        "classes": [
            "GodotJoint3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_JOINT_3D_H"
        ]
    },
    "servers/physics_3d/godot_area_3d.h": {
        "classes": [
            "GodotArea3D"
        ],
        "structs": [
            "BodyKey",
            "BodyState",
            "AreaCMP"
        ],
        "defines": [
            "GODOT_AREA_3D_H"
        ]
    },
    "servers/physics_3d/godot_collision_solver_3d_sat.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_COLLISION_SOLVER_3D_SAT_H"
        ]
    },
    "servers/physics_3d/godot_constraint_3d.h": {
        "classes": [
            "GodotConstraint3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_CONSTRAINT_3D_H"
        ]
    },
    "servers/physics_3d/godot_body_pair_3d.h": {
        "classes": [
            "GodotBodyContact3D",
            "GodotBodyPair3D",
            "GodotBodySoftBodyPair3D"
        ],
        "structs": [
            "Contact"
        ],
        "defines": [
            "GODOT_BODY_PAIR_3D_H"
        ]
    },
    "servers/physics_3d/godot_shape_3d.h": {
        "classes": [
            "GodotShapeOwner3D",
            "GodotShape3D",
            "GodotConcaveShape3D",
            "GodotWorldBoundaryShape3D",
            "GodotSeparationRayShape3D",
            "GodotSphereShape3D",
            "GodotBoxShape3D",
            "GodotCapsuleShape3D",
            "GodotCylinderShape3D"
        ],
        "structs": [
            "GodotConvexPolygonShape3D",
            "GodotConcavePolygonShape3D",
            "Face",
            "BVH",
            "_CullParams",
            "_SegmentCullParams",
            "GodotHeightMapShape3D",
            "Range",
            "GodotFaceShape3D",
            "GodotMotionShape3D"
        ],
        "defines": [
            "GODOT_SHAPE_3D_H"
        ]
    },
    "servers/physics_3d/godot_space_3d.h": {
        "classes": [
            "GodotPhysicsDirectSpaceState3D",
            "GodotSpace3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_SPACE_3D_H"
        ]
    },
    "servers/physics_3d/gjk_epa.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GJK_EPA_H"
        ]
    },
    "servers/physics_3d/godot_broad_phase_3d_bvh.h": {
        "classes": [
            "GodotBroadPhase3DBVH",
            "UserPairTestFunction",
            "UserCullTestFunction"
        ],
        "structs": [],
        "defines": [
            "GODOT_BROAD_PHASE_3D_BVH_H"
        ]
    },
    "servers/physics_3d/godot_body_3d.h": {
        "classes": [
            "GodotBody3D"
        ],
        "structs": [
            "Contact",
            "ForceIntegrationCallbackData"
        ],
        "defines": [
            "GODOT_BODY_3D_H"
        ]
    },
    "servers/physics_3d/godot_physics_server_3d.h": {
        "classes": [
            "GodotPhysicsServer3D"
        ],
        "structs": [
            "CollCbkData"
        ],
        "defines": [
            "GODOT_PHYSICS_SERVER_3D_H"
        ]
    },
    "servers/physics_3d/godot_body_direct_state_3d.h": {
        "classes": [
            "GodotPhysicsDirectBodyState3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_BODY_DIRECT_STATE_3D_H"
        ]
    },
    "servers/physics_3d/godot_area_pair_3d.h": {
        "classes": [
            "GodotAreaPair3D",
            "GodotArea2Pair3D",
            "GodotAreaSoftBodyPair3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_AREA_PAIR_3D_H"
        ]
    },
    "servers/physics_3d/godot_soft_body_3d.h": {
        "classes": [
            "GodotSoftBody3D",
            "GodotSoftBodyShape3D"
        ],
        "structs": [
            "Node",
            "Link",
            "Face"
        ],
        "defines": [
            "GODOT_SOFT_BODY_3D_H"
        ]
    },
    "servers/physics_3d/godot_collision_object_3d.h": {
        "classes": [
            "GodotCollisionObject3D"
        ],
        "structs": [
            "Shape"
        ],
        "defines": [
            "GODOT_COLLISION_OBJECT_3D_H",
            "MAX_OBJECT_DISTANCE",
            "MAX_OBJECT_DISTANCE_X2"
        ]
    },
    "servers/physics_3d/joints/godot_slider_joint_3d.h": {
        "classes": [
            "GodotSliderJoint3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_SLIDER_JOINT_3D_H",
            "SLIDER_CONSTRAINT_DEF_SOFTNESS",
            "SLIDER_CONSTRAINT_DEF_DAMPING",
            "SLIDER_CONSTRAINT_DEF_RESTITUTION"
        ]
    },
    "servers/physics_3d/joints/godot_hinge_joint_3d.h": {
        "classes": [
            "GodotHingeJoint3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_HINGE_JOINT_3D_H"
        ]
    },
    "servers/physics_3d/joints/godot_pin_joint_3d.h": {
        "classes": [
            "GodotPinJoint3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_PIN_JOINT_3D_H"
        ]
    },
    "servers/physics_3d/joints/godot_jacobian_entry_3d.h": {
        "classes": [
            "GodotJacobianEntry3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_JACOBIAN_ENTRY_3D_H"
        ]
    },
    "servers/physics_3d/joints/godot_generic_6dof_joint_3d.h": {
        "classes": [
            "GodotG6DOFRotationalLimitMotor3D",
            "GodotG6DOFTranslationalLimitMotor3D",
            "GodotGeneric6DOFJoint3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_GENERIC_6DOF_JOINT_3D_H"
        ]
    },
    "servers/physics_3d/joints/godot_cone_twist_joint_3d.h": {
        "classes": [
            "GodotConeTwistJoint3D"
        ],
        "structs": [],
        "defines": [
            "GODOT_CONE_TWIST_JOINT_3D_H"
        ]
    },
    "servers/camera/camera_feed.h": {
        "classes": [
            "CameraFeed"
        ],
        "structs": [],
        "defines": [
            "CAMERA_FEED_H"
        ]
    },
    "servers/navigation/navigation_path_query_result_2d.h": {
        "classes": [
            "NavigationPathQueryResult2D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_PATH_QUERY_RESULT_2D_H"
        ]
    },
    "servers/navigation/navigation_path_query_result_3d.h": {
        "classes": [
            "NavigationPathQueryResult3D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_PATH_QUERY_RESULT_3D_H"
        ]
    },
    "servers/navigation/navigation_path_query_parameters_2d.h": {
        "classes": [
            "NavigationPathQueryParameters2D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_PATH_QUERY_PARAMETERS_2D_H"
        ]
    },
    "servers/navigation/navigation_path_query_parameters_3d.h": {
        "classes": [
            "NavigationPathQueryParameters3D"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_PATH_QUERY_PARAMETERS_3D_H"
        ]
    },
    "servers/navigation/navigation_utilities.h": {
        "classes": [],
        "structs": [
            "PathQueryParameters",
            "PathQueryResult"
        ],
        "defines": [
            "NAVIGATION_UTILITIES_H"
        ]
    },
    "servers/xr/xr_interface.h": {
        "classes": [
            "XRInterface"
        ],
        "structs": [
            "VRSData"
        ],
        "defines": [
            "XR_INTERFACE_H"
        ]
    },
    "servers/xr/xr_hand_tracker.h": {
        "classes": [
            "XRHandTracker"
        ],
        "structs": [],
        "defines": [
            "XR_HAND_TRACKER_H"
        ]
    },
    "servers/xr/xr_body_tracker.h": {
        "classes": [
            "XRBodyTracker"
        ],
        "structs": [],
        "defines": [
            "XR_BODY_TRACKER_H"
        ]
    },
    "servers/xr/xr_interface_extension.h": {
        "classes": [
            "XRInterfaceExtension"
        ],
        "structs": [],
        "defines": [
            "XR_INTERFACE_EXTENSION_H"
        ]
    },
    "servers/xr/xr_positional_tracker.h": {
        "classes": [
            "XRPositionalTracker"
        ],
        "structs": [],
        "defines": [
            "XR_POSITIONAL_TRACKER_H"
        ]
    },
    "servers/xr/xr_pose.h": {
        "classes": [
            "XRPose"
        ],
        "structs": [],
        "defines": [
            "XR_POSE_H"
        ]
    },
    "servers/xr/xr_face_tracker.h": {
        "classes": [
            "XRFaceTracker"
        ],
        "structs": [],
        "defines": [
            "XR_FACE_TRACKER_H"
        ]
    },
    "servers/extensions/physics_server_2d_extension.h": {
        "classes": [
            "PhysicsDirectBodyState2DExtension",
            "PhysicsDirectSpaceState2DExtension",
            "PhysicsServer2DExtension"
        ],
        "structs": [],
        "defines": [
            "PHYSICS_SERVER_2D_EXTENSION_H"
        ]
    },
    "servers/extensions/physics_server_3d_extension.h": {
        "classes": [
            "PhysicsDirectBodyState3DExtension",
            "PhysicsDirectSpaceState3DExtension",
            "PhysicsServer3DExtension"
        ],
        "structs": [],
        "defines": [
            "PHYSICS_SERVER_3D_EXTENSION_H"
        ]
    },
    "servers/audio/audio_filter_sw.h": {
        "classes": [
            "AudioFilterSW",
            "Processor"
        ],
        "structs": [
            "Coeffs"
        ],
        "defines": [
            "AUDIO_FILTER_SW_H"
        ]
    },
    "servers/audio/audio_stream.h": {
        "classes": [
            "AudioStreamPlayback",
            "AudioStreamPlaybackResampled",
            "AudioStream",
            "AudioStreamMicrophone",
            "AudioStreamPlaybackMicrophone",
            "AudioStreamRandomizer",
            "AudioStreamPlaybackRandomizer"
        ],
        "structs": [
            "Parameter",
            "PoolEntry"
        ],
        "defines": [
            "AUDIO_STREAM_H"
        ]
    },
    "servers/audio/audio_rb_resampler.h": {
        "classes": [],
        "structs": [
            "AudioRBResampler"
        ],
        "defines": [
            "AUDIO_RB_RESAMPLER_H"
        ]
    },
    "servers/audio/audio_effect.h": {
        "classes": [
            "AudioEffectInstance",
            "AudioEffect"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_H"
        ]
    },
    "servers/audio/audio_driver_dummy.h": {
        "classes": [
            "AudioDriverDummy"
        ],
        "structs": [],
        "defines": [
            "AUDIO_DRIVER_DUMMY_H"
        ]
    },
    "servers/audio/effects/audio_effect_phaser.h": {
        "classes": [
            "AudioEffectPhaserInstance",
            "AllpassDelay",
            "AudioEffectPhaser"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_PHASER_H"
        ]
    },
    "servers/audio/effects/audio_effect_spectrum_analyzer.h": {
        "classes": [
            "AudioEffectSpectrumAnalyzerInstance",
            "AudioEffectSpectrumAnalyzer"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_SPECTRUM_ANALYZER_H"
        ]
    },
    "servers/audio/effects/audio_effect_pitch_shift.h": {
        "classes": [
            "SMBPitchShift",
            "AudioEffectPitchShiftInstance",
            "AudioEffectPitchShift"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_PITCH_SHIFT_H"
        ]
    },
    "servers/audio/effects/audio_effect_eq.h": {
        "classes": [
            "AudioEffectEQInstance",
            "AudioEffectEQ",
            "AudioEffectEQ6",
            "AudioEffectEQ10",
            "AudioEffectEQ21"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_EQ_H"
        ]
    },
    "servers/audio/effects/audio_effect_chorus.h": {
        "classes": [
            "AudioEffectChorusInstance",
            "AudioEffectChorus"
        ],
        "structs": [
            "Voice"
        ],
        "defines": [
            "AUDIO_EFFECT_CHORUS_H"
        ]
    },
    "servers/audio/effects/audio_effect_compressor.h": {
        "classes": [
            "AudioEffectCompressorInstance",
            "AudioEffectCompressor"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_COMPRESSOR_H"
        ]
    },
    "servers/audio/effects/audio_effect_distortion.h": {
        "classes": [
            "AudioEffectDistortionInstance",
            "AudioEffectDistortion"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_DISTORTION_H"
        ]
    },
    "servers/audio/effects/audio_effect_limiter.h": {
        "classes": [
            "AudioEffectLimiterInstance",
            "AudioEffectLimiter"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_LIMITER_H"
        ]
    },
    "servers/audio/effects/audio_effect_filter.h": {
        "classes": [
            "AudioEffectFilterInstance",
            "AudioEffectFilter",
            "AudioEffectLowPassFilter",
            "AudioEffectHighPassFilter",
            "AudioEffectBandPassFilter",
            "AudioEffectNotchFilter",
            "AudioEffectBandLimitFilter",
            "AudioEffectLowShelfFilter",
            "AudioEffectHighShelfFilter"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_FILTER_H"
        ]
    },
    "servers/audio/effects/audio_effect_reverb.h": {
        "classes": [
            "AudioEffectReverbInstance",
            "AudioEffectReverb"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_REVERB_H"
        ]
    },
    "servers/audio/effects/audio_effect_capture.h": {
        "classes": [
            "AudioEffectCaptureInstance",
            "AudioEffectCapture"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_CAPTURE_H"
        ]
    },
    "servers/audio/effects/audio_effect_stereo_enhance.h": {
        "classes": [
            "AudioEffectStereoEnhanceInstance",
            "AudioEffectStereoEnhance"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_STEREO_ENHANCE_H"
        ]
    },
    "servers/audio/effects/audio_effect_delay.h": {
        "classes": [
            "AudioEffectDelayInstance",
            "AudioEffectDelay"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_DELAY_H"
        ]
    },
    "servers/audio/effects/audio_stream_generator.h": {
        "classes": [
            "AudioStreamGenerator",
            "AudioStreamGeneratorPlayback"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_GENERATOR_H"
        ]
    },
    "servers/audio/effects/audio_effect_amplify.h": {
        "classes": [
            "AudioEffectAmplifyInstance",
            "AudioEffectAmplify"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_AMPLIFY_H"
        ]
    },
    "servers/audio/effects/eq_filter.h": {
        "classes": [
            "EQ",
            "BandProcess"
        ],
        "structs": [
            "History",
            "Band"
        ],
        "defines": [
            "EQ_FILTER_H"
        ]
    },
    "servers/audio/effects/audio_effect_panner.h": {
        "classes": [
            "AudioEffectPannerInstance",
            "AudioEffectPanner"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_PANNER_H"
        ]
    },
    "servers/audio/effects/audio_effect_record.h": {
        "classes": [
            "AudioEffectRecordInstance",
            "AudioEffectRecord"
        ],
        "structs": [],
        "defines": [
            "AUDIO_EFFECT_RECORD_H"
        ]
    },
    "servers/audio/effects/reverb_filter.h": {
        "classes": [
            "Reverb"
        ],
        "structs": [
            "Comb",
            "AllPass",
            "Parameters"
        ],
        "defines": [
            "REVERB_FILTER_H"
        ]
    },
    "servers/debugger/servers_debugger.h": {
        "classes": [
            "ServersDebugger"
        ],
        "structs": [
            "ResourceInfo",
            "ResourceUsage",
            "ScriptFunctionSignature",
            "ScriptFunctionInfo",
            "ServerFunctionInfo",
            "ServerInfo",
            "ServersProfilerFrame",
            "VisualProfilerFrame"
        ],
        "defines": [
            "SERVERS_DEBUGGER_H"
        ]
    },
    "servers/rendering/rendering_device_driver.h": {
        "classes": [
            "VectorView",
            "RenderingDeviceDriver"
        ],
        "structs": [
            "VersatileResourceTemplate",
            "ID",
            "TextureView",
            "TextureSubresource",
            "TextureSubresourceLayers",
            "TextureSubresourceRange",
            "TextureCopyableLayout",
            "MemoryBarrier",
            "BufferBarrier",
            "TextureBarrier",
            "BoundUniform",
            "BufferCopyRegion",
            "TextureCopyRegion",
            "BufferTextureCopyRegion",
            "Attachment",
            "AttachmentReference",
            "Subpass",
            "SubpassDependency",
            "AttachmentClear",
            "MultiviewCapabilities",
            "Capabilities"
        ],
        "defines": [
            "RENDERING_DEVICE_DRIVER_H",
            "ALLOCA",
            "ALLOCA_ARRAY",
            "ALLOCA_SINGLE",
            "ARRAYS_COMPATIBLE",
            "ARRAYS_COMPATIBLE_FIELDWISE",
            "ENUM_MEMBERS_EQUAL",
            "DEFINE_ID"
        ]
    },
    "servers/rendering/renderer_geometry_instance.h": {
        "classes": [
            "RenderGeometryInstance",
            "RenderGeometryInstanceBase"
        ],
        "structs": [
            "Data"
        ],
        "defines": [
            "RENDERER_GEOMETRY_INSTANCE_H"
        ]
    },
    "servers/rendering/rendering_light_culler.h": {
        "classes": [
            "RenderingLightCuller",
            "LightSource"
        ],
        "structs": [
            "LightCullPlanes",
            "Data"
        ],
        "defines": [
            "RENDERING_LIGHT_CULLER_H",
            "LIGHT_CULLER_DEBUG_LOGGING",
            "LIGHT_CULLER_DEBUG_DIRECTIONAL_LIGHT",
            "LIGHT_CULLER_DEBUG_REGULAR_LIGHT",
            "LIGHT_CULLER_DEBUG_FLASH",
            "LIGHT_CULLER_DEBUG_FLASH_FREQUENCY",
            "RENDERING_LIGHT_CULLER_CALCULATE_LUT",
            "RENDERING_LIGHT_CULLER_DEBUG_STRINGS"
        ]
    },
    "servers/rendering/rendering_context_driver.h": {
        "classes": [
            "RenderingContextDriver"
        ],
        "structs": [
            "Device"
        ],
        "defines": [
            "RENDERING_CONTEXT_DRIVER_H"
        ]
    },
    "servers/rendering/renderer_canvas_cull.h": {
        "classes": [
            "RendererCanvasCull"
        ],
        "structs": [
            "Item",
            "VisibilityNotifierData",
            "ItemIndexSort",
            "ItemPtrSort",
            "LightOccluderPolygon",
            "Canvas",
            "ChildItem"
        ],
        "defines": [
            "RENDERER_CANVAS_CULL_H"
        ]
    },
    "servers/rendering/rendering_device_graph.h": {
        "classes": [
            "RenderingDeviceGraph"
        ],
        "structs": [
            "ComputeListInstruction",
            "DrawListInstruction",
            "RecordedCommand",
            "RecordedBufferCopy",
            "RecordedBufferToTextureCopy",
            "ResourceTracker",
            "InstructionList",
            "ComputeInstructionList",
            "DrawInstructionList",
            "RecordedCommandSort",
            "RecordedCommandListNode",
            "RecordedSliceListNode",
            "RecordedBufferClearCommand",
            "RecordedBufferCopyCommand",
            "RecordedBufferGetDataCommand",
            "RecordedBufferUpdateCommand",
            "RecordedComputeListCommand",
            "RecordedDrawListCommand",
            "RecordedTextureClearCommand",
            "RecordedTextureCopyCommand",
            "RecordedTextureGetDataCommand",
            "RecordedTextureResolveCommand",
            "RecordedTextureUpdateCommand",
            "RecordedCaptureTimestampCommand",
            "DrawListBindIndexBufferInstruction",
            "DrawListBindPipelineInstruction",
            "DrawListBindUniformSetInstruction",
            "DrawListBindVertexBuffersInstruction",
            "DrawListClearAttachmentsInstruction",
            "DrawListDrawInstruction",
            "DrawListDrawIndexedInstruction",
            "DrawListEndRenderPassInstruction",
            "DrawListExecuteCommandsInstruction",
            "DrawListSetPushConstantInstruction",
            "DrawListNextSubpassInstruction",
            "DrawListSetBlendConstantsInstruction",
            "DrawListSetLineWidthInstruction",
            "DrawListSetScissorInstruction",
            "DrawListSetViewportInstruction",
            "DrawListUniformSetPrepareForUseInstruction",
            "ComputeListBindPipelineInstruction",
            "ComputeListBindUniformSetInstruction",
            "ComputeListDispatchInstruction",
            "ComputeListDispatchIndirectInstruction",
            "ComputeListSetPushConstantInstruction",
            "ComputeListUniformSetPrepareForUseInstruction",
            "BarrierGroup",
            "SecondaryCommandBuffer",
            "Frame"
        ],
        "defines": [
            "RENDERING_DEVICE_GRAPH_H",
            "USE_BUFFER_BARRIERS"
        ]
    },
    "servers/rendering/rendering_device_commons.h": {
        "classes": [
            "RenderingDeviceCommons"
        ],
        "structs": [
            "TextureFormat",
            "SamplerState",
            "VertexAttribute",
            "ShaderStageSPIRVData",
            "PipelineSpecializationConstant",
            "PipelineRasterizationState",
            "PipelineMultisampleState",
            "PipelineDepthStencilState",
            "StencilOperationState",
            "PipelineColorBlendState",
            "Attachment",
            "ShaderUniform",
            "ShaderSpecializationConstant",
            "ShaderDescription",
            "ShaderReflection"
        ],
        "defines": [
            "RENDERING_DEVICE_COMMONS_H",
            "STEPIFY"
        ]
    },
    "servers/rendering/rendering_server_default.h": {
        "classes": [
            "RenderingServerDefault"
        ],
        "structs": [],
        "defines": [
            "RENDERING_SERVER_DEFAULT_H",
            "DEBUG_CHANGES",
            "DISPLAY_CHANGED",
            "WRITE_ACTION",
            "SYNC_DEBUG",
            "SYNC_DEBUG",
            "ServerName",
            "server_name",
            "FUNCRIDTEX0",
            "FUNCRIDTEX1",
            "FUNCRIDTEX2",
            "FUNCRIDTEX6",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name",
            "ServerName",
            "server_name"
        ]
    },
    "servers/rendering/renderer_scene_occlusion_cull.h": {
        "classes": [
            "RendererSceneOcclusionCull",
            "HZBuffer"
        ],
        "structs": [],
        "defines": [
            "RENDERER_SCENE_OCCLUSION_CULL_H"
        ]
    },
    "servers/rendering/renderer_compositor.h": {
        "classes": [
            "RendererCompositor"
        ],
        "structs": [
            "BlitToScreen"
        ],
        "defines": [
            "RENDERER_COMPOSITOR_H"
        ]
    },
    "servers/rendering/shader_types.h": {
        "classes": [
            "ShaderTypes"
        ],
        "structs": [
            "Type"
        ],
        "defines": [
            "SHADER_TYPES_H"
        ]
    },
    "servers/rendering/rendering_method.h": {
        "classes": [
            "RenderingMethod"
        ],
        "structs": [
            "RenderInfo"
        ],
        "defines": [
            "RENDERING_METHOD_H"
        ]
    },
    "servers/rendering/shader_warnings.h": {
        "classes": [
            "ShaderWarning"
        ],
        "structs": [],
        "defines": [
            "SHADER_WARNINGS_H"
        ]
    },
    "servers/rendering/renderer_viewport.h": {
        "classes": [
            "RendererViewport"
        ],
        "structs": [
            "CanvasBase",
            "Viewport",
            "CanvasKey",
            "CanvasData"
        ],
        "defines": [
            "RENDERER_VIEWPORT_H"
        ]
    },
    "servers/rendering/shader_compiler.h": {
        "classes": [
            "ShaderCompiler"
        ],
        "structs": [
            "IdentifierActions",
            "GeneratedCode",
            "Texture",
            "DefaultIdentifierActions"
        ],
        "defines": [
            "SHADER_COMPILER_H"
        ]
    },
    "servers/rendering/renderer_scene_cull.h": {
        "classes": [
            "RendererSceneCull",
            "VisibilityArray"
        ],
        "structs": [
            "Camera",
            "PlaneSign",
            "Frustum",
            "InstanceBounds",
            "InstanceData",
            "InstanceVisibilityData",
            "Scenario",
            "InstancePair",
            "InstanceBaseData",
            "Instance",
            "InstanceShaderParameter",
            "InstanceGeometryData",
            "InstanceReflectionProbeData",
            "InstanceDecalData",
            "InstanceParticlesCollisionData",
            "InstanceFogVolumeData",
            "InstanceVisibilityNotifierData",
            "InstanceLightData",
            "InstanceVoxelGIData",
            "LightCache",
            "InstanceLightmapData",
            "PairInstances",
            "InstanceCullResult",
            "DirectionalShadow",
            "Cull",
            "Shadow",
            "Cascade",
            "SDFGI",
            "VisibilityCullData",
            "CullData"
        ],
        "defines": [
            "RENDERER_SCENE_CULL_H",
            "PASSBASE"
        ]
    },
    "servers/rendering/renderer_canvas_render.h": {
        "classes": [
            "RendererCanvasRender"
        ],
        "structs": [
            "Light",
            "Polygon",
            "Item",
            "CommandBlock",
            "Command",
            "CommandRect",
            "CommandNinePatch",
            "CommandPolygon",
            "CommandPrimitive",
            "CommandMesh",
            "CommandMultiMesh",
            "CommandParticles",
            "CommandTransform",
            "CommandClipIgnore",
            "CommandAnimationSlice",
            "ViewportRender",
            "CanvasGroup",
            "CopyBackBuffer",
            "LightOccluderInstance"
        ],
        "defines": [
            "RENDERER_CANVAS_RENDER_H"
        ]
    },
    "servers/rendering/rendering_server_globals.h": {
        "classes": [
            "RenderingServerGlobals"
        ],
        "structs": [],
        "defines": [
            "RENDERING_SERVER_GLOBALS_H",
            "RSG"
        ]
    },
    "servers/rendering/shader_language.h": {
        "classes": [
            "ShaderLanguage"
        ],
        "structs": [
            "TkPos",
            "VaryingFunctionNames",
            "Node",
            "OperatorNode",
            "VariableNode",
            "VariableDeclarationNode",
            "Declaration",
            "ArrayNode",
            "ArrayConstructNode",
            "ConstantNode",
            "BlockNode",
            "Variable",
            "ControlFlowNode",
            "MemberNode",
            "StructNode",
            "FunctionNode",
            "Argument",
            "ShaderNode",
            "Constant",
            "Function",
            "Struct",
            "Varying",
            "Uniform",
            "UniformOrderComparator",
            "Expression",
            "VarInfo",
            "Token",
            "BuiltInInfo",
            "StageFunctionInfo",
            "Argument",
            "ModeInfo",
            "FunctionInfo",
            "FilePosition",
            "KeyWord",
            "Usage",
            "BuiltinFuncDef",
            "BuiltinFuncOutArgs",
            "BuiltinFuncConstArgs",
            "ShaderCompileInfo"
        ],
        "defines": [
            "SHADER_LANGUAGE_H"
        ]
    },
    "servers/rendering/renderer_scene_render.h": {
        "classes": [
            "RendererSceneRender"
        ],
        "structs": [
            "RenderShadowData",
            "RenderSDFGIData",
            "RenderSDFGIUpdateData",
            "CameraData"
        ],
        "defines": [
            "RENDERER_SCENE_RENDER_H"
        ]
    },
    "servers/rendering/rendering_device_binds.h": {
        "classes": [
            "RDTextureFormat",
            "RDTextureView",
            "RDAttachmentFormat",
            "RDFramebufferPass",
            "RDSamplerState",
            "RDVertexAttribute",
            "RDShaderSource",
            "RDShaderSPIRV",
            "RDShaderFile",
            "RDUniform",
            "RDPipelineSpecializationConstant",
            "RDPipelineRasterizationState",
            "RDPipelineMultisampleState",
            "RDPipelineDepthStencilState",
            "RDPipelineColorBlendStateAttachment",
            "RDPipelineColorBlendState"
        ],
        "structs": [],
        "defines": [
            "RENDERING_DEVICE_BINDS_H",
            "RD_SETGET",
            "RD_BIND",
            "RD_SETGET_SUB",
            "RD_BIND_SUB"
        ]
    },
    "servers/rendering/shader_preprocessor.h": {
        "classes": [
            "ShaderPreprocessor",
            "Tokenizer",
            "CommentRemover"
        ],
        "structs": [
            "FilePosition",
            "Region",
            "Token",
            "Define",
            "Branch",
            "State"
        ],
        "defines": [
            "SHADER_PREPROCESSOR_H"
        ]
    },
    "servers/rendering/rendering_device.h": {
        "classes": [
            "RenderingDevice"
        ],
        "structs": [
            "StagingBufferBlock",
            "Buffer",
            "Texture",
            "TextureView",
            "AttachmentFormat",
            "FramebufferPass",
            "FramebufferFormatKey",
            "FramebufferFormat",
            "Framebuffer",
            "VersionKey",
            "Version",
            "VertexDescriptionKey",
            "VertexDescriptionHash",
            "VertexDescriptionCache",
            "VertexArray",
            "IndexBuffer",
            "IndexArray",
            "UniformSetFormat",
            "Shader",
            "Uniform",
            "UniformSet",
            "AttachableTexture",
            "RenderPipeline",
            "Validation",
            "ComputePipeline",
            "DrawList",
            "SetState",
            "State",
            "Validation",
            "Validation",
            "ComputeList",
            "SetState",
            "State",
            "Validation",
            "Frame",
            "Timestamp"
        ],
        "defines": [
            "RENDERING_DEVICE_H"
        ]
    },
    "servers/rendering/renderer_rd/renderer_compositor_rd.h": {
        "classes": [
            "RendererCompositorRD"
        ],
        "structs": [
            "BlitPushConstant",
            "Blit"
        ],
        "defines": [
            "RENDERER_COMPOSITOR_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/renderer_scene_render_rd.h": {
        "classes": [
            "RendererSceneRenderRD"
        ],
        "structs": [],
        "defines": [
            "RENDERER_SCENE_RENDER_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/framebuffer_cache_rd.h": {
        "classes": [
            "FramebufferCacheRD"
        ],
        "structs": [
            "Cache"
        ],
        "defines": [
            "FRAMEBUFFER_CACHE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/cluster_builder_rd.h": {
        "classes": [
            "ClusterBuilderSharedDataRD",
            "ClusterBuilderRD"
        ],
        "structs": [
            "ClusterRender",
            "PushConstant",
            "ClusterStore",
            "PushConstant",
            "ClusterDebug",
            "PushConstant",
            "RenderElementData",
            "StateUniform"
        ],
        "defines": [
            "CLUSTER_BUILDER_RD_H",
            "CONE_MINMAX"
        ]
    },
    "servers/rendering/renderer_rd/uniform_set_cache_rd.h": {
        "classes": [
            "UniformSetCacheRD"
        ],
        "structs": [
            "Cache"
        ],
        "defines": [
            "UNIFORM_SET_CACHE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/shader_rd.h": {
        "classes": [
            "ShaderRD"
        ],
        "structs": [
            "VariantDefine",
            "Version",
            "CompileData",
            "StageTemplate",
            "Chunk"
        ],
        "defines": [
            "SHADER_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/pipeline_cache_rd.h": {
        "classes": [
            "PipelineCacheRD"
        ],
        "structs": [
            "Version"
        ],
        "defines": [
            "PIPELINE_CACHE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/renderer_canvas_render_rd.h": {
        "classes": [
            "RendererCanvasRenderRD"
        ],
        "structs": [
            "PipelineVariants",
            "CanvasShaderData",
            "CanvasMaterialData",
            "PolygonBuffers",
            "CanvasLight",
            "ShadowRenderPushConstant",
            "OccluderPolygon",
            "LightUniform",
            "State",
            "Buffer",
            "PushConstant"
        ],
        "defines": [
            "RENDERER_CANVAS_RENDER_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/forward_clustered/scene_shader_forward_clustered.h": {
        "classes": [
            "SceneShaderForwardClustered"
        ],
        "structs": [
            "ShaderData",
            "MaterialData"
        ],
        "defines": [
            "SCENE_SHADER_FORWARD_CLUSTERED_H"
        ]
    },
    "servers/rendering/renderer_rd/forward_clustered/render_forward_clustered.h": {
        "classes": [
            "RenderForwardClustered",
            "RenderBufferDataForwardClustered",
            "GeometryInstanceForwardClustered"
        ],
        "structs": [
            "SSEffectsData",
            "BestFitNormal",
            "RenderListParameters",
            "LightmapData",
            "LightmapCaptureData",
            "SceneState",
            "UBO",
            "PushConstant",
            "InstanceData",
            "ShadowPass",
            "RenderElementInfo",
            "GeometryInstanceLightmapSH",
            "GeometryInstanceSurfaceDataCache",
            "RenderList",
            "SortByKey",
            "SortByDepth",
            "SortByReverseDepthAndPriority"
        ],
        "defines": [
            "RENDER_FORWARD_CLUSTERED_H",
            "RB_SCOPE_FORWARD_CLUSTERED",
            "RB_TEX_SPECULAR",
            "RB_TEX_SPECULAR_MSAA",
            "RB_TEX_NORMAL_ROUGHNESS",
            "RB_TEX_NORMAL_ROUGHNESS_MSAA",
            "RB_TEX_VOXEL_GI",
            "RB_TEX_VOXEL_GI_MSAA"
        ]
    },
    "servers/rendering/renderer_rd/forward_mobile/render_forward_mobile.h": {
        "classes": [
            "RenderForwardMobile",
            "RenderBufferDataForwardMobile",
            "GeometryInstanceForwardMobile",
            "ForwardIDStorageMobile"
        ],
        "structs": [
            "RenderListParameters",
            "LightmapData",
            "LightmapCaptureData",
            "SceneState",
            "PushConstant",
            "InstanceData",
            "ShadowPass",
            "RenderList",
            "SortByKey",
            "SortByDepth",
            "SortByReverseDepthAndPriority",
            "RenderElementInfo",
            "GeometryInstanceLightmapSH",
            "GeometryInstanceSurfaceDataCache",
            "ForwardIDAllocator"
        ],
        "defines": [
            "RENDER_FORWARD_MOBILE_H",
            "RB_SCOPE_MOBILE"
        ]
    },
    "servers/rendering/renderer_rd/forward_mobile/scene_shader_forward_mobile.h": {
        "classes": [
            "SceneShaderForwardMobile"
        ],
        "structs": [
            "ShaderData",
            "MaterialData"
        ],
        "defines": [
            "SCENE_SHADER_FORWARD_MOBILE_H"
        ]
    },
    "servers/rendering/renderer_rd/shaders/skeleton.glsl.gen.h": {
        "classes": [
            "SkeletonShaderRD"
        ],
        "structs": [],
        "defines": [
            "SKELETON_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/roughness_limiter.glsl.gen.h": {
        "classes": [
            "RoughnessLimiterShaderRD"
        ],
        "structs": [],
        "defines": [
            "ROUGHNESS_LIMITER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/cluster_render.glsl.gen.h": {
        "classes": [
            "ClusterRenderShaderRD"
        ],
        "structs": [],
        "defines": [
            "CLUSTER_RENDER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/blit.glsl.gen.h": {
        "classes": [
            "BlitShaderRD"
        ],
        "structs": [],
        "defines": [
            "BLIT_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/luminance_reduce_raster.glsl.gen.h": {
        "classes": [
            "LuminanceReduceRasterShaderRD"
        ],
        "structs": [],
        "defines": [
            "LUMINANCE_REDUCE_RASTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/luminance_reduce.glsl.gen.h": {
        "classes": [
            "LuminanceReduceShaderRD"
        ],
        "structs": [],
        "defines": [
            "LUMINANCE_REDUCE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/cluster_store.glsl.gen.h": {
        "classes": [
            "ClusterStoreShaderRD"
        ],
        "structs": [],
        "defines": [
            "CLUSTER_STORE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/canvas.glsl.gen.h": {
        "classes": [
            "CanvasShaderRD"
        ],
        "structs": [],
        "defines": [
            "CANVAS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/canvas_sdf.glsl.gen.h": {
        "classes": [
            "CanvasSdfShaderRD"
        ],
        "structs": [],
        "defines": [
            "CANVAS_SDF_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/sort.glsl.gen.h": {
        "classes": [
            "SortShaderRD"
        ],
        "structs": [],
        "defines": [
            "SORT_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/giprobe_write.glsl.gen.h": {
        "classes": [
            "GiprobeWriteShaderRD"
        ],
        "structs": [],
        "defines": [
            "GIPROBE_WRITE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/canvas_occlusion.glsl.gen.h": {
        "classes": [
            "CanvasOcclusionShaderRD"
        ],
        "structs": [],
        "defines": [
            "CANVAS_OCCLUSION_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/cluster_debug.glsl.gen.h": {
        "classes": [
            "ClusterDebugShaderRD"
        ],
        "structs": [],
        "defines": [
            "CLUSTER_DEBUG_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/particles.glsl.gen.h": {
        "classes": [
            "ParticlesShaderRD"
        ],
        "structs": [],
        "defines": [
            "PARTICLES_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/particles_copy.glsl.gen.h": {
        "classes": [
            "ParticlesCopyShaderRD"
        ],
        "structs": [],
        "defines": [
            "PARTICLES_COPY_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/forward_clustered/scene_forward_clustered.glsl.gen.h": {
        "classes": [
            "SceneForwardClusteredShaderRD"
        ],
        "structs": [],
        "defines": [
            "SCENE_FORWARD_CLUSTERED_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/forward_clustered/best_fit_normal.glsl.gen.h": {
        "classes": [
            "BestFitNormalShaderRD"
        ],
        "structs": [],
        "defines": [
            "BEST_FIT_NORMAL_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/forward_mobile/scene_forward_mobile.glsl.gen.h": {
        "classes": [
            "SceneForwardMobileShaderRD"
        ],
        "structs": [],
        "defines": [
            "SCENE_FORWARD_MOBILE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/sdfgi_preprocess.glsl.gen.h": {
        "classes": [
            "SdfgiPreprocessShaderRD"
        ],
        "structs": [],
        "defines": [
            "SDFGI_PREPROCESS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/sky.glsl.gen.h": {
        "classes": [
            "SkyShaderRD"
        ],
        "structs": [],
        "defines": [
            "SKY_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/sdfgi_direct_light.glsl.gen.h": {
        "classes": [
            "SdfgiDirectLightShaderRD"
        ],
        "structs": [],
        "defines": [
            "SDFGI_DIRECT_LIGHT_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/volumetric_fog_process.glsl.gen.h": {
        "classes": [
            "VolumetricFogProcessShaderRD"
        ],
        "structs": [],
        "defines": [
            "VOLUMETRIC_FOG_PROCESS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/gi.glsl.gen.h": {
        "classes": [
            "GiShaderRD"
        ],
        "structs": [],
        "defines": [
            "GI_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/voxel_gi.glsl.gen.h": {
        "classes": [
            "VoxelGiShaderRD"
        ],
        "structs": [],
        "defines": [
            "VOXEL_GI_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/voxel_gi_debug.glsl.gen.h": {
        "classes": [
            "VoxelGiDebugShaderRD"
        ],
        "structs": [],
        "defines": [
            "VOXEL_GI_DEBUG_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/voxel_gi_sdf.glsl.gen.h": {
        "classes": [
            "VoxelGiSdfShaderRD"
        ],
        "structs": [],
        "defines": [
            "VOXEL_GI_SDF_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/sdfgi_debug.glsl.gen.h": {
        "classes": [
            "SdfgiDebugShaderRD"
        ],
        "structs": [],
        "defines": [
            "SDFGI_DEBUG_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/sdfgi_integrate.glsl.gen.h": {
        "classes": [
            "SdfgiIntegrateShaderRD"
        ],
        "structs": [],
        "defines": [
            "SDFGI_INTEGRATE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/volumetric_fog.glsl.gen.h": {
        "classes": [
            "VolumetricFogShaderRD"
        ],
        "structs": [],
        "defines": [
            "VOLUMETRIC_FOG_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/environment/sdfgi_debug_probes.glsl.gen.h": {
        "classes": [
            "SdfgiDebugProbesShaderRD"
        ],
        "structs": [],
        "defines": [
            "SDFGI_DEBUG_PROBES_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ssao.glsl.gen.h": {
        "classes": [
            "SsaoShaderRD"
        ],
        "structs": [],
        "defines": [
            "SSAO_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/cubemap_filter.glsl.gen.h": {
        "classes": [
            "CubemapFilterShaderRD"
        ],
        "structs": [],
        "defines": [
            "CUBEMAP_FILTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/bokeh_dof_raster.glsl.gen.h": {
        "classes": [
            "BokehDofRasterShaderRD"
        ],
        "structs": [],
        "defines": [
            "BOKEH_DOF_RASTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ssil_blur.glsl.gen.h": {
        "classes": [
            "SsilBlurShaderRD"
        ],
        "structs": [],
        "defines": [
            "SSIL_BLUR_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/shadow_frustum.glsl.gen.h": {
        "classes": [
            "ShadowFrustumShaderRD"
        ],
        "structs": [],
        "defines": [
            "SHADOW_FRUSTUM_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/cubemap_filter_raster.glsl.gen.h": {
        "classes": [
            "CubemapFilterRasterShaderRD"
        ],
        "structs": [],
        "defines": [
            "CUBEMAP_FILTER_RASTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl.gen.h": {
        "classes": [
            "ScreenSpaceReflectionShaderRD"
        ],
        "structs": [],
        "defines": [
            "SCREEN_SPACE_REFLECTION_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/taa_resolve.glsl.gen.h": {
        "classes": [
            "TaaResolveShaderRD"
        ],
        "structs": [],
        "defines": [
            "TAA_RESOLVE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ssil_interleave.glsl.gen.h": {
        "classes": [
            "SsilInterleaveShaderRD"
        ],
        "structs": [],
        "defines": [
            "SSIL_INTERLEAVE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ss_effects_downsample.glsl.gen.h": {
        "classes": [
            "SsEffectsDownsampleShaderRD"
        ],
        "structs": [],
        "defines": [
            "SS_EFFECTS_DOWNSAMPLE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ssil.glsl.gen.h": {
        "classes": [
            "SsilShaderRD"
        ],
        "structs": [],
        "defines": [
            "SSIL_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/blur_raster.glsl.gen.h": {
        "classes": [
            "BlurRasterShaderRD"
        ],
        "structs": [],
        "defines": [
            "BLUR_RASTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr_upscale.glsl.gen.h": {
        "classes": [
            "FsrUpscaleShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR_UPSCALE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/tonemap.glsl.gen.h": {
        "classes": [
            "TonemapShaderRD"
        ],
        "structs": [],
        "defines": [
            "TONEMAP_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/screen_space_reflection_scale.glsl.gen.h": {
        "classes": [
            "ScreenSpaceReflectionScaleShaderRD"
        ],
        "structs": [],
        "defines": [
            "SCREEN_SPACE_REFLECTION_SCALE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/roughness_limiter.glsl.gen.h": {
        "classes": [
            "RoughnessLimiterShaderRD"
        ],
        "structs": [],
        "defines": [
            "ROUGHNESS_LIMITER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ssao_blur.glsl.gen.h": {
        "classes": [
            "SsaoBlurShaderRD"
        ],
        "structs": [],
        "defines": [
            "SSAO_BLUR_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ssao_importance_map.glsl.gen.h": {
        "classes": [
            "SsaoImportanceMapShaderRD"
        ],
        "structs": [],
        "defines": [
            "SSAO_IMPORTANCE_MAP_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/motion_vectors.glsl.gen.h": {
        "classes": [
            "MotionVectorsShaderRD"
        ],
        "structs": [],
        "defines": [
            "MOTION_VECTORS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/bokeh_dof.glsl.gen.h": {
        "classes": [
            "BokehDofShaderRD"
        ],
        "structs": [],
        "defines": [
            "BOKEH_DOF_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/luminance_reduce_raster.glsl.gen.h": {
        "classes": [
            "LuminanceReduceRasterShaderRD"
        ],
        "structs": [],
        "defines": [
            "LUMINANCE_REDUCE_RASTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/luminance_reduce.glsl.gen.h": {
        "classes": [
            "LuminanceReduceShaderRD"
        ],
        "structs": [],
        "defines": [
            "LUMINANCE_REDUCE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/copy_to_fb.glsl.gen.h": {
        "classes": [
            "CopyToFbShaderRD"
        ],
        "structs": [],
        "defines": [
            "COPY_TO_FB_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ssil_importance_map.glsl.gen.h": {
        "classes": [
            "SsilImportanceMapShaderRD"
        ],
        "structs": [],
        "defines": [
            "SSIL_IMPORTANCE_MAP_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/cubemap_downsampler.glsl.gen.h": {
        "classes": [
            "CubemapDownsamplerShaderRD"
        ],
        "structs": [],
        "defines": [
            "CUBEMAP_DOWNSAMPLER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/cubemap_roughness.glsl.gen.h": {
        "classes": [
            "CubemapRoughnessShaderRD"
        ],
        "structs": [],
        "defines": [
            "CUBEMAP_ROUGHNESS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/vrs.glsl.gen.h": {
        "classes": [
            "VrsShaderRD"
        ],
        "structs": [],
        "defines": [
            "VRS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/sort.glsl.gen.h": {
        "classes": [
            "SortShaderRD"
        ],
        "structs": [],
        "defines": [
            "SORT_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/specular_merge.glsl.gen.h": {
        "classes": [
            "SpecularMergeShaderRD"
        ],
        "structs": [],
        "defines": [
            "SPECULAR_MERGE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/ssao_interleave.glsl.gen.h": {
        "classes": [
            "SsaoInterleaveShaderRD"
        ],
        "structs": [],
        "defines": [
            "SSAO_INTERLEAVE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/screen_space_reflection_filter.glsl.gen.h": {
        "classes": [
            "ScreenSpaceReflectionFilterShaderRD"
        ],
        "structs": [],
        "defines": [
            "SCREEN_SPACE_REFLECTION_FILTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/cubemap_downsampler_raster.glsl.gen.h": {
        "classes": [
            "CubemapDownsamplerRasterShaderRD"
        ],
        "structs": [],
        "defines": [
            "CUBEMAP_DOWNSAMPLER_RASTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/resolve.glsl.gen.h": {
        "classes": [
            "ResolveShaderRD"
        ],
        "structs": [],
        "defines": [
            "RESOLVE_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/copy.glsl.gen.h": {
        "classes": [
            "CopyShaderRD"
        ],
        "structs": [],
        "defines": [
            "COPY_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/cubemap_roughness_raster.glsl.gen.h": {
        "classes": [
            "CubemapRoughnessRasterShaderRD"
        ],
        "structs": [],
        "defines": [
            "CUBEMAP_ROUGHNESS_RASTER_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/subsurface_scattering.glsl.gen.h": {
        "classes": [
            "SubsurfaceScatteringShaderRD"
        ],
        "structs": [],
        "defines": [
            "SUBSURFACE_SCATTERING_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/cube_to_dp.glsl.gen.h": {
        "classes": [
            "CubeToDpShaderRD"
        ],
        "structs": [],
        "defines": [
            "CUBE_TO_DP_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_autogen_reactive_pass.glsl.gen.h": {
        "classes": [
            "Fsr2AutogenReactivePassShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR2_AUTOGEN_REACTIVE_PASS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_accumulate_pass.glsl.gen.h": {
        "classes": [
            "Fsr2AccumulatePassShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR2_ACCUMULATE_PASS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_compute_luminance_pyramid_pass.glsl.gen.h": {
        "classes": [
            "Fsr2ComputeLuminancePyramidPassShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR2_COMPUTE_LUMINANCE_PYRAMID_PASS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_reconstruct_previous_depth_pass.glsl.gen.h": {
        "classes": [
            "Fsr2ReconstructPreviousDepthPassShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR2_RECONSTRUCT_PREVIOUS_DEPTH_PASS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_rcas_pass.glsl.gen.h": {
        "classes": [
            "Fsr2RcasPassShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR2_RCAS_PASS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_lock_pass.glsl.gen.h": {
        "classes": [
            "Fsr2LockPassShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR2_LOCK_PASS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_tcr_autogen_pass.glsl.gen.h": {
        "classes": [
            "Fsr2TcrAutogenPassShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR2_TCR_AUTOGEN_PASS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/shaders/effects/fsr2/fsr2_depth_clip_pass.glsl.gen.h": {
        "classes": [
            "Fsr2DepthClipPassShaderRD"
        ],
        "structs": [],
        "defines": [
            "FSR2_DEPTH_CLIP_PASS_GLSL_GEN_H_RD"
        ]
    },
    "servers/rendering/renderer_rd/environment/fog.h": {
        "classes": [
            "Fog",
            "VolumetricFog"
        ],
        "structs": [
            "FogVolume",
            "FogVolumeInstance",
            "VolumetricFogShader",
            "FogPushConstant",
            "VolumeUBO",
            "ParamsUBO",
            "FogShaderData",
            "FogMaterialData",
            "VolumetricFogSettings"
        ],
        "defines": [
            "FOG_RD_H",
            "RB_SCOPE_FOG"
        ]
    },
    "servers/rendering/renderer_rd/environment/gi.h": {
        "classes": [
            "GI",
            "RenderBuffersGI",
            "SDFGI"
        ],
        "structs": [
            "VoxelGI",
            "VoxelGIInstance",
            "Mipmap",
            "DynamicMap",
            "VoxelGILight",
            "VoxelGIPushConstant",
            "VoxelGIDynamicPushConstant",
            "VoxelGIDebugPushConstant",
            "SDFGIShader",
            "PreprocessPushConstant",
            "DebugPushConstant",
            "DebugProbesSceneData",
            "DebugProbesPushConstant",
            "Light",
            "DirectLightPushConstant",
            "IntegratePushConstant",
            "Cascade",
            "UBO",
            "SolidCell",
            "SDFGIData",
            "ProbeCascadeData",
            "VoxelGIData",
            "SceneData",
            "PushConstant"
        ],
        "defines": [
            "GI_RD_H",
            "RB_SCOPE_GI",
            "RB_SCOPE_SDFGI",
            "RB_TEX_AMBIENT",
            "RB_TEX_REFLECTION"
        ]
    },
    "servers/rendering/renderer_rd/environment/sky.h": {
        "classes": [
            "SkyRD"
        ],
        "structs": [
            "SkyDirectionalLightData",
            "SkyPushConstant",
            "SkyShaderData",
            "SkySceneState",
            "UBO",
            "ReflectionData",
            "Layer",
            "Mipmap",
            "DownsampleLayer",
            "Mipmap",
            "SkyShader",
            "SkyMaterialData",
            "Sky"
        ],
        "defines": [
            "SKY_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/debug_effects.h": {
        "classes": [
            "DebugEffects"
        ],
        "structs": [
            "ShadowFrustumPushConstant",
            "MotionVectorsPushConstant"
        ],
        "defines": [
            "DEBUG_EFFECTS_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/fsr2.h": {
        "classes": [
            "FSR2Context",
            "FSR2Effect"
        ],
        "structs": [
            "Resources",
            "Scratch",
            "RootSignature",
            "Pipeline",
            "Pass",
            "Device",
            "Parameters"
        ],
        "defines": [
            "FSR2_RD_H",
            "FFX_GCC",
            "FSR2_MAX_QUEUED_FRAMES",
            "FSR2_MAX_UNIFORM_BUFFERS",
            "FSR2_MAX_BUFFERED_DESCRIPTORS",
            "FSR2_UBO_RING_BUFFER_SIZE"
        ]
    },
    "servers/rendering/renderer_rd/effects/ss_effects.h": {
        "classes": [
            "SSEffects"
        ],
        "structs": [
            "SSILRenderBuffers",
            "SSILSettings",
            "SSAORenderBuffers",
            "SSAOSettings",
            "SSRRenderBuffers",
            "SSEffectsDownsamplePushConstant",
            "SSEffectsGatherConstants",
            "SSEffectsShader",
            "SSILGatherPushConstant",
            "SSILImportanceMapPushConstant",
            "SSILBlurPushConstant",
            "SSILInterleavePushConstant",
            "SSILProjectionUniforms",
            "SSIL",
            "SSAOGatherPushConstant",
            "SSAOImportanceMapPushConstant",
            "SSAOBlurPushConstant",
            "SSAOInterleavePushConstant",
            "SSAO",
            "ScreenSpaceReflectionSceneData",
            "ScreenSpaceReflectionScalePushConstant",
            "ScreenSpaceReflectionScale",
            "ScreenSpaceReflectionPushConstant",
            "ScreenSpaceReflection",
            "ScreenSpaceReflectionFilterPushConstant",
            "ScreenSpaceReflectionFilter",
            "SubSurfaceScatteringPushConstant",
            "SubSurfaceScattering"
        ],
        "defines": [
            "SS_EFFECTS_RD_H",
            "RB_SCOPE_SSDS",
            "RB_SCOPE_SSIL",
            "RB_SCOPE_SSAO",
            "RB_SCOPE_SSR",
            "RB_LINEAR_DEPTH",
            "RB_FINAL",
            "RB_LAST_FRAME",
            "RB_DEINTERLEAVED",
            "RB_DEINTERLEAVED_PONG",
            "RB_EDGES",
            "RB_IMPORTANCE_MAP",
            "RB_IMPORTANCE_PONG",
            "RB_DEPTH_SCALED",
            "RB_NORMAL_SCALED",
            "RB_BLUR_RADIUS",
            "RB_INTERMEDIATE",
            "RB_OUTPUT"
        ]
    },
    "servers/rendering/renderer_rd/effects/roughness_limiter.h": {
        "classes": [
            "RoughnessLimiter"
        ],
        "structs": [
            "RoughnessLimiterPushConstant"
        ],
        "defines": [
            "ROUGHNESS_LIMITER_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/fsr.h": {
        "classes": [
            "FSR"
        ],
        "structs": [
            "FSRUpscalePushConstant"
        ],
        "defines": [
            "FSR_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/copy_effects.h": {
        "classes": [
            "CopyEffects"
        ],
        "structs": [
            "BlurRasterPushConstant",
            "BlurRaster",
            "CopyPushConstant",
            "Copy",
            "CopyToFbPushConstant",
            "CopyToFb",
            "CopyToDPPushConstant",
            "CopyToDP",
            "CubemapDownsamplerPushConstant",
            "CubemapDownsampler",
            "CubemapFilterRasterPushConstant",
            "CubemapFilter",
            "CubemapRoughnessPushConstant",
            "CubemapRoughness",
            "SpecularMerge"
        ],
        "defines": [
            "COPY_EFFECTS_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/tone_mapper.h": {
        "classes": [
            "ToneMapper"
        ],
        "structs": [
            "TonemapPushConstant",
            "Tonemap",
            "TonemapSettings"
        ],
        "defines": [
            "TONE_MAPPER_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/luminance.h": {
        "classes": [
            "Luminance",
            "LuminanceBuffers"
        ],
        "structs": [
            "LuminanceReducePushConstant",
            "LuminanceReduce",
            "LuminanceReduceRasterPushConstant",
            "LuminanceReduceFragment"
        ],
        "defines": [
            "LUMINANCE_RD_H",
            "RB_LUMINANCE_BUFFERS"
        ]
    },
    "servers/rendering/renderer_rd/effects/bokeh_dof.h": {
        "classes": [
            "BokehDOF"
        ],
        "structs": [
            "BokehPushConstant",
            "Bokeh",
            "BokehBuffers"
        ],
        "defines": [
            "BOKEH_DOF_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/taa.h": {
        "classes": [
            "TAA"
        ],
        "structs": [
            "TAAResolvePushConstant"
        ],
        "defines": [
            "TAA_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/resolve.h": {
        "classes": [
            "Resolve"
        ],
        "structs": [
            "ResolvePushConstant",
            "ResolveShader"
        ],
        "defines": [
            "RESOLVE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/sort_effects.h": {
        "classes": [
            "SortEffects"
        ],
        "structs": [
            "PushConstant"
        ],
        "defines": [
            "SORT_EFFECTS_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/effects/vrs.h": {
        "classes": [
            "VRS"
        ],
        "structs": [
            "VRSPushConstant",
            "VRSShader"
        ],
        "defines": [
            "VRS_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/particles_storage.h": {
        "classes": [
            "ParticlesStorage"
        ],
        "structs": [
            "ParticleData",
            "ParticlesFrameParams",
            "Attractor",
            "Collider",
            "ParticleEmissionBuffer",
            "Data",
            "Particles",
            "ParticlesShader",
            "PushConstant",
            "CopyPushConstant",
            "ParticlesShaderData",
            "ParticleProcessMaterialData",
            "ParticlesCollision",
            "ParticlesCollisionInstance"
        ],
        "defines": [
            "PARTICLES_STORAGE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/light_storage.h": {
        "classes": [
            "LightStorage"
        ],
        "structs": [
            "Light",
            "LightInstance",
            "ShadowTransform",
            "LightData",
            "LightInstanceDepthSort",
            "DirectionalLightData",
            "ReflectionProbe",
            "ReflectionAtlas",
            "Reflection",
            "ReflectionProbeInstance",
            "ReflectionData",
            "ReflectionProbeInstanceSort",
            "Lightmap",
            "BSP",
            "LightmapInstance",
            "ShadowShrinkStage",
            "ShadowAtlas",
            "Quadrant",
            "Shadow",
            "DirectionalShadow",
            "ShadowCubemap"
        ],
        "defines": [
            "LIGHT_STORAGE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/material_storage.h": {
        "classes": [
            "MaterialStorage"
        ],
        "structs": [
            "ShaderData",
            "MaterialData",
            "Samplers",
            "GlobalShaderUniforms",
            "Variable",
            "Value",
            "ValueInt",
            "ValueUInt",
            "ValueUsage",
            "Shader",
            "Material"
        ],
        "defines": [
            "MATERIAL_STORAGE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/render_buffer_custom_data_rd.h": {
        "classes": [
            "RenderBufferCustomDataRD"
        ],
        "structs": [],
        "defines": [
            "RENDER_BUFFER_CUSTOM_DATA_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/utilities.h": {
        "classes": [
            "Utilities"
        ],
        "structs": [
            "VisibilityNotifier"
        ],
        "defines": [
            "UTILITIES_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.h": {
        "classes": [
            "RenderSceneBuffersRD"
        ],
        "structs": [
            "NTKey",
            "NTSliceKey",
            "NamedTexture",
            "WeightBuffers"
        ],
        "defines": [
            "RENDER_SCENE_BUFFERS_RD_H",
            "RB_SCOPE_BUFFERS",
            "RB_SCOPE_VRS",
            "RB_TEXTURE",
            "RB_TEX_COLOR",
            "RB_TEX_COLOR_MSAA",
            "RB_TEX_COLOR_UPSCALED",
            "RB_TEX_DEPTH",
            "RB_TEX_DEPTH_MSAA",
            "RB_TEX_VELOCITY",
            "RB_TEX_VELOCITY_MSAA",
            "RB_TEX_BLUR_0",
            "RB_TEX_BLUR_1",
            "RB_TEX_HALF_BLUR",
            "RB_TEX_BACK_COLOR",
            "RB_TEX_BACK_DEPTH"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/texture_storage.h": {
        "classes": [
            "TextureStorage",
            "CanvasTexture",
            "Texture"
        ],
        "structs": [
            "BufferSlice3D",
            "TextureToRDFormat",
            "TextureFromRDFormat",
            "DecalAtlas",
            "Texture",
            "SortItem",
            "MipMap",
            "Decal",
            "DecalInstance",
            "DecalData",
            "DecalInstanceSort",
            "RenderTarget",
            "RTOverridden",
            "SliceKey",
            "RenderTargetSDF",
            "PushConstant"
        ],
        "defines": [
            "TEXTURE_STORAGE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/mesh_storage.h": {
        "classes": [
            "MeshStorage"
        ],
        "structs": [
            "Mesh",
            "Surface",
            "Version",
            "LOD",
            "MeshInstance",
            "Surface",
            "MultiMesh",
            "SkeletonShader",
            "PushConstant",
            "Skeleton"
        ],
        "defines": [
            "MESH_STORAGE_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/render_scene_data_rd.h": {
        "classes": [
            "RenderSceneDataRD"
        ],
        "structs": [
            "UBO",
            "UBODATA"
        ],
        "defines": [
            "RENDER_SCENE_DATA_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/render_data_rd.h": {
        "classes": [
            "RenderDataRD"
        ],
        "structs": [],
        "defines": [
            "RENDER_DATA_RD_H"
        ]
    },
    "servers/rendering/renderer_rd/storage_rd/forward_id_storage.h": {
        "classes": [
            "ForwardIDStorage"
        ],
        "structs": [],
        "defines": [
            "FORWARD_ID_STORAGE_H"
        ]
    },
    "servers/rendering/dummy/rasterizer_canvas_dummy.h": {
        "classes": [
            "RasterizerCanvasDummy"
        ],
        "structs": [],
        "defines": [
            "RASTERIZER_CANVAS_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/rasterizer_scene_dummy.h": {
        "classes": [
            "RasterizerSceneDummy",
            "GeometryInstanceDummy"
        ],
        "structs": [],
        "defines": [
            "RASTERIZER_SCENE_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/rasterizer_dummy.h": {
        "classes": [
            "RasterizerDummy"
        ],
        "structs": [],
        "defines": [
            "RASTERIZER_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/storage/particles_storage.h": {
        "classes": [
            "ParticlesStorage"
        ],
        "structs": [],
        "defines": [
            "PARTICLES_STORAGE_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/storage/light_storage.h": {
        "classes": [
            "LightStorage"
        ],
        "structs": [],
        "defines": [
            "LIGHT_STORAGE_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/storage/material_storage.h": {
        "classes": [
            "MaterialStorage"
        ],
        "structs": [
            "DummyShader"
        ],
        "defines": [
            "MATERIAL_STORAGE_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/storage/utilities.h": {
        "classes": [
            "Utilities"
        ],
        "structs": [],
        "defines": [
            "UTILITIES_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/storage/texture_storage.h": {
        "classes": [
            "TextureStorage"
        ],
        "structs": [
            "DummyTexture"
        ],
        "defines": [
            "TEXTURE_STORAGE_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/storage/mesh_storage.h": {
        "classes": [
            "MeshStorage"
        ],
        "structs": [
            "DummyMesh",
            "DummyMultiMesh"
        ],
        "defines": [
            "MESH_STORAGE_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/environment/fog.h": {
        "classes": [
            "Fog"
        ],
        "structs": [],
        "defines": [
            "FOG_DUMMY_H"
        ]
    },
    "servers/rendering/dummy/environment/gi.h": {
        "classes": [
            "GI"
        ],
        "structs": [],
        "defines": [
            "GI_DUMMY_H"
        ]
    },
    "servers/rendering/storage/particles_storage.h": {
        "classes": [
            "RendererParticlesStorage"
        ],
        "structs": [],
        "defines": [
            "PARTICLES_STORAGE_H"
        ]
    },
    "servers/rendering/storage/environment_storage.h": {
        "classes": [
            "RendererEnvironmentStorage"
        ],
        "structs": [
            "Environment"
        ],
        "defines": [
            "ENVIRONMENT_STORAGE_H"
        ]
    },
    "servers/rendering/storage/light_storage.h": {
        "classes": [
            "RendererLightStorage"
        ],
        "structs": [],
        "defines": [
            "LIGHT_STORAGE_H"
        ]
    },
    "servers/rendering/storage/render_data.h": {
        "classes": [
            "RenderData",
            "RenderDataExtension"
        ],
        "structs": [],
        "defines": [
            "RENDER_DATA_H"
        ]
    },
    "servers/rendering/storage/material_storage.h": {
        "classes": [
            "RendererMaterialStorage"
        ],
        "structs": [
            "InstanceShaderParam"
        ],
        "defines": [
            "MATERIAL_STORAGE_H"
        ]
    },
    "servers/rendering/storage/utilities.h": {
        "classes": [
            "Dependency",
            "DependencyTracker",
            "RendererUtilities"
        ],
        "structs": [],
        "defines": [
            "RENDERER_UTILITIES_H",
            "TIMESTAMP_BEGIN",
            "RENDER_TIMESTAMP"
        ]
    },
    "servers/rendering/storage/compositor_storage.h": {
        "classes": [
            "RendererCompositorStorage"
        ],
        "structs": [
            "CompositorEffect",
            "Compositor"
        ],
        "defines": [
            "COMPOSITOR_STORAGE_H"
        ]
    },
    "servers/rendering/storage/texture_storage.h": {
        "classes": [
            "RendererTextureStorage"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_STORAGE_H"
        ]
    },
    "servers/rendering/storage/variant_converters.h": {
        "classes": [],
        "structs": [
            "VariantConverterStd140"
        ],
        "defines": [
            "VARIANT_CONVERTERS_H"
        ]
    },
    "servers/rendering/storage/mesh_storage.h": {
        "classes": [
            "RendererMeshStorage"
        ],
        "structs": [],
        "defines": [
            "MESH_STORAGE_H"
        ]
    },
    "servers/rendering/storage/render_scene_data.h": {
        "classes": [
            "RenderSceneData",
            "RenderSceneDataExtension"
        ],
        "structs": [],
        "defines": [
            "RENDER_SCENE_DATA_H"
        ]
    },
    "servers/rendering/storage/render_scene_buffers.h": {
        "classes": [
            "RenderSceneBuffersConfiguration",
            "RenderSceneBuffers",
            "RenderSceneBuffersExtension"
        ],
        "structs": [],
        "defines": [
            "RENDER_SCENE_BUFFERS_H"
        ]
    },
    "servers/rendering/storage/camera_attributes_storage.h": {
        "classes": [
            "RendererCameraAttributes"
        ],
        "structs": [
            "CameraAttributes"
        ],
        "defines": [
            "CAMERA_ATTRIBUTES_STORAGE_H"
        ]
    },
    "servers/rendering/environment/renderer_fog.h": {
        "classes": [
            "RendererFog"
        ],
        "structs": [],
        "defines": [
            "RENDERER_FOG_H"
        ]
    },
    "servers/rendering/environment/renderer_gi.h": {
        "classes": [
            "RendererGI"
        ],
        "structs": [],
        "defines": [
            "RENDERER_GI_H"
        ]
    },
    "servers/physics_2d/godot_collision_solver_2d.h": {
        "classes": [
            "GodotCollisionSolver2D"
        ],
        "structs": [],
        "defines": [
            "GODOT_COLLISION_SOLVER_2D_H"
        ]
    },
    "servers/physics_2d/godot_step_2d.h": {
        "classes": [
            "GodotStep2D"
        ],
        "structs": [],
        "defines": [
            "GODOT_STEP_2D_H"
        ]
    },
    "servers/physics_2d/godot_broad_phase_2d.h": {
        "classes": [
            "GodotBroadPhase2D"
        ],
        "structs": [],
        "defines": [
            "GODOT_BROAD_PHASE_2D_H"
        ]
    },
    "servers/physics_2d/godot_space_2d.h": {
        "classes": [
            "GodotPhysicsDirectSpaceState2D",
            "GodotSpace2D"
        ],
        "structs": [
            "ExcludedShapeSW"
        ],
        "defines": [
            "GODOT_SPACE_2D_H"
        ]
    },
    "servers/physics_2d/godot_constraint_2d.h": {
        "classes": [
            "GodotConstraint2D"
        ],
        "structs": [],
        "defines": [
            "GODOT_CONSTRAINT_2D_H"
        ]
    },
    "servers/physics_2d/godot_body_pair_2d.h": {
        "classes": [
            "GodotBodyPair2D"
        ],
        "structs": [
            "Contact"
        ],
        "defines": [
            "GODOT_BODY_PAIR_2D_H"
        ]
    },
    "servers/physics_2d/godot_shape_2d.h": {
        "classes": [
            "GodotShapeOwner2D",
            "GodotShape2D",
            "GodotWorldBoundaryShape2D",
            "GodotSeparationRayShape2D",
            "GodotSegmentShape2D",
            "GodotCircleShape2D",
            "GodotRectangleShape2D",
            "GodotCapsuleShape2D",
            "GodotConvexPolygonShape2D",
            "GodotConcaveShape2D",
            "GodotConcavePolygonShape2D"
        ],
        "structs": [
            "Point",
            "Segment",
            "BVH",
            "BVH_CompareX",
            "BVH_CompareY"
        ],
        "defines": [
            "GODOT_SHAPE_2D_H",
            "DEFAULT_PROJECT_RANGE_CAST"
        ]
    },
    "servers/physics_2d/godot_area_2d.h": {
        "classes": [
            "GodotArea2D"
        ],
        "structs": [
            "BodyKey",
            "BodyState"
        ],
        "defines": [
            "GODOT_AREA_2D_H"
        ]
    },
    "servers/physics_2d/godot_physics_server_2d.h": {
        "classes": [
            "GodotPhysicsServer2D"
        ],
        "structs": [
            "CollCbkData"
        ],
        "defines": [
            "GODOT_PHYSICS_SERVER_2D_H"
        ]
    },
    "servers/physics_2d/godot_body_2d.h": {
        "classes": [
            "GodotBody2D"
        ],
        "structs": [
            "AreaCMP",
            "Contact",
            "ForceIntegrationCallbackData"
        ],
        "defines": [
            "GODOT_BODY_2D_H"
        ]
    },
    "servers/physics_2d/godot_collision_solver_2d_sat.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "GODOT_COLLISION_SOLVER_2D_SAT_H"
        ]
    },
    "servers/physics_2d/godot_collision_object_2d.h": {
        "classes": [
            "GodotCollisionObject2D"
        ],
        "structs": [
            "Shape"
        ],
        "defines": [
            "GODOT_COLLISION_OBJECT_2D_H"
        ]
    },
    "servers/physics_2d/godot_joints_2d.h": {
        "classes": [
            "GodotJoint2D",
            "GodotPinJoint2D",
            "GodotGrooveJoint2D",
            "GodotDampedSpringJoint2D"
        ],
        "structs": [],
        "defines": [
            "GODOT_JOINTS_2D_H"
        ]
    },
    "servers/physics_2d/godot_broad_phase_2d_bvh.h": {
        "classes": [
            "GodotBroadPhase2DBVH",
            "UserPairTestFunction",
            "UserCullTestFunction"
        ],
        "structs": [],
        "defines": [
            "GODOT_BROAD_PHASE_2D_BVH_H"
        ]
    },
    "servers/physics_2d/godot_area_pair_2d.h": {
        "classes": [
            "GodotAreaPair2D",
            "GodotArea2Pair2D"
        ],
        "structs": [],
        "defines": [
            "GODOT_AREA_PAIR_2D_H"
        ]
    },
    "servers/physics_2d/godot_body_direct_state_2d.h": {
        "classes": [
            "GodotPhysicsDirectBodyState2D"
        ],
        "structs": [],
        "defines": [
            "GODOT_BODY_DIRECT_STATE_2D_H"
        ]
    },
    "servers/text/text_server_extension.h": {
        "classes": [
            "TextServerExtension"
        ],
        "structs": [],
        "defines": [
            "TEXT_SERVER_EXTENSION_H"
        ]
    },
    "servers/text/text_server_dummy.h": {
        "classes": [
            "TextServerDummy"
        ],
        "structs": [],
        "defines": [
            "TEXT_SERVER_DUMMY_H"
        ]
    },
    "servers/movie_writer/movie_writer_mjpeg.h": {
        "classes": [
            "MovieWriterMJPEG"
        ],
        "structs": [],
        "defines": [
            "MOVIE_WRITER_MJPEG_H"
        ]
    },
    "servers/movie_writer/movie_writer_pngwav.h": {
        "classes": [
            "MovieWriterPNGWAV"
        ],
        "structs": [],
        "defines": [
            "MOVIE_WRITER_PNGWAV_H"
        ]
    },
    "servers/movie_writer/movie_writer.h": {
        "classes": [
            "MovieWriter"
        ],
        "structs": [],
        "defines": [
            "MOVIE_WRITER_H"
        ]
    },
    "editor/editor_run.h": {
        "classes": [
            "EditorRun"
        ],
        "structs": [],
        "defines": [
            "EDITOR_RUN_H"
        ]
    },
    "editor/editor_atlas_packer.h": {
        "classes": [
            "EditorAtlasPacker"
        ],
        "structs": [
            "Chart",
            "Face",
            "PlottedBitmap"
        ],
        "defines": [
            "EDITOR_ATLAS_PACKER_H"
        ]
    },
    "editor/editor_translation_parser.h": {
        "classes": [
            "EditorTranslationParserPlugin",
            "EditorTranslationParser"
        ],
        "structs": [],
        "defines": [
            "EDITOR_TRANSLATION_PARSER_H"
        ]
    },
    "editor/doc_data_class_path.gen.h": {
        "classes": [],
        "structs": [
            "_DocDataClassPath"
        ],
        "defines": []
    },
    "editor/multi_node_edit.h": {
        "classes": [
            "MultiNodeEdit"
        ],
        "structs": [
            "PLData"
        ],
        "defines": [
            "MULTI_NODE_EDIT_H"
        ]
    },
    "editor/animation_track_editor_plugins.h": {
        "classes": [
            "AnimationTrackEditBool",
            "AnimationTrackEditColor",
            "AnimationTrackEditAudio",
            "AnimationTrackEditSpriteFrame",
            "AnimationTrackEditSubAnim",
            "AnimationTrackEditTypeAudio",
            "AnimationTrackEditTypeAnimation",
            "AnimationTrackEditVolumeDB",
            "AnimationTrackEditDefaultPlugin"
        ],
        "structs": [],
        "defines": [
            "ANIMATION_TRACK_EDITOR_PLUGINS_H"
        ]
    },
    "editor/project_manager.h": {
        "classes": [
            "ProjectManager"
        ],
        "structs": [],
        "defines": [
            "PROJECT_MANAGER_H"
        ]
    },
    "editor/dependency_editor.h": {
        "classes": [
            "DependencyEditor",
            "DependencyEditorOwners",
            "DependencyRemoveDialog",
            "DependencyErrorDialog",
            "OrphanResourcesDialog"
        ],
        "structs": [
            "RemovedDependency"
        ],
        "defines": [
            "DEPENDENCY_EDITOR_H"
        ]
    },
    "editor/editor_about.h": {
        "classes": [
            "EditorAbout"
        ],
        "structs": [],
        "defines": [
            "EDITOR_ABOUT_H"
        ]
    },
    "editor/fbx_importer_manager.h": {
        "classes": [
            "FBXImporterManager"
        ],
        "structs": [],
        "defines": [
            "FBX_IMPORTER_MANAGER_H"
        ]
    },
    "editor/shader_globals_editor.h": {
        "classes": [
            "ShaderGlobalsEditor"
        ],
        "structs": [],
        "defines": [
            "SHADER_GLOBALS_EDITOR_H"
        ]
    },
    "editor/editor_folding.h": {
        "classes": [
            "EditorFolding"
        ],
        "structs": [],
        "defines": [
            "EDITOR_FOLDING_H"
        ]
    },
    "editor/editor_layouts_dialog.h": {
        "classes": [
            "EditorLayoutsDialog"
        ],
        "structs": [],
        "defines": [
            "EDITOR_LAYOUTS_DIALOG_H"
        ]
    },
    "editor/find_in_files.h": {
        "classes": [
            "FindInFiles",
            "FindInFilesDialog",
            "FindInFilesPanel"
        ],
        "structs": [
            "Result"
        ],
        "defines": [
            "FIND_IN_FILES_H"
        ]
    },
    "editor/editor_command_palette.h": {
        "classes": [
            "EditorCommandPalette"
        ],
        "structs": [
            "Command",
            "CommandEntry",
            "CommandEntryComparator",
            "CommandHistoryComparator"
        ],
        "defines": [
            "EDITOR_COMMAND_PALETTE_H"
        ]
    },
    "editor/input_event_configuration_dialog.h": {
        "classes": [
            "InputEventConfigurationDialog"
        ],
        "structs": [
            "IconCache"
        ],
        "defines": [
            "INPUT_EVENT_CONFIGURATION_DIALOG_H"
        ]
    },
    "editor/import_dock.h": {
        "classes": [
            "ImportDock"
        ],
        "structs": [],
        "defines": [
            "IMPORT_DOCK_H"
        ]
    },
    "editor/editor_settings.h": {
        "classes": [
            "EditorSettings"
        ],
        "structs": [
            "Plugin",
            "VariantContainer"
        ],
        "defines": [
            "EDITOR_SETTINGS_H",
            "EDITOR_DEF",
            "EDITOR_DEF_RST",
            "EDITOR_GET",
            "ED_IS_SHORTCUT"
        ]
    },
    "editor/editor_vcs_interface.h": {
        "classes": [
            "EditorVCSInterface",
            "VCSMetadata"
        ],
        "structs": [
            "DiffLine",
            "DiffHunk",
            "DiffFile",
            "Commit",
            "StatusFile"
        ],
        "defines": [
            "EDITOR_VCS_INTERFACE_H"
        ]
    },
    "editor/code_editor.h": {
        "classes": [
            "GotoLineDialog",
            "FindReplaceBar",
            "CodeTextEditor"
        ],
        "structs": [],
        "defines": [
            "CODE_EDITOR_H"
        ]
    },
    "editor/surface_upgrade_tool.h": {
        "classes": [
            "SurfaceUpgradeTool",
            "SurfaceUpgradeDialog"
        ],
        "structs": [],
        "defines": [
            "SURFACE_UPGRADE_TOOL_H"
        ]
    },
    "editor/editor_file_system.h": {
        "classes": [
            "EditorFileSystemDirectory",
            "EditorFileSystemImportFormatSupportQuery",
            "EditorFileSystem"
        ],
        "structs": [
            "FileInfo",
            "FileInfoSort",
            "ItemAction",
            "FileCache",
            "ScanProgress",
            "ImportFile",
            "ImportThreadData"
        ],
        "defines": [
            "EDITOR_FILE_SYSTEM_H"
        ]
    },
    "editor/create_dialog.h": {
        "classes": [
            "CreateDialog"
        ],
        "structs": [],
        "defines": [
            "CREATE_DIALOG_H"
        ]
    },
    "editor/editor_translations.gen.h": {
        "classes": [],
        "structs": [
            "EditorTranslationList"
        ],
        "defines": [
            "_EDITOR_TRANSLATIONS_H"
        ]
    },
    "editor/editor_feature_profile.h": {
        "classes": [
            "EditorFeatureProfile",
            "EditorFeatureProfileManager"
        ],
        "structs": [],
        "defines": [
            "EDITOR_FEATURE_PROFILE_H"
        ]
    },
    "editor/builtin_fonts.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_EDITOR_FONTS_H"
        ]
    },
    "editor/history_dock.h": {
        "classes": [
            "HistoryDock"
        ],
        "structs": [],
        "defines": [
            "HISTORY_DOCK_H"
        ]
    },
    "editor/rename_dialog.h": {
        "classes": [
            "RenameDialog"
        ],
        "structs": [],
        "defines": [
            "RENAME_DIALOG_H"
        ]
    },
    "editor/editor_log.h": {
        "classes": [
            "EditorLog"
        ],
        "structs": [
            "LogMessage",
            "LogFilter"
        ],
        "defines": [
            "EDITOR_LOG_H"
        ]
    },
    "editor/editor_build_profile.h": {
        "classes": [
            "EditorBuildProfile",
            "EditorBuildProfileManager"
        ],
        "structs": [
            "DetectedFile"
        ],
        "defines": [
            "EDITOR_BUILD_PROFILE_H"
        ]
    },
    "editor/progress_dialog.h": {
        "classes": [
            "BackgroundProgress",
            "ProgressDialog"
        ],
        "structs": [
            "Task",
            "Task"
        ],
        "defines": [
            "PROGRESS_DIALOG_H"
        ]
    },
    "editor/groups_editor.h": {
        "classes": [
            "GroupsEditor"
        ],
        "structs": [],
        "defines": [
            "GROUPS_EDITOR_H"
        ]
    },
    "editor/extractable_translations.gen.h": {
        "classes": [],
        "structs": [
            "ExtractableTranslationList"
        ],
        "defines": [
            "_EXTRACTABLE_TRANSLATIONS_H"
        ]
    },
    "editor/editor_undo_redo_manager.h": {
        "classes": [
            "EditorUndoRedoManager"
        ],
        "structs": [
            "Action",
            "History"
        ],
        "defines": [
            "EDITOR_UNDO_REDO_MANAGER_H"
        ]
    },
    "editor/editor_help_search.h": {
        "classes": [
            "EditorHelpSearch",
            "EditorHelpSearch"
        ],
        "structs": [
            "TreeCache",
            "MemberMatch",
            "ClassMatch"
        ],
        "defines": [
            "EDITOR_HELP_SEARCH_H"
        ]
    },
    "editor/editor_dock_manager.h": {
        "classes": [
            "DockSplitContainer",
            "EditorDockManager"
        ],
        "structs": [],
        "defines": [
            "EDITOR_DOCK_MANAGER_H"
        ]
    },
    "editor/editor_sectioned_inspector.h": {
        "classes": [
            "SectionedInspector"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SECTIONED_INSPECTOR_H"
        ]
    },
    "editor/scene_create_dialog.h": {
        "classes": [
            "SceneCreateDialog"
        ],
        "structs": [],
        "defines": [
            "SCENE_CREATE_DIALOG_H"
        ]
    },
    "editor/doc_translations.gen.h": {
        "classes": [],
        "structs": [
            "DocTranslationList"
        ],
        "defines": [
            "_DOC_TRANSLATIONS_H"
        ]
    },
    "editor/scene_tree_dock.h": {
        "classes": [
            "SceneTreeDock"
        ],
        "structs": [],
        "defines": [
            "SCENE_TREE_DOCK_H"
        ]
    },
    "editor/run_instances_dialog.h": {
        "classes": [
            "RunInstancesDialog"
        ],
        "structs": [
            "InstanceData"
        ],
        "defines": [
            "RUN_INSTANCES_DIALOG_H"
        ]
    },
    "editor/editor_string_names.h": {
        "classes": [
            "EditorStringNames"
        ],
        "structs": [],
        "defines": [
            "EDITOR_STRING_NAMES_H",
            "EditorStringName"
        ]
    },
    "editor/editor_native_shader_source_visualizer.h": {
        "classes": [
            "EditorNativeShaderSourceVisualizer"
        ],
        "structs": [],
        "defines": [
            "EDITOR_NATIVE_SHADER_SOURCE_VISUALIZER_H"
        ]
    },
    "editor/editor_property_name_processor.h": {
        "classes": [
            "EditorPropertyNameProcessor"
        ],
        "structs": [],
        "defines": [
            "EDITOR_PROPERTY_NAME_PROCESSOR_H"
        ]
    },
    "editor/window_wrapper.h": {
        "classes": [
            "WindowWrapper",
            "ScreenSelect"
        ],
        "structs": [],
        "defines": [
            "WINDOW_WRAPPER_H"
        ]
    },
    "editor/property_translations.gen.h": {
        "classes": [],
        "structs": [
            "PropertyTranslationList"
        ],
        "defines": [
            "_PROPERTY_TRANSLATIONS_H"
        ]
    },
    "editor/animation_track_editor.h": {
        "classes": [
            "AnimationTrackKeyEdit",
            "AnimationMultiTrackKeyEdit",
            "AnimationTimelineEdit",
            "AnimationTrackEdit",
            "AnimationTrackEditPlugin",
            "AnimationTrackEditGroup",
            "AnimationTrackEditor",
            "AnimationTrackKeyEditEditor"
        ],
        "structs": [
            "InsertData",
            "TrackIndices",
            "SelectedKey",
            "KeyInfo",
            "TrackClipboard",
            "Key",
            "KeyClipboard",
            "Key",
            "KeyDataCache"
        ],
        "defines": [
            "ANIMATION_TRACK_EDITOR_H"
        ]
    },
    "editor/editor_properties.h": {
        "classes": [
            "EditorPropertyNil",
            "EditorPropertyText",
            "EditorPropertyMultilineText",
            "EditorPropertyTextEnum",
            "EditorPropertyPath",
            "EditorPropertyLocale",
            "EditorPropertyClassName",
            "EditorPropertyCheck",
            "EditorPropertyEnum",
            "EditorPropertyFlags",
            "EditorPropertyLayersGrid",
            "EditorPropertyLayers",
            "EditorPropertyInteger",
            "EditorPropertyObjectID",
            "EditorPropertySignal",
            "EditorPropertyCallable",
            "EditorPropertyFloat",
            "EditorPropertyEasing",
            "EditorPropertyRect2",
            "EditorPropertyRect2i",
            "EditorPropertyPlane",
            "EditorPropertyQuaternion",
            "EditorPropertyAABB",
            "EditorPropertyTransform2D",
            "EditorPropertyBasis",
            "EditorPropertyTransform3D",
            "EditorPropertyProjection",
            "EditorPropertyColor",
            "EditorPropertyNodePath",
            "EditorPropertyRID",
            "EditorPropertyResource",
            "EditorInspectorDefaultPlugin"
        ],
        "structs": [],
        "defines": [
            "EDITOR_PROPERTIES_H"
        ]
    },
    "editor/event_listener_line_edit.h": {
        "classes": [
            "EventListenerLineEdit"
        ],
        "structs": [],
        "defines": [
            "EVENT_LISTENER_LINE_EDIT_H"
        ]
    },
    "editor/renames_map_3_to_4.h": {
        "classes": [],
        "structs": [
            "RenamesMap3To4"
        ],
        "defines": [
            "RENAMES_MAP_3_TO_4_H"
        ]
    },
    "editor/register_exporters.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGISTER_EXPORTERS_H"
        ]
    },
    "editor/editor_locale_dialog.h": {
        "classes": [
            "EditorLocaleDialog"
        ],
        "structs": [],
        "defines": [
            "EDITOR_LOCALE_DIALOG_H"
        ]
    },
    "editor/editor_help.h": {
        "classes": [
            "FindBar",
            "EditorHelp",
            "EditorHelpBit",
            "EditorHelpTooltip",
            "EditorHelpHighlighter"
        ],
        "structs": [
            "ThemeCache",
            "PropertyCompare"
        ],
        "defines": [
            "EDITOR_HELP_H"
        ]
    },
    "editor/editor_script.h": {
        "classes": [
            "EditorScript"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCRIPT_H"
        ]
    },
    "editor/doc_tools.h": {
        "classes": [
            "DocTools"
        ],
        "structs": [],
        "defines": [
            "DOC_TOOLS_H"
        ]
    },
    "editor/editor_plugin.h": {
        "classes": [
            "EditorPlugin",
            "EditorPlugins"
        ],
        "structs": [],
        "defines": [
            "EDITOR_PLUGIN_H"
        ]
    },
    "editor/node_dock.h": {
        "classes": [
            "NodeDock"
        ],
        "structs": [],
        "defines": [
            "NODE_DOCK_H"
        ]
    },
    "editor/directory_create_dialog.h": {
        "classes": [
            "DirectoryCreateDialog"
        ],
        "structs": [],
        "defines": [
            "DIRECTORY_CREATE_DIALOG_H"
        ]
    },
    "editor/audio_stream_preview.h": {
        "classes": [
            "AudioStreamPreview",
            "AudioStreamPreviewGenerator"
        ],
        "structs": [
            "Preview"
        ],
        "defines": [
            "AUDIO_STREAM_PREVIEW_H"
        ]
    },
    "editor/register_editor_types.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "REGISTER_EDITOR_TYPES_H"
        ]
    },
    "editor/project_settings_editor.h": {
        "classes": [
            "ProjectSettingsEditor"
        ],
        "structs": [],
        "defines": [
            "PROJECT_SETTINGS_EDITOR_H"
        ]
    },
    "editor/editor_run_native.h": {
        "classes": [
            "EditorRunNative"
        ],
        "structs": [],
        "defines": [
            "EDITOR_RUN_NATIVE_H"
        ]
    },
    "editor/editor_asset_installer.h": {
        "classes": [
            "EditorAssetInstaller"
        ],
        "structs": [],
        "defines": [
            "EDITOR_ASSET_INSTALLER_H"
        ]
    },
    "editor/action_map_editor.h": {
        "classes": [
            "ActionMapEditor"
        ],
        "structs": [
            "ActionInfo"
        ],
        "defines": [
            "ACTION_MAP_EDITOR_H"
        ]
    },
    "editor/editor_properties_vector.h": {
        "classes": [
            "EditorPropertyVectorN",
            "EditorPropertyVector2",
            "EditorPropertyVector2i",
            "EditorPropertyVector3",
            "EditorPropertyVector3i",
            "EditorPropertyVector4",
            "EditorPropertyVector4i"
        ],
        "structs": [],
        "defines": [
            "EDITOR_PROPERTIES_VECTOR_H"
        ]
    },
    "editor/editor_paths.h": {
        "classes": [
            "EditorPaths"
        ],
        "structs": [],
        "defines": [
            "EDITOR_PATHS_H"
        ]
    },
    "editor/editor_settings_dialog.h": {
        "classes": [
            "EditorSettingsDialog"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SETTINGS_DIALOG_H"
        ]
    },
    "editor/editor_translation.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "EDITOR_TRANSLATION_H"
        ]
    },
    "editor/editor_audio_buses.h": {
        "classes": [
            "EditorAudioBus",
            "EditorAudioBusDrop",
            "EditorAudioBuses",
            "EditorAudioMeterNotches",
            "AudioBusesEditorPlugin"
        ],
        "structs": [
            "AudioNotch",
            "ThemeCache"
        ],
        "defines": [
            "EDITOR_AUDIO_BUSES_H"
        ]
    },
    "editor/editor_properties_array_dict.h": {
        "classes": [
            "EditorPropertyArrayObject",
            "EditorPropertyDictionaryObject",
            "EditorPropertyArray",
            "EditorPropertyDictionary",
            "EditorPropertyLocalizableString"
        ],
        "structs": [
            "Slot"
        ],
        "defines": [
            "EDITOR_PROPERTIES_ARRAY_DICT_H"
        ]
    },
    "editor/editor_resource_preview.h": {
        "classes": [
            "EditorResourcePreviewGenerator",
            "DrawRequester",
            "EditorResourcePreview"
        ],
        "structs": [
            "QueueItem",
            "Item"
        ],
        "defines": [
            "EDITOR_RESOURCE_PREVIEW_H"
        ]
    },
    "editor/plugin_config_dialog.h": {
        "classes": [
            "PluginConfigDialog"
        ],
        "structs": [],
        "defines": [
            "PLUGIN_CONFIG_DIALOG_H"
        ]
    },
    "editor/editor_quick_open.h": {
        "classes": [
            "EditorQuickOpen"
        ],
        "structs": [
            "Entry",
            "EntryComparator"
        ],
        "defines": [
            "EDITOR_QUICK_OPEN_H"
        ]
    },
    "editor/script_create_dialog.h": {
        "classes": [
            "ScriptCreateDialog"
        ],
        "structs": [],
        "defines": [
            "SCRIPT_CREATE_DIALOG_H"
        ]
    },
    "editor/editor_autoload_settings.h": {
        "classes": [
            "EditorAutoloadSettings"
        ],
        "structs": [
            "AutoloadInfo"
        ],
        "defines": [
            "EDITOR_AUTOLOAD_SETTINGS_H"
        ]
    },
    "editor/pot_generator.h": {
        "classes": [
            "POTGenerator"
        ],
        "structs": [
            "MsgidData"
        ],
        "defines": [
            "POT_GENERATOR_H",
            "DEBUG_POT"
        ]
    },
    "editor/editor_data.h": {
        "classes": [
            "EditorSelectionHistory",
            "EditorData",
            "EditorSelection"
        ],
        "structs": [
            "_Object",
            "HistoryElement",
            "CustomType",
            "EditedScene",
            "PropertyData"
        ],
        "defines": [
            "EDITOR_DATA_H"
        ]
    },
    "editor/import_defaults_editor.h": {
        "classes": [
            "ImportDefaultsEditor"
        ],
        "structs": [],
        "defines": [
            "IMPORT_DEFAULTS_EDITOR_H"
        ]
    },
    "editor/project_converter_3_to_4.h": {
        "classes": [
            "ProjectConverter3To4",
            "ProjectConverter3To4"
        ],
        "structs": [
            "SourceLine"
        ],
        "defines": [
            "PROJECT_CONVERTER_3_TO_4_H"
        ]
    },
    "editor/editor_inspector.h": {
        "classes": [
            "EditorPropertyRevert",
            "EditorProperty",
            "EditorInspectorPlugin",
            "EditorInspectorCategory",
            "EditorInspectorSection",
            "EditorInspectorArray",
            "EditorPaginator",
            "EditorInspector"
        ],
        "structs": [
            "AddedEditor",
            "ArrayElement"
        ],
        "defines": [
            "EDITOR_INSPECTOR_H"
        ]
    },
    "editor/doc_data_compressed.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_DOC_DATA_RAW_H"
        ]
    },
    "editor/group_settings_editor.h": {
        "classes": [
            "GroupSettingsEditor"
        ],
        "structs": [],
        "defines": [
            "GROUP_SETTINGS_EDITOR_H"
        ]
    },
    "editor/animation_bezier_editor.h": {
        "classes": [
            "AnimationBezierTrackEdit"
        ],
        "structs": [
            "PairHasher",
            "AnimMoveRestore",
            "EditPoint",
            "PairCompare"
        ],
        "defines": [
            "ANIMATION_BEZIER_EDITOR_H"
        ]
    },
    "editor/inspector_dock.h": {
        "classes": [
            "InspectorDock"
        ],
        "structs": [],
        "defines": [
            "INSPECTOR_DOCK_H"
        ]
    },
    "editor/editor_interface.h": {
        "classes": [
            "EditorInterface"
        ],
        "structs": [],
        "defines": [
            "EDITOR_INTERFACE_H"
        ]
    },
    "editor/shader_create_dialog.h": {
        "classes": [
            "ShaderCreateDialog"
        ],
        "structs": [
            "ShaderTypeData"
        ],
        "defines": [
            "SHADER_CREATE_DIALOG_H"
        ]
    },
    "editor/connections_dialog.h": {
        "classes": [
            "ConnectDialog",
            "ConnectionsDockTree",
            "ConnectionsDock"
        ],
        "structs": [
            "ConnectionData"
        ],
        "defines": [
            "CONNECTIONS_DIALOG_H"
        ]
    },
    "editor/editor_resource_picker.h": {
        "classes": [
            "EditorResourcePicker",
            "EditorScriptPicker",
            "EditorShaderPicker",
            "EditorAudioStreamPicker"
        ],
        "structs": [],
        "defines": [
            "EDITOR_RESOURCE_PICKER_H"
        ]
    },
    "editor/localization_editor.h": {
        "classes": [
            "LocalizationEditor"
        ],
        "structs": [],
        "defines": [
            "LOCALIZATION_EDITOR_H"
        ]
    },
    "editor/editor_node.h": {
        "classes": [
            "EditorNode",
            "EditorPluginList"
        ],
        "structs": [
            "ExecuteThreadArgs",
            "ExportDefer",
            "AdditiveNodeEntry",
            "ConnectionWithNodePath",
            "ModificationNodeEntry",
            "EditorProgress",
            "EditorProgressBG"
        ],
        "defines": [
            "EDITOR_NODE_H"
        ]
    },
    "editor/editor_icons.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_EDITOR_ICONS_H"
        ]
    },
    "editor/property_selector.h": {
        "classes": [
            "PropertySelector"
        ],
        "structs": [],
        "defines": [
            "PROPERTY_SELECTOR_H"
        ]
    },
    "editor/filesystem_dock.h": {
        "classes": [
            "FileSystemTree",
            "FileSystemList",
            "FileSystemDock",
            "FileOrFolder"
        ],
        "structs": [
            "FileInfo"
        ],
        "defines": [
            "FILESYSTEM_DOCK_H"
        ]
    },
    "editor/editor_plugin_settings.h": {
        "classes": [
            "EditorPluginSettings"
        ],
        "structs": [],
        "defines": [
            "EDITOR_PLUGIN_SETTINGS_H"
        ]
    },
    "editor/reparent_dialog.h": {
        "classes": [
            "ReparentDialog"
        ],
        "structs": [],
        "defines": [
            "REPARENT_DIALOG_H"
        ]
    },
    "editor/project_manager/quick_settings_dialog.h": {
        "classes": [
            "QuickSettingsDialog"
        ],
        "structs": [],
        "defines": [
            "QUICK_SETTINGS_DIALOG_H"
        ]
    },
    "editor/project_manager/project_list.h": {
        "classes": [
            "ProjectListItemControl",
            "ProjectList"
        ],
        "structs": [
            "Item"
        ],
        "defines": [
            "PROJECT_LIST_H"
        ]
    },
    "editor/project_manager/project_tag.h": {
        "classes": [
            "ProjectTag"
        ],
        "structs": [],
        "defines": [
            "PROJECT_TAG_H"
        ]
    },
    "editor/project_manager/project_dialog.h": {
        "classes": [
            "ProjectDialog"
        ],
        "structs": [],
        "defines": [
            "PROJECT_DIALOG_H"
        ]
    },
    "editor/plugins/gpu_particles_collision_sdf_editor_plugin.h": {
        "classes": [
            "GPUParticlesCollisionSDF3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "GPU_PARTICLES_COLLISION_SDF_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/texture_layered_editor_plugin.h": {
        "classes": [
            "TextureLayeredEditor",
            "EditorInspectorPluginLayeredTexture",
            "TextureLayeredEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_LAYERED_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/script_editor_plugin.h": {
        "classes": [
            "EditorSyntaxHighlighter",
            "EditorStandardSyntaxHighlighter",
            "EditorPlainTextSyntaxHighlighter",
            "EditorJSONSyntaxHighlighter",
            "ScriptEditorQuickOpen",
            "ScriptEditorBase",
            "ScriptEditor",
            "ScriptEditorPlugin"
        ],
        "structs": [
            "ScriptHistory"
        ],
        "defines": [
            "SCRIPT_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/asset_library_editor_plugin.h": {
        "classes": [
            "EditorAssetLibraryItem",
            "EditorAssetLibraryItemDescription",
            "EditorAssetLibraryItemDownload",
            "EditorAssetLibrary",
            "AssetLibraryEditorPlugin"
        ],
        "structs": [
            "Preview",
            "ImageQueue"
        ],
        "defines": [
            "ASSET_LIBRARY_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/node_3d_editor_plugin.h": {
        "classes": [
            "ViewportRotationControl",
            "Node3DEditorViewport",
            "Node3DEditorSelectedItem",
            "Node3DEditorViewportContainer",
            "Node3DEditor",
            "Node3DEditorPlugin",
            "ViewportNavigationControl"
        ],
        "structs": [
            "Axis2D",
            "Axis2DCompare",
            "_RayResult",
            "EditData",
            "Cursor",
            "Gizmo"
        ],
        "defines": [
            "NODE_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/occluder_instance_3d_editor_plugin.h": {
        "classes": [
            "OccluderInstance3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "OCCLUDER_INSTANCE_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/polygon_3d_editor_plugin.h": {
        "classes": [
            "Polygon3DEditor",
            "Polygon3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "POLYGON_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/navigation_obstacle_2d_editor_plugin.h": {
        "classes": [
            "NavigationObstacle2DEditor",
            "NavigationObstacle2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_OBSTACLE_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/packed_scene_translation_parser_plugin.h": {
        "classes": [
            "PackedSceneEditorTranslationParserPlugin"
        ],
        "structs": [],
        "defines": [
            "PACKED_SCENE_TRANSLATION_PARSER_PLUGIN_H"
        ]
    },
    "editor/plugins/theme_editor_plugin.h": {
        "classes": [
            "ThemeItemImportTree",
            "ThemeItemEditorDialog",
            "ThemeTypeDialog",
            "ThemeItemLabel",
            "ThemeTypeEditor",
            "ThemeEditor",
            "ThemeEditorPlugin"
        ],
        "structs": [
            "ThemeItem",
            "LeadingStylebox"
        ],
        "defines": [
            "THEME_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/text_shader_editor.h": {
        "classes": [
            "GDShaderSyntaxHighlighter",
            "ShaderTextEditor",
            "TextShaderEditor"
        ],
        "structs": [
            "WarningsComparator"
        ],
        "defines": [
            "TEXT_SHADER_EDITOR_H"
        ]
    },
    "editor/plugins/animation_tree_editor_plugin.h": {
        "classes": [
            "AnimationTreeNodeEditorPlugin",
            "AnimationTreeEditor",
            "AnimationTreeEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "ANIMATION_TREE_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/visual_shader_editor_plugin.h": {
        "classes": [
            "VisualShaderNodePlugin",
            "VisualShaderGraphPlugin",
            "VisualShaderEditedProperty",
            "VisualShaderEditor",
            "VaryingMenuOptions",
            "VisualShaderNodePluginDefault",
            "EditorPropertyVisualShaderMode",
            "EditorInspectorVisualShaderModePlugin",
            "VisualShaderNodePortPreview",
            "VisualShaderConversionPlugin"
        ],
        "structs": [
            "InputPort",
            "Port",
            "Link",
            "AddOption",
            "_OptionComparator",
            "DragOp",
            "CopyItem"
        ],
        "defines": [
            "VISUAL_SHADER_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/sub_viewport_preview_editor_plugin.h": {
        "classes": [
            "EditorInspectorPluginSubViewportPreview",
            "SubViewportPreviewEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "SUB_VIEWPORT_PREVIEW_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/texture_3d_editor_plugin.h": {
        "classes": [
            "Texture3DEditor",
            "EditorInspectorPlugin3DTexture",
            "Texture3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/gpu_particles_2d_editor_plugin.h": {
        "classes": [
            "GPUParticles2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "GPU_PARTICLES_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/mesh_editor_plugin.h": {
        "classes": [
            "MeshEditor",
            "EditorInspectorPluginMesh",
            "MeshEditorPlugin"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "MESH_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/collision_polygon_2d_editor_plugin.h": {
        "classes": [
            "CollisionPolygon2DEditor",
            "CollisionPolygon2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "COLLISION_POLYGON_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/lightmap_gi_editor_plugin.h": {
        "classes": [
            "LightmapGIEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "LIGHTMAP_GI_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/collision_shape_2d_editor_plugin.h": {
        "classes": [
            "CollisionShape2DEditor",
            "CollisionShape2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "COLLISION_SHAPE_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/shader_editor_plugin.h": {
        "classes": [
            "ShaderEditorPlugin"
        ],
        "structs": [
            "EditedShader"
        ],
        "defines": [
            "SHADER_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/resource_preloader_editor_plugin.h": {
        "classes": [
            "ResourcePreloaderEditor",
            "ResourcePreloaderEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_PRELOADER_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/mesh_library_editor_plugin.h": {
        "classes": [
            "MeshLibraryEditor",
            "MeshLibraryEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "MESH_LIBRARY_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/animation_blend_space_2d_editor.h": {
        "classes": [
            "AnimationNodeBlendSpace2DEditor"
        ],
        "structs": [],
        "defines": [
            "ANIMATION_BLEND_SPACE_2D_EDITOR_H"
        ]
    },
    "editor/plugins/navigation_obstacle_3d_editor_plugin.h": {
        "classes": [
            "NavigationObstacle3DEditor",
            "NavigationObstacle3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_OBSTACLE_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/polygon_2d_editor_plugin.h": {
        "classes": [
            "Polygon2DEditor",
            "Polygon2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "POLYGON_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/debugger_editor_plugin.h": {
        "classes": [
            "DebuggerEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "DEBUGGER_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/editor_resource_tooltip_plugins.h": {
        "classes": [
            "EditorResourceTooltipPlugin",
            "EditorTextureTooltipPlugin"
        ],
        "structs": [],
        "defines": [
            "EDITOR_RESOURCE_TOOLTIP_PLUGINS_H"
        ]
    },
    "editor/plugins/curve_editor_plugin.h": {
        "classes": [
            "CurveEdit",
            "CurveEditor",
            "EditorInspectorPluginCurve",
            "CurveEditorPlugin",
            "CurvePreviewGenerator"
        ],
        "structs": [],
        "defines": [
            "CURVE_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/animation_player_editor_plugin.h": {
        "classes": [
            "AnimationPlayerEditor",
            "AnimationPlayerEditorPlugin",
            "EditorInspectorPluginAnimationTrackKeyEdit",
            "AnimationTrackKeyEditEditorPlugin"
        ],
        "structs": [
            "BlendEditor"
        ],
        "defines": [
            "ANIMATION_PLAYER_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/texture_editor_plugin.h": {
        "classes": [
            "TexturePreview",
            "EditorInspectorPluginTexture",
            "TextureEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/camera_3d_editor_plugin.h": {
        "classes": [
            "Camera3DEditor",
            "Camera3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "CAMERA_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/version_control_editor_plugin.h": {
        "classes": [
            "VersionControlEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "VERSION_CONTROL_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/physical_bone_3d_editor_plugin.h": {
        "classes": [
            "PhysicalBone3DEditor",
            "PhysicalBone3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "PHYSICAL_BONE_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/bit_map_editor_plugin.h": {
        "classes": [
            "BitMapEditor",
            "EditorInspectorPluginBitMap",
            "BitMapEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "BIT_MAP_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/skeleton_ik_3d_editor_plugin.h": {
        "classes": [
            "SkeletonIK3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "SKELETON_IK_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/gpu_particles_3d_editor_plugin.h": {
        "classes": [
            "GPUParticles3DEditorBase",
            "GPUParticles3DEditor",
            "GPUParticles3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "GPU_PARTICLES_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/material_editor_plugin.h": {
        "classes": [
            "MaterialEditor",
            "EditorInspectorPluginMaterial",
            "MaterialEditorPlugin",
            "StandardMaterial3DConversionPlugin",
            "ORMMaterial3DConversionPlugin",
            "ParticleProcessMaterialConversionPlugin",
            "CanvasItemMaterialConversionPlugin",
            "ProceduralSkyMaterialConversionPlugin",
            "PanoramaSkyMaterialConversionPlugin",
            "PhysicalSkyMaterialConversionPlugin",
            "FogMaterialConversionPlugin"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "MATERIAL_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/dedicated_server_export_plugin.h": {
        "classes": [
            "DedicatedServerExportPlugin"
        ],
        "structs": [],
        "defines": [
            "DEDICATED_SERVER_EXPORT_PLUGIN_H"
        ]
    },
    "editor/plugins/sprite_2d_editor_plugin.h": {
        "classes": [
            "Sprite2DEditor",
            "Sprite2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "SPRITE_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/shader_file_editor_plugin.h": {
        "classes": [
            "ShaderFileEditor",
            "ShaderFileEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "SHADER_FILE_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/animation_blend_space_1d_editor.h": {
        "classes": [
            "AnimationNodeBlendSpace1DEditor"
        ],
        "structs": [],
        "defines": [
            "ANIMATION_BLEND_SPACE_1D_EDITOR_H"
        ]
    },
    "editor/plugins/skeleton_3d_editor_plugin.h": {
        "classes": [
            "BoneTransformEditor",
            "Skeleton3DEditor",
            "EditorInspectorPluginSkeleton",
            "Skeleton3DEditorPlugin",
            "Skeleton3DGizmoPlugin"
        ],
        "structs": [
            "BoneInfo"
        ],
        "defines": [
            "SKELETON_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/multimesh_editor_plugin.h": {
        "classes": [
            "MultiMeshEditor",
            "MultiMeshEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "MULTIMESH_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/sprite_frames_editor_plugin.h": {
        "classes": [
            "ClipboardSpriteFrames",
            "SpriteFramesEditor",
            "SpriteFramesEditorPlugin"
        ],
        "structs": [
            "Frame"
        ],
        "defines": [
            "SPRITE_FRAMES_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/cast_2d_editor_plugin.h": {
        "classes": [
            "Cast2DEditor",
            "Cast2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "CAST_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/navigation_polygon_editor_plugin.h": {
        "classes": [
            "NavigationPolygonEditor",
            "NavigationPolygonEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_POLYGON_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/animation_library_editor.h": {
        "classes": [
            "AnimationLibraryEditor"
        ],
        "structs": [],
        "defines": [
            "ANIMATION_LIBRARY_EDITOR_H"
        ]
    },
    "editor/plugins/gradient_texture_2d_editor_plugin.h": {
        "classes": [
            "GradientTexture2DEdit",
            "GradientTexture2DEditor",
            "EditorInspectorPluginGradientTexture2D",
            "GradientTexture2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "GRADIENT_TEXTURE_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/abstract_polygon_2d_editor.h": {
        "classes": [
            "AbstractPolygon2DEditor",
            "AbstractPolygon2DEditorPlugin"
        ],
        "structs": [
            "Vertex",
            "PosVertex"
        ],
        "defines": [
            "ABSTRACT_POLYGON_2D_EDITOR_H"
        ]
    },
    "editor/plugins/canvas_item_editor_plugin.h": {
        "classes": [
            "CanvasItemEditorSelectedItem",
            "CanvasItemEditor",
            "CanvasItemEditorPlugin",
            "CanvasItemEditorViewport"
        ],
        "structs": [
            "_SelectResult",
            "_HoverResult",
            "BoneList",
            "BoneKey",
            "PoseClipboard"
        ],
        "defines": [
            "CANVAS_ITEM_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/input_event_editor_plugin.h": {
        "classes": [
            "InputEventConfigContainer",
            "EditorInspectorPluginInputEvent",
            "InputEventEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "INPUT_EVENT_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/audio_stream_editor_plugin.h": {
        "classes": [
            "AudioStreamEditor",
            "EditorInspectorPluginAudioStream",
            "AudioStreamEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/editor_debugger_plugin.h": {
        "classes": [
            "EditorDebuggerSession",
            "EditorDebuggerPlugin"
        ],
        "structs": [],
        "defines": [
            "EDITOR_DEBUGGER_PLUGIN_H"
        ]
    },
    "editor/plugins/navigation_link_2d_editor_plugin.h": {
        "classes": [
            "NavigationLink2DEditor",
            "NavigationLink2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_LINK_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/animation_blend_tree_editor_plugin.h": {
        "classes": [
            "AnimationNodeBlendTreeEditor"
        ],
        "structs": [
            "AddOption"
        ],
        "defines": [
            "ANIMATION_BLEND_TREE_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/style_box_editor_plugin.h": {
        "classes": [
            "StyleBoxPreview",
            "EditorInspectorPluginStyleBox",
            "StyleBoxEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "STYLE_BOX_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/control_editor_plugin.h": {
        "classes": [
            "ControlPositioningWarning",
            "EditorPropertyAnchorsPreset",
            "EditorPropertySizeFlags",
            "EditorInspectorPluginControl",
            "ControlEditorPopupButton",
            "ControlEditorPresetPicker",
            "AnchorPresetPicker",
            "SizeFlagPresetPicker",
            "ControlEditorToolbar",
            "ControlEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "CONTROL_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/path_3d_editor_plugin.h": {
        "classes": [
            "Path3DGizmo",
            "Path3DGizmoPlugin",
            "Path3DEditorPlugin"
        ],
        "structs": [
            "HandleInfo"
        ],
        "defines": [
            "PATH_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/cpu_particles_2d_editor_plugin.h": {
        "classes": [
            "CPUParticles2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "CPU_PARTICLES_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/root_motion_editor_plugin.h": {
        "classes": [
            "EditorPropertyRootMotion",
            "EditorInspectorRootMotionPlugin"
        ],
        "structs": [],
        "defines": [
            "ROOT_MOTION_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/text_editor.h": {
        "classes": [
            "TextEditor"
        ],
        "structs": [],
        "defines": [
            "TEXT_EDITOR_H"
        ]
    },
    "editor/plugins/particle_process_material_editor_plugin.h": {
        "classes": [
            "ParticleProcessMaterialMinMaxPropertyEditor",
            "Hover",
            "Drag",
            "Mode",
            "EditorInspectorParticleProcessMaterialPlugin"
        ],
        "structs": [],
        "defines": [
            "PARTICLE_PROCESS_MATERIAL_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/animation_state_machine_editor.h": {
        "classes": [
            "AnimationNodeStateMachineEditor",
            "EditorAnimationMultiTransitionEdit"
        ],
        "structs": [
            "ThemeCache",
            "NodeRect",
            "TransitionLine",
            "NodeUR",
            "TransitionUR",
            "Transition"
        ],
        "defines": [
            "ANIMATION_STATE_MACHINE_EDITOR_H"
        ]
    },
    "editor/plugins/script_text_editor.h": {
        "classes": [
            "ConnectionInfoDialog",
            "ScriptTextEditor"
        ],
        "structs": [],
        "defines": [
            "SCRIPT_TEXT_EDITOR_H"
        ]
    },
    "editor/plugins/light_occluder_2d_editor_plugin.h": {
        "classes": [
            "LightOccluder2DEditor",
            "LightOccluder2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "LIGHT_OCCLUDER_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/gdextension_export_plugin.h": {
        "classes": [
            "GDExtensionExportPlugin"
        ],
        "structs": [],
        "defines": [
            "GDEXTENSION_EXPORT_PLUGIN_H"
        ]
    },
    "editor/plugins/audio_stream_randomizer_editor_plugin.h": {
        "classes": [
            "AudioStreamRandomizerEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_RANDOMIZER_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/packed_scene_editor_plugin.h": {
        "classes": [
            "PackedSceneEditor",
            "EditorInspectorPluginPackedScene",
            "PackedSceneEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "PACKED_SCENE_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/texture_region_editor_plugin.h": {
        "classes": [
            "TextureRegionEditor",
            "EditorInspectorPluginTextureRegion",
            "TextureRegionEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "TEXTURE_REGION_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/skeleton_2d_editor_plugin.h": {
        "classes": [
            "Skeleton2DEditor",
            "Skeleton2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "SKELETON_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/line_2d_editor_plugin.h": {
        "classes": [
            "Line2DEditor",
            "Line2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "LINE_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/bone_map_editor_plugin.h": {
        "classes": [
            "BoneMapperButton",
            "BoneMapperItem",
            "BonePicker",
            "BoneMapper",
            "BoneMapEditor",
            "EditorInspectorPluginBoneMap",
            "BoneMapEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "BONE_MAP_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/gradient_editor_plugin.h": {
        "classes": [
            "GradientEdit",
            "GradientEditor",
            "EditorInspectorPluginGradient",
            "GradientEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "GRADIENT_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/voxel_gi_editor_plugin.h": {
        "classes": [
            "VoxelGIEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "VOXEL_GI_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/node_3d_editor_gizmos.h": {
        "classes": [
            "EditorNode3DGizmo",
            "EditorNode3DGizmoPlugin"
        ],
        "structs": [
            "Instance"
        ],
        "defines": [
            "NODE_3D_EDITOR_GIZMOS_H"
        ]
    },
    "editor/plugins/font_config_plugin.h": {
        "classes": [
            "EditorPropertyFontMetaObject",
            "EditorPropertyFontOTObject",
            "EditorPropertyFontMetaOverride",
            "EditorPropertyOTVariation",
            "EditorPropertyOTFeatures",
            "EditorInspectorPluginFontVariation",
            "FontPreview",
            "EditorInspectorPluginFontPreview",
            "EditorPropertyFontNamesArray",
            "EditorInspectorPluginSystemFont",
            "FontEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "FONT_CONFIG_PLUGIN_H"
        ]
    },
    "editor/plugins/cpu_particles_3d_editor_plugin.h": {
        "classes": [
            "CPUParticles3DEditor",
            "CPUParticles3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "CPU_PARTICLES_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/theme_editor_preview.h": {
        "classes": [
            "ThemeEditorPreview",
            "DefaultThemeEditorPreview",
            "SceneThemeEditorPreview"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "THEME_EDITOR_PREVIEW_H"
        ]
    },
    "editor/plugins/path_2d_editor_plugin.h": {
        "classes": [
            "Path2DEditor",
            "Path2DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "PATH_2D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/mesh_instance_3d_editor_plugin.h": {
        "classes": [
            "MeshInstance3DEditor",
            "MeshInstance3DEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "MESH_INSTANCE_3D_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/parallax_background_editor_plugin.h": {
        "classes": [
            "ParallaxBackgroundEditorPlugin"
        ],
        "structs": [],
        "defines": [
            "PARALLAX_BACKGROUND_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/editor_resource_conversion_plugin.h": {
        "classes": [
            "EditorResourceConversionPlugin"
        ],
        "structs": [],
        "defines": [
            "EDITOR_RESOURCE_CONVERSION_PLUGIN_H"
        ]
    },
    "editor/plugins/editor_preview_plugins.h": {
        "classes": [
            "EditorTexturePreviewPlugin",
            "EditorImagePreviewPlugin",
            "EditorBitmapPreviewPlugin",
            "EditorPackedScenePreviewPlugin",
            "EditorMaterialPreviewPlugin",
            "EditorScriptPreviewPlugin",
            "EditorAudioStreamPreviewPlugin",
            "EditorMeshPreviewPlugin",
            "EditorFontPreviewPlugin",
            "EditorGradientPreviewPlugin"
        ],
        "structs": [],
        "defines": [
            "EDITOR_PREVIEW_PLUGINS_H"
        ]
    },
    "editor/plugins/gizmos/gizmo_3d_helper.h": {
        "classes": [
            "Gizmo3DHelper"
        ],
        "structs": [],
        "defines": [
            "GIZMO_3D_HELPER_H"
        ]
    },
    "editor/plugins/gizmos/audio_stream_player_3d_gizmo_plugin.h": {
        "classes": [
            "AudioStreamPlayer3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_PLAYER_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/physics_bone_3d_gizmo_plugin.h": {
        "classes": [
            "PhysicalBone3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "PHYSICS_BONE_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/reflection_probe_gizmo_plugin.h": {
        "classes": [
            "ReflectionProbeGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "REFLECTION_PROBE_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/lightmap_gi_gizmo_plugin.h": {
        "classes": [
            "LightmapGIGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "LIGHTMAP_GI_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/gpu_particles_collision_3d_gizmo_plugin.h": {
        "classes": [
            "GPUParticlesCollision3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "GPU_PARTICLES_COLLISION_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/occluder_instance_3d_gizmo_plugin.h": {
        "classes": [
            "OccluderInstance3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "OCCLUDER_INSTANCE_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/spring_arm_3d_gizmo_plugin.h": {
        "classes": [
            "SpringArm3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "SPRING_ARM_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/collision_polygon_3d_gizmo_plugin.h": {
        "classes": [
            "CollisionPolygon3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "COLLISION_POLYGON_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/decal_gizmo_plugin.h": {
        "classes": [
            "DecalGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "DECAL_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/light_3d_gizmo_plugin.h": {
        "classes": [
            "Light3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "LIGHT_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/sprite_base_3d_gizmo_plugin.h": {
        "classes": [
            "SpriteBase3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "SPRITE_BASE_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/collision_shape_3d_gizmo_plugin.h": {
        "classes": [
            "CollisionShape3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "COLLISION_SHAPE_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/marker_3d_gizmo_plugin.h": {
        "classes": [
            "Marker3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "MARKER_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/voxel_gi_gizmo_plugin.h": {
        "classes": [
            "VoxelGIGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "VOXEL_GI_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/collision_object_3d_gizmo_plugin.h": {
        "classes": [
            "CollisionObject3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "COLLISION_OBJECT_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/navigation_link_3d_gizmo_plugin.h": {
        "classes": [
            "NavigationLink3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "NAVIGATION_LINK_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/visible_on_screen_notifier_3d_gizmo_plugin.h": {
        "classes": [
            "VisibleOnScreenNotifier3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "VISIBLE_ON_SCREEN_NOTIFIER_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/shape_cast_3d_gizmo_plugin.h": {
        "classes": [
            "ShapeCast3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "SHAPE_CAST_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/gpu_particles_3d_gizmo_plugin.h": {
        "classes": [
            "GPUParticles3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "GPU_PARTICLES_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/mesh_instance_3d_gizmo_plugin.h": {
        "classes": [
            "MeshInstance3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "MESH_INSTANCE_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/soft_body_3d_gizmo_plugin.h": {
        "classes": [
            "SoftBody3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "SOFT_BODY_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/navigation_region_3d_gizmo_plugin.h": {
        "classes": [
            "NavigationRegion3DGizmoPlugin"
        ],
        "structs": [
            "_EdgeKey"
        ],
        "defines": [
            "NAVIGATION_REGION_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/ray_cast_3d_gizmo_plugin.h": {
        "classes": [
            "RayCast3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "RAY_CAST_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/camera_3d_gizmo_plugin.h": {
        "classes": [
            "Camera3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "CAMERA_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/vehicle_body_3d_gizmo_plugin.h": {
        "classes": [
            "VehicleWheel3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "VEHICLE_BODY_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/cpu_particles_3d_gizmo_plugin.h": {
        "classes": [
            "CPUParticles3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "CPU_PARTICLES_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/joint_3d_gizmo_plugin.h": {
        "classes": [
            "Joint3DGizmoPlugin",
            "JointGizmosDrawer"
        ],
        "structs": [],
        "defines": [
            "JOINT_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/audio_listener_3d_gizmo_plugin.h": {
        "classes": [
            "AudioListener3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "AUDIO_LISTENER_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/label_3d_gizmo_plugin.h": {
        "classes": [
            "Label3DGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "LABEL_3D_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/fog_volume_gizmo_plugin.h": {
        "classes": [
            "FogVolumeGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "FOG_VOLUME_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/gizmos/lightmap_probe_gizmo_plugin.h": {
        "classes": [
            "LightmapProbeGizmoPlugin"
        ],
        "structs": [],
        "defines": [
            "LIGHTMAP_PROBE_GIZMO_PLUGIN_H"
        ]
    },
    "editor/plugins/tiles/tile_proxies_manager_dialog.h": {
        "classes": [
            "TileProxiesManagerDialog"
        ],
        "structs": [],
        "defines": [
            "TILE_PROXIES_MANAGER_DIALOG_H"
        ]
    },
    "editor/plugins/tiles/tile_set_scenes_collection_source_editor.h": {
        "classes": [
            "TileSetScenesCollectionSourceEditor",
            "TileSetScenesCollectionProxyObject",
            "SceneTileProxyObject"
        ],
        "structs": [],
        "defines": [
            "TILE_SET_SCENES_COLLECTION_SOURCE_EDITOR_H"
        ]
    },
    "editor/plugins/tiles/tiles_editor_plugin.h": {
        "classes": [
            "TilesEditorUtils",
            "TileMapEditorPlugin",
            "TileSetEditorPlugin"
        ],
        "structs": [
            "SourceNameComparator",
            "QueueItem"
        ],
        "defines": [
            "TILES_EDITOR_PLUGIN_H"
        ]
    },
    "editor/plugins/tiles/tile_set_editor.h": {
        "classes": [
            "TileSetEditor",
            "TileSourceInspectorPlugin"
        ],
        "structs": [],
        "defines": [
            "TILE_SET_EDITOR_H"
        ]
    },
    "editor/plugins/tiles/tile_map_layer_editor.h": {
        "classes": [
            "TileMapLayerSubEditorPlugin",
            "TileMapLayerEditorTilesPlugin",
            "TileMapLayerEditorTerrainsPlugin",
            "TileMapLayerEditor"
        ],
        "structs": [
            "TabData"
        ],
        "defines": [
            "TILE_MAP_LAYER_EDITOR_H"
        ]
    },
    "editor/plugins/tiles/tile_atlas_view.h": {
        "classes": [
            "TileAtlasView"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "TILE_ATLAS_VIEW_H"
        ]
    },
    "editor/plugins/tiles/tile_data_editors.h": {
        "classes": [
            "TileDataEditor",
            "DummyObject",
            "GenericTilePolygonEditor",
            "TileDataDefaultEditor",
            "TileDataTextureOriginEditor",
            "TileDataPositionEditor",
            "TileDataYSortEditor",
            "TileDataOcclusionShapeEditor",
            "TileDataCollisionEditor",
            "TileDataTerrainsEditor",
            "TileDataNavigationEditor"
        ],
        "structs": [],
        "defines": [
            "TILE_DATA_EDITORS_H"
        ]
    },
    "editor/plugins/tiles/atlas_merging_dialog.h": {
        "classes": [
            "AtlasMergingDialog"
        ],
        "structs": [],
        "defines": [
            "ATLAS_MERGING_DIALOG_H"
        ]
    },
    "editor/plugins/tiles/tile_set_atlas_source_editor.h": {
        "classes": [
            "TileSetAtlasSourceEditor",
            "TileSetAtlasSourceProxyObject",
            "AtlasTileProxyObject",
            "TileAtlasControl",
            "EditorPropertyTilePolygon",
            "EditorInspectorPluginTileData"
        ],
        "structs": [
            "TileSelection"
        ],
        "defines": [
            "TILE_SET_ATLAS_SOURCE_EDITOR_H"
        ]
    },
    "editor/gui/editor_zoom_widget.h": {
        "classes": [
            "EditorZoomWidget"
        ],
        "structs": [],
        "defines": [
            "EDITOR_ZOOM_WIDGET_H"
        ]
    },
    "editor/gui/editor_validation_panel.h": {
        "classes": [
            "EditorValidationPanel"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "EDITOR_VALIDATION_PANEL_H"
        ]
    },
    "editor/gui/editor_scene_tabs.h": {
        "classes": [
            "EditorSceneTabs"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCENE_TABS_H"
        ]
    },
    "editor/gui/editor_bottom_panel.h": {
        "classes": [
            "EditorBottomPanel"
        ],
        "structs": [
            "BottomPanelItem"
        ],
        "defines": [
            "EDITOR_BOTTOM_PANEL_H"
        ]
    },
    "editor/gui/editor_toaster.h": {
        "classes": [
            "EditorToaster"
        ],
        "structs": [
            "Toast"
        ],
        "defines": [
            "EDITOR_TOASTER_H"
        ]
    },
    "editor/gui/editor_object_selector.h": {
        "classes": [
            "EditorObjectSelector"
        ],
        "structs": [],
        "defines": [
            "EDITOR_OBJECT_SELECTOR_H"
        ]
    },
    "editor/gui/editor_spin_slider.h": {
        "classes": [
            "EditorSpinSlider"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SPIN_SLIDER_H"
        ]
    },
    "editor/gui/editor_dir_dialog.h": {
        "classes": [
            "EditorDirDialog"
        ],
        "structs": [],
        "defines": [
            "EDITOR_DIR_DIALOG_H"
        ]
    },
    "editor/gui/editor_title_bar.h": {
        "classes": [
            "EditorTitleBar"
        ],
        "structs": [],
        "defines": [
            "EDITOR_TITLE_BAR_H"
        ]
    },
    "editor/gui/editor_file_dialog.h": {
        "classes": [
            "EditorFileDialog"
        ],
        "structs": [
            "ThemeCache"
        ],
        "defines": [
            "EDITOR_FILE_DIALOG_H"
        ]
    },
    "editor/gui/scene_tree_editor.h": {
        "classes": [
            "SceneTreeEditor",
            "SceneTreeDialog"
        ],
        "structs": [],
        "defines": [
            "SCENE_TREE_EDITOR_H"
        ]
    },
    "editor/gui/editor_run_bar.h": {
        "classes": [
            "EditorRunBar"
        ],
        "structs": [],
        "defines": [
            "EDITOR_RUN_BAR_H"
        ]
    },
    "editor/debugger/editor_performance_profiler.h": {
        "classes": [
            "EditorPerformanceProfiler",
            "Monitor"
        ],
        "structs": [],
        "defines": [
            "EDITOR_PERFORMANCE_PROFILER_H"
        ]
    },
    "editor/debugger/editor_file_server.h": {
        "classes": [
            "EditorFileServer"
        ],
        "structs": [],
        "defines": [
            "EDITOR_FILE_SERVER_H"
        ]
    },
    "editor/debugger/editor_debugger_server.h": {
        "classes": [
            "EditorDebuggerServer"
        ],
        "structs": [],
        "defines": [
            "EDITOR_DEBUGGER_SERVER_H"
        ]
    },
    "editor/debugger/script_editor_debugger.h": {
        "classes": [
            "ScriptEditorDebugger"
        ],
        "structs": [
            "ThreadDebugged",
            "ThreadSort"
        ],
        "defines": [
            "SCRIPT_EDITOR_DEBUGGER_H"
        ]
    },
    "editor/debugger/editor_visual_profiler.h": {
        "classes": [
            "EditorVisualProfiler"
        ],
        "structs": [
            "Metric",
            "Area"
        ],
        "defines": [
            "EDITOR_VISUAL_PROFILER_H"
        ]
    },
    "editor/debugger/editor_debugger_inspector.h": {
        "classes": [
            "EditorDebuggerRemoteObject",
            "EditorDebuggerInspector"
        ],
        "structs": [],
        "defines": [
            "EDITOR_DEBUGGER_INSPECTOR_H"
        ]
    },
    "editor/debugger/editor_debugger_tree.h": {
        "classes": [
            "EditorDebuggerTree"
        ],
        "structs": [],
        "defines": [
            "EDITOR_DEBUGGER_TREE_H"
        ]
    },
    "editor/debugger/editor_debugger_node.h": {
        "classes": [
            "EditorDebuggerNode",
            "Breakpoint"
        ],
        "structs": [],
        "defines": [
            "EDITOR_DEBUGGER_NODE_H"
        ]
    },
    "editor/debugger/editor_profiler.h": {
        "classes": [
            "EditorProfiler"
        ],
        "structs": [
            "Metric",
            "Category",
            "Item"
        ],
        "defines": [
            "EDITOR_PROFILER_H"
        ]
    },
    "editor/debugger/debug_adapter/debug_adapter_server.h": {
        "classes": [
            "DebugAdapterServer"
        ],
        "structs": [],
        "defines": [
            "DEBUG_ADAPTER_SERVER_H"
        ]
    },
    "editor/debugger/debug_adapter/debug_adapter_protocol.h": {
        "classes": [
            "DebugAdapterProtocol"
        ],
        "structs": [
            "DAPeer"
        ],
        "defines": [
            "DEBUG_ADAPTER_PROTOCOL_H",
            "DAP_MAX_BUFFER_SIZE",
            "DAP_MAX_CLIENTS"
        ]
    },
    "editor/debugger/debug_adapter/debug_adapter_parser.h": {
        "classes": [
            "DebugAdapterParser"
        ],
        "structs": [],
        "defines": [
            "DEBUG_ADAPTER_PARSER_H"
        ]
    },
    "editor/debugger/debug_adapter/debug_adapter_types.h": {
        "classes": [],
        "structs": [
            "Checksum",
            "Source",
            "Breakpoint",
            "BreakpointLocation",
            "Capabilities",
            "Message",
            "Scope",
            "SourceBreakpoint",
            "StackFrame",
            "Thread",
            "Variable"
        ],
        "defines": [
            "DEBUG_ADAPTER_TYPES_H"
        ]
    },
    "editor/export/editor_export_shared_object.h": {
        "classes": [],
        "structs": [
            "SharedObject"
        ],
        "defines": [
            "EDITOR_EXPORT_SHARED_OBJECT_H"
        ]
    },
    "editor/export/editor_export_plugin.h": {
        "classes": [
            "EditorExportPlugin"
        ],
        "structs": [
            "ExtraFile"
        ],
        "defines": [
            "EDITOR_EXPORT_PLUGIN_H"
        ]
    },
    "editor/export/export_template_manager.h": {
        "classes": [
            "ExportTemplateManager"
        ],
        "structs": [],
        "defines": [
            "EXPORT_TEMPLATE_MANAGER_H"
        ]
    },
    "editor/export/editor_export.h": {
        "classes": [
            "EditorExport"
        ],
        "structs": [],
        "defines": [
            "EDITOR_EXPORT_H"
        ]
    },
    "editor/export/editor_export_platform_pc.h": {
        "classes": [
            "EditorExportPlatformPC"
        ],
        "structs": [],
        "defines": [
            "EDITOR_EXPORT_PLATFORM_PC_H"
        ]
    },
    "editor/export/editor_export_platform.h": {
        "classes": [
            "EditorExportPlatform"
        ],
        "structs": [
            "ExportMessage",
            "SavedData",
            "PackData",
            "ZipData",
            "FileExportCache",
            "ExportNotifier",
            "ExportOption"
        ],
        "defines": [
            "EDITOR_EXPORT_PLATFORM_H"
        ]
    },
    "editor/export/editor_export_preset.h": {
        "classes": [
            "EditorExportPreset"
        ],
        "structs": [],
        "defines": [
            "EDITOR_EXPORT_PRESET_H"
        ]
    },
    "editor/export/project_export.h": {
        "classes": [
            "ProjectExportTextureFormatError",
            "ProjectExportDialog"
        ],
        "structs": [],
        "defines": [
            "PROJECT_EXPORT_H"
        ]
    },
    "editor/import/resource_importer_dynamic_font.h": {
        "classes": [
            "ResourceImporterDynamicFont"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_DYNAMIC_FONT_H"
        ]
    },
    "editor/import/resource_importer_csv_translation.h": {
        "classes": [
            "ResourceImporterCSVTranslation"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_CSV_TRANSLATION_H"
        ]
    },
    "editor/import/resource_importer_wav.h": {
        "classes": [
            "ResourceImporterWAV"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_WAV_H"
        ]
    },
    "editor/import/resource_importer_image.h": {
        "classes": [
            "ResourceImporterImage"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_IMAGE_H"
        ]
    },
    "editor/import/resource_importer_texture.h": {
        "classes": [
            "ResourceImporterTexture"
        ],
        "structs": [
            "MakeInfo"
        ],
        "defines": [
            "RESOURCE_IMPORTER_TEXTURE_H"
        ]
    },
    "editor/import/resource_importer_texture_atlas.h": {
        "classes": [
            "ResourceImporterTextureAtlas"
        ],
        "structs": [
            "PackData"
        ],
        "defines": [
            "RESOURCE_IMPORTER_TEXTURE_ATLAS_H"
        ]
    },
    "editor/import/editor_import_plugin.h": {
        "classes": [
            "EditorImportPlugin"
        ],
        "structs": [],
        "defines": [
            "EDITOR_IMPORT_PLUGIN_H"
        ]
    },
    "editor/import/resource_importer_bmfont.h": {
        "classes": [
            "ResourceImporterBMFont"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_BMFONT_H"
        ]
    },
    "editor/import/dynamic_font_import_settings.h": {
        "classes": [
            "DynamicFontImportSettingsData",
            "DynamicFontImportSettingsDialog"
        ],
        "structs": [],
        "defines": [
            "DYNAMIC_FONT_IMPORT_SETTINGS_H"
        ]
    },
    "editor/import/resource_importer_shader_file.h": {
        "classes": [
            "ResourceImporterShaderFile"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_SHADER_FILE_H"
        ]
    },
    "editor/import/resource_importer_texture_settings.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_TEXTURE_SETTINGS_H"
        ]
    },
    "editor/import/resource_importer_layered_texture.h": {
        "classes": [
            "LayeredTextureImport",
            "ResourceImporterLayeredTexture"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_LAYERED_TEXTURE_H"
        ]
    },
    "editor/import/resource_importer_bitmask.h": {
        "classes": [
            "ResourceImporterBitMap"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_BITMASK_H"
        ]
    },
    "editor/import/resource_importer_imagefont.h": {
        "classes": [
            "ResourceImporterImageFont"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_IMAGEFONT_H"
        ]
    },
    "editor/import/audio_stream_import_settings.h": {
        "classes": [
            "AudioStreamImportSettingsDialog"
        ],
        "structs": [],
        "defines": [
            "AUDIO_STREAM_IMPORT_SETTINGS_H"
        ]
    },
    "editor/import/3d/post_import_plugin_skeleton_renamer.h": {
        "classes": [
            "PostImportPluginSkeletonRenamer"
        ],
        "structs": [],
        "defines": [
            "POST_IMPORT_PLUGIN_SKELETON_RENAMER_H"
        ]
    },
    "editor/import/3d/resource_importer_obj.h": {
        "classes": [
            "EditorOBJImporter",
            "ResourceImporterOBJ"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_OBJ_H"
        ]
    },
    "editor/import/3d/post_import_plugin_skeleton_track_organizer.h": {
        "classes": [
            "PostImportPluginSkeletonTrackOrganizer"
        ],
        "structs": [],
        "defines": [
            "POST_IMPORT_PLUGIN_SKELETON_TRACK_ORGANIZER_H"
        ]
    },
    "editor/import/3d/post_import_plugin_skeleton_rest_fixer.h": {
        "classes": [
            "PostImportPluginSkeletonRestFixer"
        ],
        "structs": [],
        "defines": [
            "POST_IMPORT_PLUGIN_SKELETON_REST_FIXER_H"
        ]
    },
    "editor/import/3d/collada.h": {
        "classes": [
            "Collada"
        ],
        "structs": [
            "Image",
            "Material",
            "Effect",
            "Channel",
            "CameraData",
            "LightData",
            "MeshData",
            "Source",
            "Vertices",
            "Primitives",
            "SourceRef",
            "CurveData",
            "Source",
            "SkinControllerData",
            "Source",
            "Joints",
            "Weights",
            "SourceRef",
            "MorphControllerData",
            "Source",
            "Vertex",
            "Weight",
            "Node",
            "XForm",
            "NodeSkeleton",
            "NodeJoint",
            "NodeGeometry",
            "Material",
            "NodeCamera",
            "NodeLight",
            "VisualScene",
            "AnimationClip",
            "AnimationTrack",
            "Key",
            "State",
            "Version"
        ],
        "defines": [
            "COLLADA_H"
        ]
    },
    "editor/import/3d/resource_importer_scene.h": {
        "classes": [
            "EditorSceneFormatImporter",
            "EditorScenePostImport",
            "EditorScenePostImportPlugin",
            "ResourceImporterScene",
            "EditorSceneFormatImporterESCN"
        ],
        "structs": [],
        "defines": [
            "RESOURCE_IMPORTER_SCENE_H"
        ]
    },
    "editor/import/3d/editor_import_collada.h": {
        "classes": [
            "EditorSceneFormatImporterCollada"
        ],
        "structs": [],
        "defines": [
            "EDITOR_IMPORT_COLLADA_H"
        ]
    },
    "editor/import/3d/scene_import_settings.h": {
        "classes": [
            "SceneImportSettingsDialog"
        ],
        "structs": [
            "MaterialData",
            "MeshData",
            "AnimationData",
            "NodeData"
        ],
        "defines": [
            "SCENE_IMPORT_SETTINGS_H"
        ]
    },
    "editor/themes/editor_theme.h": {
        "classes": [
            "EditorTheme"
        ],
        "structs": [],
        "defines": [
            "EDITOR_THEME_H"
        ]
    },
    "editor/themes/editor_scale.h": {
        "classes": [
            "EditorScale"
        ],
        "structs": [],
        "defines": [
            "EDITOR_SCALE_H",
            "EDSCALE"
        ]
    },
    "editor/themes/editor_fonts.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "EDITOR_FONTS_H"
        ]
    },
    "editor/themes/editor_theme_manager.h": {
        "classes": [
            "EditorThemeManager"
        ],
        "structs": [
            "ThemeConfiguration"
        ],
        "defines": [
            "EDITOR_THEME_MANAGER_H"
        ]
    },
    "editor/themes/builtin_fonts.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_EDITOR_FONTS_H"
        ]
    },
    "editor/themes/editor_icons.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "EDITOR_ICONS_H"
        ]
    },
    "editor/themes/editor_color_map.h": {
        "classes": [
            "EditorColorMap"
        ],
        "structs": [],
        "defines": [
            "EDITOR_COLOR_MAP_H"
        ]
    },
    "editor/themes/editor_icons.gen.h": {
        "classes": [],
        "structs": [],
        "defines": [
            "_EDITOR_ICONS_H"
        ]
    }
}